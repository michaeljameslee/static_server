webpackJsonp([1],{

/***/ 100:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// slide
(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory();
  } else {
    // browser global
    window.Flickity = window.Flickity || {};
    window.Flickity.Slide = factory();
  }
})(window, function factory() {
  'use strict';

  function Slide(parent) {
    this.parent = parent;
    this.isOriginLeft = parent.originSide == 'left';
    this.cells = [];
    this.outerWidth = 0;
    this.height = 0;
  }

  var proto = Slide.prototype;

  proto.addCell = function (cell) {
    this.cells.push(cell);
    this.outerWidth += cell.size.outerWidth;
    this.height = Math.max(cell.size.outerHeight, this.height);
    // first cell stuff
    if (this.cells.length == 1) {
      this.x = cell.x; // x comes from first cell
      var beginMargin = this.isOriginLeft ? 'marginLeft' : 'marginRight';
      this.firstMargin = cell.size[beginMargin];
    }
  };

  proto.updateTarget = function () {
    var endMargin = this.isOriginLeft ? 'marginRight' : 'marginLeft';
    var lastCell = this.getLastCell();
    var lastMargin = lastCell ? lastCell.size[endMargin] : 0;
    var slideWidth = this.outerWidth - (this.firstMargin + lastMargin);
    this.target = this.x + this.firstMargin + slideWidth * this.parent.cellAlign;
  };

  proto.getLastCell = function () {
    return this.cells[this.cells.length - 1];
  };

  proto.select = function () {
    this.changeSelectedClass('add');
  };

  proto.unselect = function () {
    this.changeSelectedClass('remove');
  };

  proto.changeSelectedClass = function (method) {
    this.cells.forEach(function (cell) {
      cell.element.classList[method]('is-selected');
    });
  };

  proto.getCellElements = function () {
    return this.cells.map(function (cell) {
      return cell.element;
    });
  };

  return Slide;
});

/***/ }),

/***/ 101:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// animate
(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (utils) {
      return factory(window, utils);
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('fizzy-ui-utils'));
  } else {
    // browser global
    window.Flickity = window.Flickity || {};
    window.Flickity.animatePrototype = factory(window, window.fizzyUIUtils);
  }
})(window, function factory(window, utils) {

  'use strict';

  // -------------------------- requestAnimationFrame -------------------------- //

  // get rAF, prefixed, if present

  var requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame;

  // fallback to setTimeout
  var lastTime = 0;
  if (!requestAnimationFrame) {
    requestAnimationFrame = function requestAnimationFrame(callback) {
      var currTime = new Date().getTime();
      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
      var id = setTimeout(callback, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
  }

  // -------------------------- animate -------------------------- //

  var proto = {};

  proto.startAnimation = function () {
    if (this.isAnimating) {
      return;
    }

    this.isAnimating = true;
    this.restingFrames = 0;
    this.animate();
  };

  proto.animate = function () {
    this.applyDragForce();
    this.applySelectedAttraction();

    var previousX = this.x;

    this.integratePhysics();
    this.positionSlider();
    this.settle(previousX);
    // animate next frame
    if (this.isAnimating) {
      var _this = this;
      requestAnimationFrame(function animateFrame() {
        _this.animate();
      });
    }
  };

  var transformProperty = function () {
    var style = document.documentElement.style;
    if (typeof style.transform == 'string') {
      return 'transform';
    }
    return 'WebkitTransform';
  }();

  proto.positionSlider = function () {
    var x = this.x;
    // wrap position around
    if (this.options.wrapAround && this.cells.length > 1) {
      x = utils.modulo(x, this.slideableWidth);
      x = x - this.slideableWidth;
      this.shiftWrapCells(x);
    }

    x = x + this.cursorPosition;
    // reverse if right-to-left and using transform
    x = this.options.rightToLeft && transformProperty ? -x : x;
    var value = this.getPositionValue(x);
    // use 3D tranforms for hardware acceleration on iOS
    // but use 2D when settled, for better font-rendering
    this.slider.style[transformProperty] = this.isAnimating ? 'translate3d(' + value + ',0,0)' : 'translateX(' + value + ')';

    // scroll event
    var firstSlide = this.slides[0];
    if (firstSlide) {
      var positionX = -this.x - firstSlide.target;
      var progress = positionX / this.slidesWidth;
      this.dispatchEvent('scroll', null, [progress, positionX]);
    }
  };

  proto.positionSliderAtSelected = function () {
    if (!this.cells.length) {
      return;
    }
    this.x = -this.selectedSlide.target;
    this.positionSlider();
  };

  proto.getPositionValue = function (position) {
    if (this.options.percentPosition) {
      // percent position, round to 2 digits, like 12.34%
      return Math.round(position / this.size.innerWidth * 10000) * 0.01 + '%';
    } else {
      // pixel positioning
      return Math.round(position) + 'px';
    }
  };

  proto.settle = function (previousX) {
    // keep track of frames where x hasn't moved
    if (!this.isPointerDown && Math.round(this.x * 100) == Math.round(previousX * 100)) {
      this.restingFrames++;
    }
    // stop animating if resting for 3 or more frames
    if (this.restingFrames > 2) {
      this.isAnimating = false;
      delete this.isFreeScrolling;
      // render position with translateX when settled
      this.positionSlider();
      this.dispatchEvent('settle');
    }
  };

  proto.shiftWrapCells = function (x) {
    // shift before cells
    var beforeGap = this.cursorPosition + x;
    this._shiftCells(this.beforeShiftCells, beforeGap, -1);
    // shift after cells
    var afterGap = this.size.innerWidth - (x + this.slideableWidth + this.cursorPosition);
    this._shiftCells(this.afterShiftCells, afterGap, 1);
  };

  proto._shiftCells = function (cells, gap, shift) {
    for (var i = 0; i < cells.length; i++) {
      var cell = cells[i];
      var cellShift = gap > 0 ? shift : 0;
      cell.wrapShift(cellShift);
      gap -= cell.size.outerWidth;
    }
  };

  proto._unshiftCells = function (cells) {
    if (!cells || !cells.length) {
      return;
    }
    for (var i = 0; i < cells.length; i++) {
      cells[i].wrapShift(0);
    }
  };

  // -------------------------- physics -------------------------- //

  proto.integratePhysics = function () {
    this.x += this.velocity;
    this.velocity *= this.getFrictionFactor();
  };

  proto.applyForce = function (force) {
    this.velocity += force;
  };

  proto.getFrictionFactor = function () {
    return 1 - this.options[this.isFreeScrolling ? 'freeScrollFriction' : 'friction'];
  };

  proto.getRestingPosition = function () {
    // my thanks to Steven Wittens, who simplified this math greatly
    return this.x + this.velocity / (1 - this.getFrictionFactor());
  };

  proto.applyDragForce = function () {
    if (!this.isPointerDown) {
      return;
    }
    // change the position to drag position by applying force
    var dragVelocity = this.dragX - this.x;
    var dragForce = dragVelocity - this.velocity;
    this.applyForce(dragForce);
  };

  proto.applySelectedAttraction = function () {
    // do not attract if pointer down or no cells
    if (this.isPointerDown || this.isFreeScrolling || !this.cells.length) {
      return;
    }
    var distance = this.selectedSlide.target * -1 - this.x;
    var force = distance * this.options.selectedAttraction;
    this.applyForce(force);
  };

  return proto;
});

/***/ }),

/***/ 102:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// drag
(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(17), __webpack_require__(103), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Flickity, Unidragger, utils) {
      return factory(window, Flickity, Unidragger, utils);
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('./flickity'), require('unidragger'), require('fizzy-ui-utils'));
  } else {
    // browser global
    window.Flickity = factory(window, window.Flickity, window.Unidragger, window.fizzyUIUtils);
  }
})(window, function factory(window, Flickity, Unidragger, utils) {

  'use strict';

  // ----- defaults ----- //

  utils.extend(Flickity.defaults, {
    draggable: true,
    dragThreshold: 3
  });

  // ----- create ----- //

  Flickity.createMethods.push('_createDrag');

  // -------------------------- drag prototype -------------------------- //

  var proto = Flickity.prototype;
  utils.extend(proto, Unidragger.prototype);
  proto._touchActionValue = 'pan-y';

  // --------------------------  -------------------------- //

  var isTouch = 'createTouch' in document;
  var isTouchmoveScrollCanceled = false;

  proto._createDrag = function () {
    this.on('activate', this.bindDrag);
    this.on('uiChange', this._uiChangeDrag);
    this.on('childUIPointerDown', this._childUIPointerDownDrag);
    this.on('deactivate', this.unbindDrag);
    // HACK - add seemingly innocuous handler to fix iOS 10 scroll behavior
    // #457, RubaXa/Sortable#973
    if (isTouch && !isTouchmoveScrollCanceled) {
      window.addEventListener('touchmove', function () {});
      isTouchmoveScrollCanceled = true;
    }
  };

  proto.bindDrag = function () {
    if (!this.options.draggable || this.isDragBound) {
      return;
    }
    this.element.classList.add('is-draggable');
    this.handles = [this.viewport];
    this.bindHandles();
    this.isDragBound = true;
  };

  proto.unbindDrag = function () {
    if (!this.isDragBound) {
      return;
    }
    this.element.classList.remove('is-draggable');
    this.unbindHandles();
    delete this.isDragBound;
  };

  proto._uiChangeDrag = function () {
    delete this.isFreeScrolling;
  };

  proto._childUIPointerDownDrag = function (event) {
    event.preventDefault();
    this.pointerDownFocus(event);
  };

  // -------------------------- pointer events -------------------------- //

  // nodes that have text fields
  var cursorNodes = {
    TEXTAREA: true,
    INPUT: true,
    OPTION: true
  };

  // input types that do not have text fields
  var clickTypes = {
    radio: true,
    checkbox: true,
    button: true,
    submit: true,
    image: true,
    file: true
  };

  proto.pointerDown = function (event, pointer) {
    // dismiss inputs with text fields. #403, #404
    var isCursorInput = cursorNodes[event.target.nodeName] && !clickTypes[event.target.type];
    if (isCursorInput) {
      // reset pointerDown logic
      this.isPointerDown = false;
      delete this.pointerIdentifier;
      return;
    }

    this._dragPointerDown(event, pointer);

    // kludge to blur focused inputs in dragger
    var focused = document.activeElement;
    if (focused && focused.blur && focused != this.element &&
    // do not blur body for IE9 & 10, #117
    focused != document.body) {
      focused.blur();
    }
    this.pointerDownFocus(event);
    // stop if it was moving
    this.dragX = this.x;
    this.viewport.classList.add('is-pointer-down');
    // bind move and end events
    this._bindPostStartEvents(event);
    // track scrolling
    this.pointerDownScroll = getScrollPosition();
    window.addEventListener('scroll', this);

    this.dispatchEvent('pointerDown', event, [pointer]);
  };

  proto.pointerDownFocus = function (event) {
    // focus element, if not touch, and its not an input or select
    var canPointerDown = getCanPointerDown(event);
    if (!this.options.accessibility || canPointerDown) {
      return;
    }
    var prevScrollY = window.pageYOffset;
    this.element.focus();
    // hack to fix scroll jump after focus, #76
    if (window.pageYOffset != prevScrollY) {
      window.scrollTo(window.pageXOffset, prevScrollY);
    }
  };

  var focusNodes = {
    INPUT: true,
    SELECT: true
  };

  function getCanPointerDown(event) {
    var isTouchStart = event.type == 'touchstart';
    var isTouchPointer = event.pointerType == 'touch';
    var isFocusNode = focusNodes[event.target.nodeName];
    return isTouchStart || isTouchPointer || isFocusNode;
  }

  proto.canPreventDefaultOnPointerDown = function (event) {
    // prevent default, unless touchstart or input
    var canPointerDown = getCanPointerDown(event);
    return !canPointerDown;
  };

  // ----- move ----- //

  proto.hasDragStarted = function (moveVector) {
    return Math.abs(moveVector.x) > this.options.dragThreshold;
  };

  // ----- up ----- //

  proto.pointerUp = function (event, pointer) {
    delete this.isTouchScrolling;
    this.viewport.classList.remove('is-pointer-down');
    this.dispatchEvent('pointerUp', event, [pointer]);
    this._dragPointerUp(event, pointer);
  };

  proto.pointerDone = function () {
    window.removeEventListener('scroll', this);
    delete this.pointerDownScroll;
  };

  // -------------------------- dragging -------------------------- //

  proto.dragStart = function (event, pointer) {
    this.dragStartPosition = this.x;
    this.startAnimation();
    window.removeEventListener('scroll', this);
    this.dispatchEvent('dragStart', event, [pointer]);
  };

  proto.pointerMove = function (event, pointer) {
    var moveVector = this._dragPointerMove(event, pointer);
    this.dispatchEvent('pointerMove', event, [pointer, moveVector]);
    this._dragMove(event, pointer, moveVector);
  };

  proto.dragMove = function (event, pointer, moveVector) {
    event.preventDefault();

    this.previousDragX = this.dragX;
    // reverse if right-to-left
    var direction = this.options.rightToLeft ? -1 : 1;
    var dragX = this.dragStartPosition + moveVector.x * direction;

    if (!this.options.wrapAround && this.slides.length) {
      // slow drag
      var originBound = Math.max(-this.slides[0].target, this.dragStartPosition);
      dragX = dragX > originBound ? (dragX + originBound) * 0.5 : dragX;
      var endBound = Math.min(-this.getLastSlide().target, this.dragStartPosition);
      dragX = dragX < endBound ? (dragX + endBound) * 0.5 : dragX;
    }

    this.dragX = dragX;

    this.dragMoveTime = new Date();
    this.dispatchEvent('dragMove', event, [pointer, moveVector]);
  };

  proto.dragEnd = function (event, pointer) {
    if (this.options.freeScroll) {
      this.isFreeScrolling = true;
    }
    // set selectedIndex based on where flick will end up
    var index = this.dragEndRestingSelect();

    if (this.options.freeScroll && !this.options.wrapAround) {
      // if free-scroll & not wrap around
      // do not free-scroll if going outside of bounding slides
      // so bounding slides can attract slider, and keep it in bounds
      var restingX = this.getRestingPosition();
      this.isFreeScrolling = -restingX > this.slides[0].target && -restingX < this.getLastSlide().target;
    } else if (!this.options.freeScroll && index == this.selectedIndex) {
      // boost selection if selected index has not changed
      index += this.dragEndBoostSelect();
    }
    delete this.previousDragX;
    // apply selection
    // TODO refactor this, selecting here feels weird
    // HACK, set flag so dragging stays in correct direction
    this.isDragSelect = this.options.wrapAround;
    this.select(index);
    delete this.isDragSelect;
    this.dispatchEvent('dragEnd', event, [pointer]);
  };

  proto.dragEndRestingSelect = function () {
    var restingX = this.getRestingPosition();
    // how far away from selected slide
    var distance = Math.abs(this.getSlideDistance(-restingX, this.selectedIndex));
    // get closet resting going up and going down
    var positiveResting = this._getClosestResting(restingX, distance, 1);
    var negativeResting = this._getClosestResting(restingX, distance, -1);
    // use closer resting for wrap-around
    var index = positiveResting.distance < negativeResting.distance ? positiveResting.index : negativeResting.index;
    return index;
  };

  /**
   * given resting X and distance to selected cell
   * get the distance and index of the closest cell
   * @param {Number} restingX - estimated post-flick resting position
   * @param {Number} distance - distance to selected cell
   * @param {Integer} increment - +1 or -1, going up or down
   * @returns {Object} - { distance: {Number}, index: {Integer} }
   */
  proto._getClosestResting = function (restingX, distance, increment) {
    var index = this.selectedIndex;
    var minDistance = Infinity;
    var condition = this.options.contain && !this.options.wrapAround ?
    // if contain, keep going if distance is equal to minDistance
    function (d, md) {
      return d <= md;
    } : function (d, md) {
      return d < md;
    };
    while (condition(distance, minDistance)) {
      // measure distance to next cell
      index += increment;
      minDistance = distance;
      distance = this.getSlideDistance(-restingX, index);
      if (distance === null) {
        break;
      }
      distance = Math.abs(distance);
    }
    return {
      distance: minDistance,
      // selected was previous index
      index: index - increment
    };
  };

  /**
   * measure distance between x and a slide target
   * @param {Number} x
   * @param {Integer} index - slide index
   */
  proto.getSlideDistance = function (x, index) {
    var len = this.slides.length;
    // wrap around if at least 2 slides
    var isWrapAround = this.options.wrapAround && len > 1;
    var slideIndex = isWrapAround ? utils.modulo(index, len) : index;
    var slide = this.slides[slideIndex];
    if (!slide) {
      return null;
    }
    // add distance for wrap-around slides
    var wrap = isWrapAround ? this.slideableWidth * Math.floor(index / len) : 0;
    return x - (slide.target + wrap);
  };

  proto.dragEndBoostSelect = function () {
    // do not boost if no previousDragX or dragMoveTime
    if (this.previousDragX === undefined || !this.dragMoveTime ||
    // or if drag was held for 100 ms
    new Date() - this.dragMoveTime > 100) {
      return 0;
    }

    var distance = this.getSlideDistance(-this.dragX, this.selectedIndex);
    var delta = this.previousDragX - this.dragX;
    if (distance > 0 && delta > 0) {
      // boost to next if moving towards the right, and positive velocity
      return 1;
    } else if (distance < 0 && delta < 0) {
      // boost to previous if moving towards the left, and negative velocity
      return -1;
    }
    return 0;
  };

  // ----- staticClick ----- //

  proto.staticClick = function (event, pointer) {
    // get clickedCell, if cell was clicked
    var clickedCell = this.getParentCell(event.target);
    var cellElem = clickedCell && clickedCell.element;
    var cellIndex = clickedCell && this.cells.indexOf(clickedCell);
    this.dispatchEvent('staticClick', event, [pointer, cellElem, cellIndex]);
  };

  // ----- scroll ----- //

  proto.onscroll = function () {
    var scroll = getScrollPosition();
    var scrollMoveX = this.pointerDownScroll.x - scroll.x;
    var scrollMoveY = this.pointerDownScroll.y - scroll.y;
    // cancel click/tap if scroll is too much
    if (Math.abs(scrollMoveX) > 3 || Math.abs(scrollMoveY) > 3) {
      this._pointerDone();
    }
  };

  // ----- utils ----- //

  function getScrollPosition() {
    return {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }

  // -----  ----- //

  return Flickity;
});

/***/ }),

/***/ 103:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Unidragger v2.2.3
 * Draggable base class
 * MIT license
 */

/*jshint browser: true, unused: true, undef: true, strict: true */

(function (window, factory) {
  // universal module definition
  /*jshint strict: false */ /*globals define, module, require */

  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(69)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Unipointer) {
      return factory(window, Unipointer);
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('unipointer'));
  } else {
    // browser global
    window.Unidragger = factory(window, window.Unipointer);
  }
})(window, function factory(window, Unipointer) {

  'use strict';

  // -------------------------- Unidragger -------------------------- //

  function Unidragger() {}

  // inherit Unipointer & EvEmitter
  var proto = Unidragger.prototype = Object.create(Unipointer.prototype);

  // ----- bind start ----- //

  proto.bindHandles = function () {
    this._bindHandles(true);
  };

  proto.unbindHandles = function () {
    this._bindHandles(false);
  };

  /**
   * works as unbinder, as you can .bindHandles( false ) to unbind
   * @param {Boolean} isBind - will unbind if falsey
   */
  proto._bindHandles = function (isBind) {
    // munge isBind, default to true
    isBind = isBind === undefined ? true : !!isBind;
    // bind each handle
    var bindMethod = isBind ? 'addEventListener' : 'removeEventListener';
    for (var i = 0; i < this.handles.length; i++) {
      var handle = this.handles[i];
      this._bindStartEvent(handle, isBind);
      handle[bindMethod]('click', this);
      // touch-action: none to override browser touch gestures
      // metafizzy/flickity#540
      if (window.PointerEvent) {
        handle.style.touchAction = isBind ? this._touchActionValue : '';
      }
    }
  };

  // prototype so it can be overwriteable by Flickity
  proto._touchActionValue = 'none';

  // ----- start event ----- //

  /**
   * pointer start
   * @param {Event} event
   * @param {Event or Touch} pointer
   */
  proto.pointerDown = function (event, pointer) {
    // dismiss range sliders
    if (event.target.nodeName == 'INPUT' && event.target.type == 'range') {
      // reset pointerDown logic
      this.isPointerDown = false;
      delete this.pointerIdentifier;
      return;
    }

    this._dragPointerDown(event, pointer);
    // kludge to blur focused inputs in dragger
    var focused = document.activeElement;
    if (focused && focused.blur) {
      focused.blur();
    }
    // bind move and end events
    this._bindPostStartEvents(event);
    this.emitEvent('pointerDown', [event, pointer]);
  };

  // base pointer down logic
  proto._dragPointerDown = function (event, pointer) {
    // track to see when dragging starts
    this.pointerDownPoint = Unipointer.getPointerPoint(pointer);

    var canPreventDefault = this.canPreventDefaultOnPointerDown(event, pointer);
    if (canPreventDefault) {
      event.preventDefault();
    }
  };

  // overwriteable method so Flickity can prevent for scrolling
  proto.canPreventDefaultOnPointerDown = function (event) {
    // prevent default, unless touchstart or <select>
    return event.target.nodeName != 'SELECT';
  };

  // ----- move event ----- //

  /**
   * drag move
   * @param {Event} event
   * @param {Event or Touch} pointer
   */
  proto.pointerMove = function (event, pointer) {
    var moveVector = this._dragPointerMove(event, pointer);
    this.emitEvent('pointerMove', [event, pointer, moveVector]);
    this._dragMove(event, pointer, moveVector);
  };

  // base pointer move logic
  proto._dragPointerMove = function (event, pointer) {
    var movePoint = Unipointer.getPointerPoint(pointer);
    var moveVector = {
      x: movePoint.x - this.pointerDownPoint.x,
      y: movePoint.y - this.pointerDownPoint.y
    };
    // start drag if pointer has moved far enough to start drag
    if (!this.isDragging && this.hasDragStarted(moveVector)) {
      this._dragStart(event, pointer);
    }
    return moveVector;
  };

  // condition if pointer has moved far enough to start drag
  proto.hasDragStarted = function (moveVector) {
    return Math.abs(moveVector.x) > 3 || Math.abs(moveVector.y) > 3;
  };

  // ----- end event ----- //

  /**
   * pointer up
   * @param {Event} event
   * @param {Event or Touch} pointer
   */
  proto.pointerUp = function (event, pointer) {
    this.emitEvent('pointerUp', [event, pointer]);
    this._dragPointerUp(event, pointer);
  };

  proto._dragPointerUp = function (event, pointer) {
    if (this.isDragging) {
      this._dragEnd(event, pointer);
    } else {
      // pointer didn't move enough for drag to start
      this._staticClick(event, pointer);
    }
  };

  // -------------------------- drag -------------------------- //

  // dragStart
  proto._dragStart = function (event, pointer) {
    this.isDragging = true;
    this.dragStartPoint = Unipointer.getPointerPoint(pointer);
    // prevent clicks
    this.isPreventingClicks = true;

    this.dragStart(event, pointer);
  };

  proto.dragStart = function (event, pointer) {
    this.emitEvent('dragStart', [event, pointer]);
  };

  // dragMove
  proto._dragMove = function (event, pointer, moveVector) {
    // do not drag if not dragging yet
    if (!this.isDragging) {
      return;
    }

    this.dragMove(event, pointer, moveVector);
  };

  proto.dragMove = function (event, pointer, moveVector) {
    event.preventDefault();
    this.emitEvent('dragMove', [event, pointer, moveVector]);
  };

  // dragEnd
  proto._dragEnd = function (event, pointer) {
    // set flags
    this.isDragging = false;
    // re-enable clicking async
    setTimeout(function () {
      delete this.isPreventingClicks;
    }.bind(this));

    this.dragEnd(event, pointer);
  };

  proto.dragEnd = function (event, pointer) {
    this.emitEvent('dragEnd', [event, pointer]);
  };

  // ----- onclick ----- //

  // handle all clicks and prevent clicks when dragging
  proto.onclick = function (event) {
    if (this.isPreventingClicks) {
      event.preventDefault();
    }
  };

  // ----- staticClick ----- //

  // triggered after pointer down & up with no/tiny movement
  proto._staticClick = function (event, pointer) {
    // ignore emulated mouse up clicks
    if (this.isIgnoringMouseUp && event.type == 'mouseup') {
      return;
    }

    // allow click in <input>s and <textarea>s
    var nodeName = event.target.nodeName;
    if (nodeName == 'INPUT' || nodeName == 'TEXTAREA') {
      event.target.focus();
    }
    this.staticClick(event, pointer);

    // set flag for emulated clicks 300ms after touchend
    if (event.type != 'mouseup') {
      this.isIgnoringMouseUp = true;
      // reset flag after 300ms
      setTimeout(function () {
        delete this.isIgnoringMouseUp;
      }.bind(this), 400);
    }
  };

  proto.staticClick = function (event, pointer) {
    this.emitEvent('staticClick', [event, pointer]);
  };

  // ----- utils ----- //

  Unidragger.getPointerPoint = Unipointer.getPointerPoint;

  // -----  ----- //

  return Unidragger;
});

/***/ }),

/***/ 104:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// prev/next buttons
(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(17), __webpack_require__(70), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Flickity, TapListener, utils) {
      return factory(window, Flickity, TapListener, utils);
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('./flickity'), require('tap-listener'), require('fizzy-ui-utils'));
  } else {
    // browser global
    factory(window, window.Flickity, window.TapListener, window.fizzyUIUtils);
  }
})(window, function factory(window, Flickity, TapListener, utils) {
  'use strict';

  var svgURI = 'http://www.w3.org/2000/svg';

  // -------------------------- PrevNextButton -------------------------- //

  function PrevNextButton(direction, parent) {
    this.direction = direction;
    this.parent = parent;
    this._create();
  }

  PrevNextButton.prototype = new TapListener();

  PrevNextButton.prototype._create = function () {
    // properties
    this.isEnabled = true;
    this.isPrevious = this.direction == -1;
    var leftDirection = this.parent.options.rightToLeft ? 1 : -1;
    this.isLeft = this.direction == leftDirection;

    var element = this.element = document.createElement('button');
    element.className = 'flickity-prev-next-button';
    element.className += this.isPrevious ? ' previous' : ' next';
    // prevent button from submitting form http://stackoverflow.com/a/10836076/182183
    element.setAttribute('type', 'button');
    // init as disabled
    this.disable();

    element.setAttribute('aria-label', this.isPrevious ? 'previous' : 'next');

    // create arrow
    var svg = this.createSVG();
    element.appendChild(svg);
    // events
    this.on('tap', this.onTap);
    this.parent.on('select', this.update.bind(this));
    this.on('pointerDown', this.parent.childUIPointerDown.bind(this.parent));
  };

  PrevNextButton.prototype.activate = function () {
    this.bindTap(this.element);
    // click events from keyboard
    this.element.addEventListener('click', this);
    // add to DOM
    this.parent.element.appendChild(this.element);
  };

  PrevNextButton.prototype.deactivate = function () {
    // remove from DOM
    this.parent.element.removeChild(this.element);
    // do regular TapListener destroy
    TapListener.prototype.destroy.call(this);
    // click events from keyboard
    this.element.removeEventListener('click', this);
  };

  PrevNextButton.prototype.createSVG = function () {
    var svg = document.createElementNS(svgURI, 'svg');
    svg.setAttribute('viewBox', '0 0 100 100');
    var path = document.createElementNS(svgURI, 'path');
    var pathMovements = getArrowMovements(this.parent.options.arrowShape);
    path.setAttribute('d', pathMovements);
    path.setAttribute('class', 'arrow');
    // rotate arrow
    if (!this.isLeft) {
      path.setAttribute('transform', 'translate(100, 100) rotate(180) ');
    }
    svg.appendChild(path);
    return svg;
  };

  // get SVG path movmement
  function getArrowMovements(shape) {
    // use shape as movement if string
    if (typeof shape == 'string') {
      return shape;
    }
    // create movement string
    return 'M ' + shape.x0 + ',50' + ' L ' + shape.x1 + ',' + (shape.y1 + 50) + ' L ' + shape.x2 + ',' + (shape.y2 + 50) + ' L ' + shape.x3 + ',50 ' + ' L ' + shape.x2 + ',' + (50 - shape.y2) + ' L ' + shape.x1 + ',' + (50 - shape.y1) + ' Z';
  }

  PrevNextButton.prototype.onTap = function () {
    if (!this.isEnabled) {
      return;
    }
    this.parent.uiChange();
    var method = this.isPrevious ? 'previous' : 'next';
    this.parent[method]();
  };

  PrevNextButton.prototype.handleEvent = utils.handleEvent;

  PrevNextButton.prototype.onclick = function () {
    // only allow clicks from keyboard
    var focused = document.activeElement;
    if (focused && focused == this.element) {
      this.onTap();
    }
  };

  // -----  ----- //

  PrevNextButton.prototype.enable = function () {
    if (this.isEnabled) {
      return;
    }
    this.element.disabled = false;
    this.isEnabled = true;
  };

  PrevNextButton.prototype.disable = function () {
    if (!this.isEnabled) {
      return;
    }
    this.element.disabled = true;
    this.isEnabled = false;
  };

  PrevNextButton.prototype.update = function () {
    // index of first or last slide, if previous or next
    var slides = this.parent.slides;
    // enable is wrapAround and at least 2 slides
    if (this.parent.options.wrapAround && slides.length > 1) {
      this.enable();
      return;
    }
    var lastIndex = slides.length ? slides.length - 1 : 0;
    var boundIndex = this.isPrevious ? 0 : lastIndex;
    var method = this.parent.selectedIndex == boundIndex ? 'disable' : 'enable';
    this[method]();
  };

  PrevNextButton.prototype.destroy = function () {
    this.deactivate();
  };

  // -------------------------- Flickity prototype -------------------------- //

  utils.extend(Flickity.defaults, {
    prevNextButtons: true,
    arrowShape: {
      x0: 10,
      x1: 60, y1: 50,
      x2: 70, y2: 40,
      x3: 30
    }
  });

  Flickity.createMethods.push('_createPrevNextButtons');
  var proto = Flickity.prototype;

  proto._createPrevNextButtons = function () {
    if (!this.options.prevNextButtons) {
      return;
    }

    this.prevButton = new PrevNextButton(-1, this);
    this.nextButton = new PrevNextButton(1, this);

    this.on('activate', this.activatePrevNextButtons);
  };

  proto.activatePrevNextButtons = function () {
    this.prevButton.activate();
    this.nextButton.activate();
    this.on('deactivate', this.deactivatePrevNextButtons);
  };

  proto.deactivatePrevNextButtons = function () {
    this.prevButton.deactivate();
    this.nextButton.deactivate();
    this.off('deactivate', this.deactivatePrevNextButtons);
  };

  // --------------------------  -------------------------- //

  Flickity.PrevNextButton = PrevNextButton;

  return Flickity;
});

/***/ }),

/***/ 105:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// page dots
(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(17), __webpack_require__(70), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Flickity, TapListener, utils) {
      return factory(window, Flickity, TapListener, utils);
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('./flickity'), require('tap-listener'), require('fizzy-ui-utils'));
  } else {
    // browser global
    factory(window, window.Flickity, window.TapListener, window.fizzyUIUtils);
  }
})(window, function factory(window, Flickity, TapListener, utils) {

  // -------------------------- PageDots -------------------------- //

  'use strict';

  function PageDots(parent) {
    this.parent = parent;
    this._create();
  }

  PageDots.prototype = new TapListener();

  PageDots.prototype._create = function () {
    // create holder element
    this.holder = document.createElement('ol');
    this.holder.className = 'flickity-page-dots';
    // create dots, array of elements
    this.dots = [];
    // events
    this.on('tap', this.onTap);
    this.on('pointerDown', this.parent.childUIPointerDown.bind(this.parent));
  };

  PageDots.prototype.activate = function () {
    this.setDots();
    this.bindTap(this.holder);
    // add to DOM
    this.parent.element.appendChild(this.holder);
  };

  PageDots.prototype.deactivate = function () {
    // remove from DOM
    this.parent.element.removeChild(this.holder);
    TapListener.prototype.destroy.call(this);
  };

  PageDots.prototype.setDots = function () {
    // get difference between number of slides and number of dots
    var delta = this.parent.slides.length - this.dots.length;
    if (delta > 0) {
      this.addDots(delta);
    } else if (delta < 0) {
      this.removeDots(-delta);
    }
  };

  PageDots.prototype.addDots = function (count) {
    var fragment = document.createDocumentFragment();
    var newDots = [];
    while (count) {
      var dot = document.createElement('li');
      dot.className = 'dot';
      fragment.appendChild(dot);
      newDots.push(dot);
      count--;
    }
    this.holder.appendChild(fragment);
    this.dots = this.dots.concat(newDots);
  };

  PageDots.prototype.removeDots = function (count) {
    // remove from this.dots collection
    var removeDots = this.dots.splice(this.dots.length - count, count);
    // remove from DOM
    removeDots.forEach(function (dot) {
      this.holder.removeChild(dot);
    }, this);
  };

  PageDots.prototype.updateSelected = function () {
    // remove selected class on previous
    if (this.selectedDot) {
      this.selectedDot.className = 'dot';
    }
    // don't proceed if no dots
    if (!this.dots.length) {
      return;
    }
    this.selectedDot = this.dots[this.parent.selectedIndex];
    this.selectedDot.className = 'dot is-selected';
  };

  PageDots.prototype.onTap = function (event) {
    var target = event.target;
    // only care about dot clicks
    if (target.nodeName != 'LI') {
      return;
    }

    this.parent.uiChange();
    var index = this.dots.indexOf(target);
    this.parent.select(index);
  };

  PageDots.prototype.destroy = function () {
    this.deactivate();
  };

  Flickity.PageDots = PageDots;

  // -------------------------- Flickity -------------------------- //

  utils.extend(Flickity.defaults, {
    pageDots: true
  });

  Flickity.createMethods.push('_createPageDots');

  var proto = Flickity.prototype;

  proto._createPageDots = function () {
    if (!this.options.pageDots) {
      return;
    }
    this.pageDots = new PageDots(this);
    // events
    this.on('activate', this.activatePageDots);
    this.on('select', this.updateSelectedPageDots);
    this.on('cellChange', this.updatePageDots);
    this.on('resize', this.updatePageDots);
    this.on('deactivate', this.deactivatePageDots);
  };

  proto.activatePageDots = function () {
    this.pageDots.activate();
  };

  proto.updateSelectedPageDots = function () {
    this.pageDots.updateSelected();
  };

  proto.updatePageDots = function () {
    this.pageDots.setDots();
  };

  proto.deactivatePageDots = function () {
    this.pageDots.deactivate();
  };

  // -----  ----- //

  Flickity.PageDots = PageDots;

  return Flickity;
});

/***/ }),

/***/ 106:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// player & autoPlay
(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(48), __webpack_require__(16), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = function (EvEmitter, utils, Flickity) {
      return factory(EvEmitter, utils, Flickity);
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(require('ev-emitter'), require('fizzy-ui-utils'), require('./flickity'));
  } else {
    // browser global
    factory(window.EvEmitter, window.fizzyUIUtils, window.Flickity);
  }
})(window, function factory(EvEmitter, utils, Flickity) {

  'use strict';

  // -------------------------- Page Visibility -------------------------- //
  // https://developer.mozilla.org/en-US/docs/Web/Guide/User_experience/Using_the_Page_Visibility_API

  var hiddenProperty, visibilityEvent;
  if ('hidden' in document) {
    hiddenProperty = 'hidden';
    visibilityEvent = 'visibilitychange';
  } else if ('webkitHidden' in document) {
    hiddenProperty = 'webkitHidden';
    visibilityEvent = 'webkitvisibilitychange';
  }

  // -------------------------- Player -------------------------- //

  function Player(parent) {
    this.parent = parent;
    this.state = 'stopped';
    // visibility change event handler
    if (visibilityEvent) {
      this.onVisibilityChange = function () {
        this.visibilityChange();
      }.bind(this);
      this.onVisibilityPlay = function () {
        this.visibilityPlay();
      }.bind(this);
    }
  }

  Player.prototype = Object.create(EvEmitter.prototype);

  // start play
  Player.prototype.play = function () {
    if (this.state == 'playing') {
      return;
    }
    // do not play if page is hidden, start playing when page is visible
    var isPageHidden = document[hiddenProperty];
    if (visibilityEvent && isPageHidden) {
      document.addEventListener(visibilityEvent, this.onVisibilityPlay);
      return;
    }

    this.state = 'playing';
    // listen to visibility change
    if (visibilityEvent) {
      document.addEventListener(visibilityEvent, this.onVisibilityChange);
    }
    // start ticking
    this.tick();
  };

  Player.prototype.tick = function () {
    // do not tick if not playing
    if (this.state != 'playing') {
      return;
    }

    var time = this.parent.options.autoPlay;
    // default to 3 seconds
    time = typeof time == 'number' ? time : 3000;
    var _this = this;
    // HACK: reset ticks if stopped and started within interval
    this.clear();
    this.timeout = setTimeout(function () {
      _this.parent.next(true);
      _this.tick();
    }, time);
  };

  Player.prototype.stop = function () {
    this.state = 'stopped';
    this.clear();
    // remove visibility change event
    if (visibilityEvent) {
      document.removeEventListener(visibilityEvent, this.onVisibilityChange);
    }
  };

  Player.prototype.clear = function () {
    clearTimeout(this.timeout);
  };

  Player.prototype.pause = function () {
    if (this.state == 'playing') {
      this.state = 'paused';
      this.clear();
    }
  };

  Player.prototype.unpause = function () {
    // re-start play if paused
    if (this.state == 'paused') {
      this.play();
    }
  };

  // pause if page visibility is hidden, unpause if visible
  Player.prototype.visibilityChange = function () {
    var isPageHidden = document[hiddenProperty];
    this[isPageHidden ? 'pause' : 'unpause']();
  };

  Player.prototype.visibilityPlay = function () {
    this.play();
    document.removeEventListener(visibilityEvent, this.onVisibilityPlay);
  };

  // -------------------------- Flickity -------------------------- //

  utils.extend(Flickity.defaults, {
    pauseAutoPlayOnHover: true
  });

  Flickity.createMethods.push('_createPlayer');
  var proto = Flickity.prototype;

  proto._createPlayer = function () {
    this.player = new Player(this);

    this.on('activate', this.activatePlayer);
    this.on('uiChange', this.stopPlayer);
    this.on('pointerDown', this.stopPlayer);
    this.on('deactivate', this.deactivatePlayer);
  };

  proto.activatePlayer = function () {
    if (!this.options.autoPlay) {
      return;
    }
    this.player.play();
    this.element.addEventListener('mouseenter', this);
  };

  // Player API, don't hate the ... thanks I know where the door is

  proto.playPlayer = function () {
    this.player.play();
  };

  proto.stopPlayer = function () {
    this.player.stop();
  };

  proto.pausePlayer = function () {
    this.player.pause();
  };

  proto.unpausePlayer = function () {
    this.player.unpause();
  };

  proto.deactivatePlayer = function () {
    this.player.stop();
    this.element.removeEventListener('mouseenter', this);
  };

  // ----- mouseenter/leave ----- //

  // pause auto-play on hover
  proto.onmouseenter = function () {
    if (!this.options.pauseAutoPlayOnHover) {
      return;
    }
    this.player.pause();
    this.element.addEventListener('mouseleave', this);
  };

  // resume auto-play on hover off
  proto.onmouseleave = function () {
    this.player.unpause();
    this.element.removeEventListener('mouseleave', this);
  };

  // -----  ----- //

  Flickity.Player = Player;

  return Flickity;
});

/***/ }),

/***/ 107:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// add, remove cell
(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(17), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Flickity, utils) {
      return factory(window, Flickity, utils);
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('./flickity'), require('fizzy-ui-utils'));
  } else {
    // browser global
    factory(window, window.Flickity, window.fizzyUIUtils);
  }
})(window, function factory(window, Flickity, utils) {

  'use strict';

  // append cells to a document fragment

  function getCellsFragment(cells) {
    var fragment = document.createDocumentFragment();
    cells.forEach(function (cell) {
      fragment.appendChild(cell.element);
    });
    return fragment;
  }

  // -------------------------- add/remove cell prototype -------------------------- //

  var proto = Flickity.prototype;

  /**
   * Insert, prepend, or append cells
   * @param {Element, Array, NodeList} elems
   * @param {Integer} index
   */
  proto.insert = function (elems, index) {
    var cells = this._makeCells(elems);
    if (!cells || !cells.length) {
      return;
    }
    var len = this.cells.length;
    // default to append
    index = index === undefined ? len : index;
    // add cells with document fragment
    var fragment = getCellsFragment(cells);
    // append to slider
    var isAppend = index == len;
    if (isAppend) {
      this.slider.appendChild(fragment);
    } else {
      var insertCellElement = this.cells[index].element;
      this.slider.insertBefore(fragment, insertCellElement);
    }
    // add to this.cells
    if (index === 0) {
      // prepend, add to start
      this.cells = cells.concat(this.cells);
    } else if (isAppend) {
      // append, add to end
      this.cells = this.cells.concat(cells);
    } else {
      // insert in this.cells
      var endCells = this.cells.splice(index, len - index);
      this.cells = this.cells.concat(cells).concat(endCells);
    }

    this._sizeCells(cells);

    var selectedIndexDelta = index > this.selectedIndex ? 0 : cells.length;
    this._cellAddedRemoved(index, selectedIndexDelta);
  };

  proto.append = function (elems) {
    this.insert(elems, this.cells.length);
  };

  proto.prepend = function (elems) {
    this.insert(elems, 0);
  };

  /**
   * Remove cells
   * @param {Element, Array, NodeList} elems
   */
  proto.remove = function (elems) {
    var cells = this.getCells(elems);
    var selectedIndexDelta = 0;
    var len = cells.length;
    var i, cell;
    // calculate selectedIndexDelta, easier if done in seperate loop
    for (i = 0; i < len; i++) {
      cell = cells[i];
      var wasBefore = this.cells.indexOf(cell) < this.selectedIndex;
      selectedIndexDelta -= wasBefore ? 1 : 0;
    }

    for (i = 0; i < len; i++) {
      cell = cells[i];
      cell.remove();
      // remove item from collection
      utils.removeFrom(this.cells, cell);
    }

    if (cells.length) {
      // update stuff
      this._cellAddedRemoved(0, selectedIndexDelta);
    }
  };

  // updates when cells are added or removed
  proto._cellAddedRemoved = function (changedCellIndex, selectedIndexDelta) {
    // TODO this math isn't perfect with grouped slides
    selectedIndexDelta = selectedIndexDelta || 0;
    this.selectedIndex += selectedIndexDelta;
    this.selectedIndex = Math.max(0, Math.min(this.slides.length - 1, this.selectedIndex));

    this.cellChange(changedCellIndex, true);
    // backwards compatibility
    this.emitEvent('cellAddedRemoved', [changedCellIndex, selectedIndexDelta]);
  };

  /**
   * logic to be run after a cell's size changes
   * @param {Element} elem - cell's element
   */
  proto.cellSizeChange = function (elem) {
    var cell = this.getCell(elem);
    if (!cell) {
      return;
    }
    cell.getSize();

    var index = this.cells.indexOf(cell);
    this.cellChange(index);
  };

  /**
   * logic any time a cell is changed: added, removed, or size changed
   * @param {Integer} changedCellIndex - index of the changed cell, optional
   */
  proto.cellChange = function (changedCellIndex, isPositioningSlider) {
    var prevSlideableWidth = this.slideableWidth;
    this._positionCells(changedCellIndex);
    this._getWrapShiftCells();
    this.setGallerySize();
    this.emitEvent('cellChange', [changedCellIndex]);
    // position slider
    if (this.options.freeScroll) {
      // shift x by change in slideableWidth
      // TODO fix position shifts when prepending w/ freeScroll
      var deltaX = prevSlideableWidth - this.slideableWidth;
      this.x += deltaX * this.cellAlign;
      this.positionSlider();
    } else {
      // do not position slider after lazy load
      if (isPositioningSlider) {
        this.positionSliderAtSelected();
      }
      this.select(this.selectedIndex);
    }
  };

  // -----  ----- //

  return Flickity;
});

/***/ }),

/***/ 108:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// lazyload
(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(17), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Flickity, utils) {
      return factory(window, Flickity, utils);
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('./flickity'), require('fizzy-ui-utils'));
  } else {
    // browser global
    factory(window, window.Flickity, window.fizzyUIUtils);
  }
})(window, function factory(window, Flickity, utils) {
  'use strict';

  Flickity.createMethods.push('_createLazyload');
  var proto = Flickity.prototype;

  proto._createLazyload = function () {
    this.on('select', this.lazyLoad);
  };

  proto.lazyLoad = function () {
    var lazyLoad = this.options.lazyLoad;
    if (!lazyLoad) {
      return;
    }
    // get adjacent cells, use lazyLoad option for adjacent count
    var adjCount = typeof lazyLoad == 'number' ? lazyLoad : 0;
    var cellElems = this.getAdjacentCellElements(adjCount);
    // get lazy images in those cells
    var lazyImages = [];
    cellElems.forEach(function (cellElem) {
      var lazyCellImages = getCellLazyImages(cellElem);
      lazyImages = lazyImages.concat(lazyCellImages);
    });
    // load lazy images
    lazyImages.forEach(function (img) {
      new LazyLoader(img, this);
    }, this);
  };

  function getCellLazyImages(cellElem) {
    // check if cell element is lazy image
    if (cellElem.nodeName == 'IMG' && cellElem.getAttribute('data-flickity-lazyload')) {
      return [cellElem];
    }
    // select lazy images in cell
    var imgs = cellElem.querySelectorAll('img[data-flickity-lazyload]');
    return utils.makeArray(imgs);
  }

  // -------------------------- LazyLoader -------------------------- //

  /**
   * class to handle loading images
   */
  function LazyLoader(img, flickity) {
    this.img = img;
    this.flickity = flickity;
    this.load();
  }

  LazyLoader.prototype.handleEvent = utils.handleEvent;

  LazyLoader.prototype.load = function () {
    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    // load image
    this.img.src = this.img.getAttribute('data-flickity-lazyload');
    // remove attr
    this.img.removeAttribute('data-flickity-lazyload');
  };

  LazyLoader.prototype.onload = function (event) {
    this.complete(event, 'flickity-lazyloaded');
  };

  LazyLoader.prototype.onerror = function (event) {
    this.complete(event, 'flickity-lazyerror');
  };

  LazyLoader.prototype.complete = function (event, className) {
    // unbind events
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);

    var cell = this.flickity.getParentCell(this.img);
    var cellElem = cell && cell.element;
    this.flickity.cellSizeChange(cellElem);

    this.img.classList.add(className);
    this.flickity.dispatchEvent('lazyLoad', event, cellElem);
  };

  // -----  ----- //

  Flickity.LazyLoader = LazyLoader;

  return Flickity;
});

/***/ }),

/***/ 109:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (e, t) {
  "object" == ( false ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : e.VeeValidate = t();
}(undefined, function () {
  "use strict";
  function e(e, o) {
    if (arguments.length < 1) throw new TypeError("1 argument required, but only " + arguments.length + " present");if (null === e) return new Date(NaN);var s = o || {},
        u = void 0 === s.additionalDigits ? W : Number(s.additionalDigits);if (2 !== u && 1 !== u && 0 !== u) throw new RangeError("additionalDigits must be 0, 1 or 2");if (e instanceof Date) return new Date(e.getTime());if ("string" != typeof e) return new Date(e);var l = t(e),
        c = r(l.date, u),
        f = c.year,
        d = n(c.restDateString, f);if (d) {
      var h,
          m = d.getTime(),
          p = 0;return l.time && (p = i(l.time)), l.timezone ? h = a(l.timezone) : (h = new Date(m + p).getTimezoneOffset(), h = new Date(m + p + h * q).getTimezoneOffset()), new Date(m + p + h * q);
    }return new Date(e);
  }function t(e) {
    var t,
        r = {},
        n = e.split(R.dateTimeDelimeter);if (R.plainTime.test(n[0]) ? (r.date = null, t = n[0]) : (r.date = n[0], t = n[1]), t) {
      var i = R.timezone.exec(t);i ? (r.time = t.replace(i[1], ""), r.timezone = i[1]) : r.time = t;
    }return r;
  }function r(e, t) {
    var r,
        n = R.YYY[t],
        i = R.YYYYY[t];if (r = R.YYYY.exec(e) || i.exec(e)) {
      var a = r[1];return { year: parseInt(a, 10), restDateString: e.slice(a.length) };
    }if (r = R.YY.exec(e) || n.exec(e)) {
      var o = r[1];return { year: 100 * parseInt(o, 10), restDateString: e.slice(o.length) };
    }return { year: null };
  }function n(e, t) {
    if (null === t) return null;var r, n, i, a;if (0 === e.length) return (n = new Date(0)).setUTCFullYear(t), n;if (r = R.MM.exec(e)) return n = new Date(0), i = parseInt(r[1], 10) - 1, n.setUTCFullYear(t, i), n;if (r = R.DDD.exec(e)) {
      n = new Date(0);var s = parseInt(r[1], 10);return n.setUTCFullYear(t, 0, s), n;
    }if (r = R.MMDD.exec(e)) {
      n = new Date(0), i = parseInt(r[1], 10) - 1;var u = parseInt(r[2], 10);return n.setUTCFullYear(t, i, u), n;
    }return (r = R.Www.exec(e)) ? (a = parseInt(r[1], 10) - 1, o(t, a)) : (r = R.WwwD.exec(e)) ? o(t, a = parseInt(r[1], 10) - 1, parseInt(r[2], 10) - 1) : null;
  }function i(e) {
    var t, r, n;if (t = R.HH.exec(e)) return (r = parseFloat(t[1].replace(",", "."))) % 24 * z;if (t = R.HHMM.exec(e)) return r = parseInt(t[1], 10), n = parseFloat(t[2].replace(",", ".")), r % 24 * z + n * q;if (t = R.HHMMSS.exec(e)) {
      r = parseInt(t[1], 10), n = parseInt(t[2], 10);var i = parseFloat(t[3].replace(",", "."));return r % 24 * z + n * q + 1e3 * i;
    }return null;
  }function a(e) {
    var t, r;return (t = R.timezoneZ.exec(e)) ? 0 : (t = R.timezoneHH.exec(e)) ? (r = 60 * parseInt(t[2], 10), "+" === t[1] ? -r : r) : (t = R.timezoneHHMM.exec(e)) ? (r = 60 * parseInt(t[2], 10) + parseInt(t[3], 10), "+" === t[1] ? -r : r) : 0;
  }function o(e, t, r) {
    t = t || 0, r = r || 0;var n = new Date(0);n.setUTCFullYear(e, 0, 4);var i = 7 * t + r + 1 - (n.getUTCDay() || 7);return n.setUTCDate(n.getUTCDate() + i), n;
  }function s(t, r, n) {
    if (arguments.length < 2) throw new TypeError("2 arguments required, but only " + arguments.length + " present");var i = e(t, n).getTime(),
        a = Number(r);return new Date(i + a);
  }function u(e) {
    e = e || {};var t = {};for (var r in e) {
      e.hasOwnProperty(r) && (t[r] = e[r]);
    }return t;
  }function l(e, t, r) {
    if (arguments.length < 2) throw new TypeError("2 arguments required, but only " + arguments.length + " present");return s(e, Number(t) * V, r);
  }function c(t, r) {
    if (arguments.length < 1) throw new TypeError("1 argument required, but only " + arguments.length + " present");var n = e(t, r);return !isNaN(n);
  }function f(e) {
    return e.replace(P, function (e) {
      return e.slice(1);
    });
  }function d(e, t, r) {
    return function (n, i) {
      var a = i || {},
          o = a.type ? String(a.type) : t;return (e[o] || e[t])[r ? r(Number(n)) : Number(n)];
    };
  }function h(e, t) {
    return function (r) {
      var n = r || {},
          i = n.type ? String(n.type) : t;return e[i] || e[t];
    };
  }function m(e, t) {
    return function (r, n) {
      var i = n || {},
          a = i.type ? String(i.type) : t,
          o = e[a] || e[t];return String(r).match(o);
    };
  }function p(e, t) {
    return function (r, n) {
      var i = n || {},
          a = i.type ? String(i.type) : t,
          o = e[a] || e[t],
          s = r[1];return o.findIndex(function (e) {
        return e.test(s);
      });
    };
  }function v(t, r) {
    var n = e(t, r),
        i = n.getTime();n.setUTCMonth(0, 1), n.setUTCHours(0, 0, 0, 0);var a = i - n.getTime();return Math.floor(a / ae) + 1;
  }function g(t, r) {
    var n = e(t, r),
        i = n.getUTCDay(),
        a = (i < 1 ? 7 : 0) + i - 1;return n.setUTCDate(n.getUTCDate() - a), n.setUTCHours(0, 0, 0, 0), n;
  }function y(t, r) {
    var n = e(t, r),
        i = n.getUTCFullYear(),
        a = new Date(0);a.setUTCFullYear(i + 1, 0, 4), a.setUTCHours(0, 0, 0, 0);var o = g(a, r),
        s = new Date(0);s.setUTCFullYear(i, 0, 4), s.setUTCHours(0, 0, 0, 0);var u = g(s, r);return n.getTime() >= o.getTime() ? i + 1 : n.getTime() >= u.getTime() ? i : i - 1;
  }function b(e, t) {
    var r = y(e, t),
        n = new Date(0);return n.setUTCFullYear(r, 0, 4), n.setUTCHours(0, 0, 0, 0), g(n, t);
  }function D(t, r) {
    var n = e(t, r),
        i = g(n, r).getTime() - b(n, r).getTime();return Math.round(i / oe) + 1;
  }function w(e, t) {
    t = t || "";var r = e > 0 ? "-" : "+",
        n = Math.abs(e),
        i = n % 60;return r + $(Math.floor(n / 60), 2) + t + $(i, 2);
  }function $(e, t) {
    for (var r = Math.abs(e).toString(); r.length < t;) {
      r = "0" + r;
    }return r;
  }function T(t, r, n) {
    var i = e(t, n),
        a = Number(r);return i.setUTCMinutes(i.getUTCMinutes() + a), i;
  }function _(t, r, n) {
    if (arguments.length < 2) throw new TypeError("2 arguments required, but only " + arguments.length + " present");var i = String(r),
        a = n || {},
        o = a.locale || ie;if (!o.localize) throw new RangeError("locale must contain localize property");if (!o.formatLong) throw new RangeError("locale must contain formatLong property");var s = o.formatters || {},
        l = o.formattingTokensRegExp || le,
        f = o.formatLong,
        d = e(t, a);if (!c(d, a)) return "Invalid Date";var h = T(d, -d.getTimezoneOffset(), a),
        m = u(a);return m.locale = o, m.formatters = se, m._originalDate = d, i.replace(ue, function (e) {
      return "[" === e[0] ? e : "\\" === e[0] ? M(e) : f(e);
    }).replace(l, function (e) {
      var t = s[e] || se[e];return t ? t(h, m) : M(e);
    });
  }function M(e) {
    return e.match(/\[[\s\S]/) ? e.replace(/^\[|]$/g, "") : e.replace(/\\/g, "");
  }function x(e, t, r) {
    if (arguments.length < 2) throw new TypeError("2 arguments required, but only " + arguments.length + " present");return l(e, -Number(t), r);
  }function A(t, r, n) {
    if (arguments.length < 2) throw new TypeError("2 arguments required, but only " + arguments.length + " present");var i = e(t, n),
        a = e(r, n);return i.getTime() > a.getTime();
  }function O(t, r, n) {
    if (arguments.length < 2) throw new TypeError("2 arguments required, but only " + arguments.length + " present");var i = e(t, n),
        a = e(r, n);return i.getTime() < a.getTime();
  }function L(t, r, n) {
    if (arguments.length < 2) throw new TypeError("2 arguments required, but only " + arguments.length + " present");var i = e(t, n),
        a = e(r, n);return i.getTime() === a.getTime();
  }function F(e) {
    return parseInt(e[1], 10);
  }function C(t, r, n) {
    var i = n || {},
        a = i.locale,
        o = a && a.options && a.options.weekStartsOn,
        s = void 0 === o ? 0 : Number(o),
        u = void 0 === i.weekStartsOn ? s : Number(i.weekStartsOn);if (!(u >= 0 && u <= 6)) throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l = e(t, n),
        c = Number(r),
        f = l.getUTCDay(),
        d = ((c % 7 + 7) % 7 < u ? 7 : 0) + c - f;return l.setUTCDate(l.getUTCDate() + d), l;
  }function S(t, r, n) {
    var i = Number(r);i % 7 == 0 && (i -= 7);var a = e(t, n),
        o = a.getUTCDay(),
        s = ((i % 7 + 7) % 7 < 1 ? 7 : 0) + i - o;return a.setUTCDate(a.getUTCDate() + s), a;
  }function Y(t, r, n) {
    var i = e(t, n),
        a = Number(r),
        o = D(i, n) - a;return i.setUTCDate(i.getUTCDate() - 7 * o), i;
  }function N(t, r, n) {
    var i = e(t, n),
        a = Number(r),
        o = b(i, n),
        s = Math.floor((i.getTime() - o.getTime()) / de),
        u = new Date(0);return u.setUTCFullYear(a, 0, 4), u.setUTCHours(0, 0, 0, 0), (i = b(u, n)).setUTCDate(i.getUTCDate() + s), i;
  }function E(e, t) {
    if (0 === t) {
      if (12 === e) return 0;
    } else if (12 !== e) return 12 + e;return e;
  }function k(t, r, n, i) {
    if (arguments.length < 3) throw new TypeError("3 arguments required, but only " + arguments.length + " present");var a = String(t),
        o = i || {},
        s = void 0 === o.weekStartsOn ? 0 : Number(o.weekStartsOn);if (!(s >= 0 && s <= 6)) throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l = o.locale || ie,
        c = l.parsers || {},
        f = l.units || {};if (!l.match) throw new RangeError("locale must contain match property");if (!l.formatLong) throw new RangeError("locale must contain formatLong property");var d = String(r).replace(ve, function (e) {
      return "[" === e[0] ? e : "\\" === e[0] ? j(e) : l.formatLong(e);
    });if ("" === d) return "" === a ? e(n, o) : new Date(NaN);var h = u(o);h.locale = l;var m,
        p = d.match(l.parsingTokensRegExp || ge),
        v = p.length,
        g = [{ priority: me, set: U, index: 0 }];for (m = 0; m < v; m++) {
      var y = p[m],
          b = c[y] || fe[y];if (b) {
        var D;if (!(D = b.match instanceof RegExp ? b.match.exec(a) : b.match(a, h))) return new Date(NaN);var w = b.unit,
            $ = f[w] || he[w];g.push({ priority: $.priority, set: $.set, value: b.parse(D, h), index: g.length });var T = D[0];a = a.slice(T.length);
      } else {
        var _ = p[m].match(/^\[.*]$/) ? p[m].replace(/^\[|]$/g, "") : p[m];if (0 !== a.indexOf(_)) return new Date(NaN);a = a.slice(_.length);
      }
    }var M = g.map(function (e) {
      return e.priority;
    }).sort(function (e, t) {
      return e - t;
    }).filter(function (e, t, r) {
      return r.indexOf(e) === t;
    }).map(function (e) {
      return g.filter(function (t) {
        return t.priority === e;
      }).reverse();
    }).map(function (e) {
      return e[0];
    }),
        A = e(n, o);if (isNaN(A)) return new Date(NaN);var O = { date: x(A, A.getTimezoneOffset()) },
        L = M.length;for (m = 0; m < L; m++) {
      var F = M[m];O = F.set(O, F.value, h);
    }return O.date;
  }function U(e) {
    var t = e.date,
        r = t.getTime(),
        n = t.getTimezoneOffset();return n = new Date(r + n * pe).getTimezoneOffset(), e.date = new Date(r + n * pe), e;
  }function j(e) {
    return e.match(/\[[\s\S]/) ? e.replace(/^\[|]$/g, "") : e.replace(/\\/g, "");
  }function Z(e) {
    return e && e.__esModule ? e.default : e;
  }function H(e, t) {
    return t = { exports: {} }, e(t, t.exports), t.exports;
  }var z = 36e5,
      q = 6e4,
      W = 2,
      R = { dateTimeDelimeter: /[T ]/, plainTime: /:/, YY: /^(\d{2})$/, YYY: [/^([+-]\d{2})$/, /^([+-]\d{3})$/, /^([+-]\d{4})$/], YYYY: /^(\d{4})/, YYYYY: [/^([+-]\d{4})/, /^([+-]\d{5})/, /^([+-]\d{6})/], MM: /^-(\d{2})$/, DDD: /^-?(\d{3})$/, MMDD: /^-?(\d{2})-?(\d{2})$/, Www: /^-?W(\d{2})$/, WwwD: /^-?W(\d{2})-?(\d{1})$/, HH: /^(\d{2}([.,]\d*)?)$/, HHMM: /^(\d{2}):?(\d{2}([.,]\d*)?)$/, HHMMSS: /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/, timezone: /([Z+-].*)$/, timezoneZ: /^(Z)$/, timezoneHH: /^([+-])(\d{2})$/, timezoneHHMM: /^([+-])(\d{2}):?(\d{2})$/ },
      V = 6e4,
      I = { lessThanXSeconds: { one: "less than a second", other: "less than {{count}} seconds" }, xSeconds: { one: "1 second", other: "{{count}} seconds" }, halfAMinute: "half a minute", lessThanXMinutes: { one: "less than a minute", other: "less than {{count}} minutes" }, xMinutes: { one: "1 minute", other: "{{count}} minutes" }, aboutXHours: { one: "about 1 hour", other: "about {{count}} hours" }, xHours: { one: "1 hour", other: "{{count}} hours" }, xDays: { one: "1 day", other: "{{count}} days" }, aboutXMonths: { one: "about 1 month", other: "about {{count}} months" }, xMonths: { one: "1 month", other: "{{count}} months" }, aboutXYears: { one: "about 1 year", other: "about {{count}} years" }, xYears: { one: "1 year", other: "{{count}} years" }, overXYears: { one: "over 1 year", other: "over {{count}} years" }, almostXYears: { one: "almost 1 year", other: "almost {{count}} years" } },
      P = /MMMM|MM|DD|dddd/g,
      G = { lastWeek: "[last] dddd [at] LT", yesterday: "[yesterday at] LT", today: "[today at] LT", tomorrow: "[tomorrow at] LT", nextWeek: "dddd [at] LT", other: "L" },
      B = { narrow: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], short: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], long: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"] },
      X = { short: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], long: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] },
      Q = { uppercase: ["AM", "PM"], lowercase: ["am", "pm"], long: ["a.m.", "p.m."] },
      J = { narrow: /^(su|mo|tu|we|th|fr|sa)/i, short: /^(sun|mon|tue|wed|thu|fri|sat)/i, long: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i },
      K = { any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i] },
      ee = { short: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i, long: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i },
      te = { any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i] },
      re = { short: /^(am|pm)/i, long: /^([ap]\.?\s?m\.?)/i },
      ne = { any: [/^a/i, /^p/i] },
      ie = { formatDistance: function formatDistance(e, t, r) {
      r = r || {};var n;return n = "string" == typeof I[e] ? I[e] : 1 === t ? I[e].one : I[e].other.replace("{{count}}", t), r.addSuffix ? r.comparison > 0 ? "in " + n : n + " ago" : n;
    }, formatLong: function (e) {
      var t = { LTS: e.LTS, LT: e.LT, L: e.L, LL: e.LL, LLL: e.LLL, LLLL: e.LLLL, l: e.l || f(e.L), ll: e.ll || f(e.LL), lll: e.lll || f(e.LLL), llll: e.llll || f(e.LLLL) };return function (e) {
        return t[e];
      };
    }({ LT: "h:mm aa", LTS: "h:mm:ss aa", L: "MM/DD/YYYY", LL: "MMMM D YYYY", LLL: "MMMM D YYYY h:mm aa", LLLL: "dddd, MMMM D YYYY h:mm aa" }), formatRelative: function formatRelative(e, t, r, n) {
      return G[e];
    }, localize: { ordinalNumber: function ordinalNumber(e, t) {
        var r = Number(e),
            n = r % 100;if (n > 20 || n < 10) switch (n % 10) {case 1:
            return r + "st";case 2:
            return r + "nd";case 3:
            return r + "rd";}return r + "th";
      }, weekday: d(B, "long"), weekdays: h(B, "long"), month: d(X, "long"), months: h(X, "long"), timeOfDay: d(Q, "long", function (e) {
        return e / 12 >= 1 ? 1 : 0;
      }), timesOfDay: h(Q, "long") }, match: { ordinalNumbers: function (e) {
        return function (t) {
          return String(t).match(e);
        };
      }(/^(\d+)(th|st|nd|rd)?/i), ordinalNumber: function ordinalNumber(e) {
        return parseInt(e[1], 10);
      }, weekdays: m(J, "long"), weekday: p(K, "any"), months: m(ee, "long"), month: p(te, "any"), timesOfDay: m(re, "long"), timeOfDay: p(ne, "any") }, options: { weekStartsOn: 0, firstWeekContainsDate: 1 } },
      ae = 864e5,
      oe = 6048e5,
      se = { M: function M(e) {
      return e.getUTCMonth() + 1;
    }, Mo: function Mo(e, t) {
      var r = e.getUTCMonth() + 1;return t.locale.localize.ordinalNumber(r, { unit: "month" });
    }, MM: function MM(e) {
      return $(e.getUTCMonth() + 1, 2);
    }, MMM: function MMM(e, t) {
      return t.locale.localize.month(e.getUTCMonth(), { type: "short" });
    }, MMMM: function MMMM(e, t) {
      return t.locale.localize.month(e.getUTCMonth(), { type: "long" });
    }, Q: function Q(e) {
      return Math.ceil((e.getUTCMonth() + 1) / 3);
    }, Qo: function Qo(e, t) {
      var r = Math.ceil((e.getUTCMonth() + 1) / 3);return t.locale.localize.ordinalNumber(r, { unit: "quarter" });
    }, D: function D(e) {
      return e.getUTCDate();
    }, Do: function Do(e, t) {
      return t.locale.localize.ordinalNumber(e.getUTCDate(), { unit: "dayOfMonth" });
    }, DD: function DD(e) {
      return $(e.getUTCDate(), 2);
    }, DDD: function DDD(e) {
      return v(e);
    }, DDDo: function DDDo(e, t) {
      return t.locale.localize.ordinalNumber(v(e), { unit: "dayOfYear" });
    }, DDDD: function DDDD(e) {
      return $(v(e), 3);
    }, dd: function dd(e, t) {
      return t.locale.localize.weekday(e.getUTCDay(), { type: "narrow" });
    }, ddd: function ddd(e, t) {
      return t.locale.localize.weekday(e.getUTCDay(), { type: "short" });
    }, dddd: function dddd(e, t) {
      return t.locale.localize.weekday(e.getUTCDay(), { type: "long" });
    }, d: function d(e) {
      return e.getUTCDay();
    }, do: function _do(e, t) {
      return t.locale.localize.ordinalNumber(e.getUTCDay(), { unit: "dayOfWeek" });
    }, E: function E(e) {
      return e.getUTCDay() || 7;
    }, W: function W(e) {
      return D(e);
    }, Wo: function Wo(e, t) {
      return t.locale.localize.ordinalNumber(D(e), { unit: "isoWeek" });
    }, WW: function WW(e) {
      return $(D(e), 2);
    }, YY: function YY(e) {
      return $(e.getUTCFullYear(), 4).substr(2);
    }, YYYY: function YYYY(e) {
      return $(e.getUTCFullYear(), 4);
    }, GG: function GG(e) {
      return String(y(e)).substr(2);
    }, GGGG: function GGGG(e) {
      return y(e);
    }, H: function H(e) {
      return e.getUTCHours();
    }, HH: function HH(e) {
      return $(e.getUTCHours(), 2);
    }, h: function h(e) {
      var t = e.getUTCHours();return 0 === t ? 12 : t > 12 ? t % 12 : t;
    }, hh: function hh(e) {
      return $(se.h(e), 2);
    }, m: function m(e) {
      return e.getUTCMinutes();
    }, mm: function mm(e) {
      return $(e.getUTCMinutes(), 2);
    }, s: function s(e) {
      return e.getUTCSeconds();
    }, ss: function ss(e) {
      return $(e.getUTCSeconds(), 2);
    }, S: function S(e) {
      return Math.floor(e.getUTCMilliseconds() / 100);
    }, SS: function SS(e) {
      return $(Math.floor(e.getUTCMilliseconds() / 10), 2);
    }, SSS: function SSS(e) {
      return $(e.getUTCMilliseconds(), 3);
    }, Z: function Z(e, t) {
      return w((t._originalDate || e).getTimezoneOffset(), ":");
    }, ZZ: function ZZ(e, t) {
      return w((t._originalDate || e).getTimezoneOffset());
    }, X: function X(e, t) {
      var r = t._originalDate || e;return Math.floor(r.getTime() / 1e3);
    }, x: function x(e, t) {
      return (t._originalDate || e).getTime();
    }, A: function A(e, t) {
      return t.locale.localize.timeOfDay(e.getUTCHours(), { type: "uppercase" });
    }, a: function a(e, t) {
      return t.locale.localize.timeOfDay(e.getUTCHours(), { type: "lowercase" });
    }, aa: function aa(e, t) {
      return t.locale.localize.timeOfDay(e.getUTCHours(), { type: "long" });
    } },
      ue = /(\[[^[]*])|(\\)?(LTS|LT|LLLL|LLL|LL|L|llll|lll|ll|l)/g,
      le = /(\[[^[]*])|(\\)?(x|ss|s|mm|m|hh|h|do|dddd|ddd|dd|d|aa|a|ZZ|Z|YYYY|YY|X|Wo|WW|W|SSS|SS|S|Qo|Q|Mo|MMMM|MMM|MM|M|HH|H|GGGG|GG|E|Do|DDDo|DDDD|DDD|DD|D|A|.)/g,
      ce = { M: /^(1[0-2]|0?\d)/, D: /^(3[0-1]|[0-2]?\d)/, DDD: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/, W: /^(5[0-3]|[0-4]?\d)/, YYYY: /^(\d{1,4})/, H: /^(2[0-3]|[0-1]?\d)/, m: /^([0-5]?\d)/, Z: /^([+-])(\d{2}):(\d{2})/, ZZ: /^([+-])(\d{2})(\d{2})/, singleDigit: /^(\d)/, twoDigits: /^(\d{2})/, threeDigits: /^(\d{3})/, fourDigits: /^(\d{4})/, anyDigits: /^(\d+)/ },
      fe = { YY: { unit: "twoDigitYear", match: ce.twoDigits, parse: function parse(e) {
        return F(e);
      } }, YYYY: { unit: "year", match: ce.YYYY, parse: F }, GG: { unit: "isoYear", match: ce.twoDigits, parse: function parse(e) {
        return F(e) + 1900;
      } }, GGGG: { unit: "isoYear", match: ce.YYYY, parse: F }, Q: { unit: "quarter", match: ce.singleDigit, parse: F }, Qo: { unit: "quarter", match: function match(e, t) {
        return t.locale.match.ordinalNumbers(e, { unit: "quarter" });
      }, parse: function parse(e, t) {
        return t.locale.match.ordinalNumber(e, { unit: "quarter" });
      } }, M: { unit: "month", match: ce.M, parse: function parse(e) {
        return F(e) - 1;
      } }, Mo: { unit: "month", match: function match(e, t) {
        return t.locale.match.ordinalNumbers(e, { unit: "month" });
      }, parse: function parse(e, t) {
        return t.locale.match.ordinalNumber(e, { unit: "month" }) - 1;
      } }, MM: { unit: "month", match: ce.twoDigits, parse: function parse(e) {
        return F(e) - 1;
      } }, MMM: { unit: "month", match: function match(e, t) {
        return t.locale.match.months(e, { type: "short" });
      }, parse: function parse(e, t) {
        return t.locale.match.month(e, { type: "short" });
      } }, MMMM: { unit: "month", match: function match(e, t) {
        return t.locale.match.months(e, { type: "long" }) || t.locale.match.months(e, { type: "short" });
      }, parse: function parse(e, t) {
        var r = t.locale.match.month(e, { type: "long" });return null == r && (r = t.locale.match.month(e, { type: "short" })), r;
      } }, W: { unit: "isoWeek", match: ce.W, parse: F }, Wo: { unit: "isoWeek", match: function match(e, t) {
        return t.locale.match.ordinalNumbers(e, { unit: "isoWeek" });
      }, parse: function parse(e, t) {
        return t.locale.match.ordinalNumber(e, { unit: "isoWeek" });
      } }, WW: { unit: "isoWeek", match: ce.twoDigits, parse: F }, d: { unit: "dayOfWeek", match: ce.singleDigit, parse: F }, do: { unit: "dayOfWeek", match: function match(e, t) {
        return t.locale.match.ordinalNumbers(e, { unit: "dayOfWeek" });
      }, parse: function parse(e, t) {
        return t.locale.match.ordinalNumber(e, { unit: "dayOfWeek" });
      } }, dd: { unit: "dayOfWeek", match: function match(e, t) {
        return t.locale.match.weekdays(e, { type: "narrow" });
      }, parse: function parse(e, t) {
        return t.locale.match.weekday(e, { type: "narrow" });
      } }, ddd: { unit: "dayOfWeek", match: function match(e, t) {
        return t.locale.match.weekdays(e, { type: "short" }) || t.locale.match.weekdays(e, { type: "narrow" });
      }, parse: function parse(e, t) {
        var r = t.locale.match.weekday(e, { type: "short" });return null == r && (r = t.locale.match.weekday(e, { type: "narrow" })), r;
      } }, dddd: { unit: "dayOfWeek", match: function match(e, t) {
        return t.locale.match.weekdays(e, { type: "long" }) || t.locale.match.weekdays(e, { type: "short" }) || t.locale.match.weekdays(e, { type: "narrow" });
      }, parse: function parse(e, t) {
        var r = t.locale.match.weekday(e, { type: "long" });return null == r && null == (r = t.locale.match.weekday(e, { type: "short" })) && (r = t.locale.match.weekday(e, { type: "narrow" })), r;
      } }, E: { unit: "dayOfISOWeek", match: ce.singleDigit, parse: function parse(e) {
        return F(e);
      } }, D: { unit: "dayOfMonth", match: ce.D, parse: F }, Do: { unit: "dayOfMonth", match: function match(e, t) {
        return t.locale.match.ordinalNumbers(e, { unit: "dayOfMonth" });
      }, parse: function parse(e, t) {
        return t.locale.match.ordinalNumber(e, { unit: "dayOfMonth" });
      } }, DD: { unit: "dayOfMonth", match: ce.twoDigits, parse: F }, DDD: { unit: "dayOfYear", match: ce.DDD, parse: F }, DDDo: { unit: "dayOfYear", match: function match(e, t) {
        return t.locale.match.ordinalNumbers(e, { unit: "dayOfYear" });
      }, parse: function parse(e, t) {
        return t.locale.match.ordinalNumber(e, { unit: "dayOfYear" });
      } }, DDDD: { unit: "dayOfYear", match: ce.threeDigits, parse: F }, A: { unit: "timeOfDay", match: function match(e, t) {
        return t.locale.match.timesOfDay(e, { type: "short" });
      }, parse: function parse(e, t) {
        return t.locale.match.timeOfDay(e, { type: "short" });
      } }, aa: { unit: "timeOfDay", match: function match(e, t) {
        return t.locale.match.timesOfDay(e, { type: "long" }) || t.locale.match.timesOfDay(e, { type: "short" });
      }, parse: function parse(e, t) {
        var r = t.locale.match.timeOfDay(e, { type: "long" });return null == r && (r = t.locale.match.timeOfDay(e, { type: "short" })), r;
      } }, H: { unit: "hours", match: ce.H, parse: F }, HH: { unit: "hours", match: ce.twoDigits, parse: F }, h: { unit: "timeOfDayHours", match: ce.M, parse: F }, hh: { unit: "timeOfDayHours", match: ce.twoDigits, parse: F }, m: { unit: "minutes", match: ce.m, parse: F }, mm: { unit: "minutes", match: ce.twoDigits, parse: F }, s: { unit: "seconds", match: ce.m, parse: F }, ss: { unit: "seconds", match: ce.twoDigits, parse: F }, S: { unit: "milliseconds", match: ce.singleDigit, parse: function parse(e) {
        return 100 * F(e);
      } }, SS: { unit: "milliseconds", match: ce.twoDigits, parse: function parse(e) {
        return 10 * F(e);
      } }, SSS: { unit: "milliseconds", match: ce.threeDigits, parse: F }, Z: { unit: "timezone", match: ce.Z, parse: function parse(e) {
        var t = e[1],
            r = 60 * parseInt(e[2], 10) + parseInt(e[3], 10);return "+" === t ? r : -r;
      } }, ZZ: { unit: "timezone", match: ce.ZZ, parse: function parse(e) {
        var t = e[1],
            r = 60 * parseInt(e[2], 10) + parseInt(e[3], 10);return "+" === t ? r : -r;
      } }, X: { unit: "timestamp", match: ce.anyDigits, parse: function parse(e) {
        return 1e3 * F(e);
      } }, x: { unit: "timestamp", match: ce.anyDigits, parse: F } };fe.a = fe.A;var de = 864e5,
      he = { twoDigitYear: { priority: 10, set: function set(e, t) {
        var r = 100 * Math.floor(e.date.getUTCFullYear() / 100) + t;return e.date.setUTCFullYear(r, 0, 1), e.date.setUTCHours(0, 0, 0, 0), e;
      } }, year: { priority: 10, set: function set(e, t) {
        return e.date.setUTCFullYear(t, 0, 1), e.date.setUTCHours(0, 0, 0, 0), e;
      } }, isoYear: { priority: 10, set: function set(e, t, r) {
        return e.date = b(N(e.date, t, r), r), e;
      } }, quarter: { priority: 20, set: function set(e, t) {
        return e.date.setUTCMonth(3 * (t - 1), 1), e.date.setUTCHours(0, 0, 0, 0), e;
      } }, month: { priority: 30, set: function set(e, t) {
        return e.date.setUTCMonth(t, 1), e.date.setUTCHours(0, 0, 0, 0), e;
      } }, isoWeek: { priority: 40, set: function set(e, t, r) {
        return e.date = g(Y(e.date, t, r), r), e;
      } }, dayOfWeek: { priority: 50, set: function set(e, t, r) {
        return e.date = C(e.date, t, r), e.date.setUTCHours(0, 0, 0, 0), e;
      } }, dayOfISOWeek: { priority: 50, set: function set(e, t, r) {
        return e.date = S(e.date, t, r), e.date.setUTCHours(0, 0, 0, 0), e;
      } }, dayOfMonth: { priority: 50, set: function set(e, t) {
        return e.date.setUTCDate(t), e.date.setUTCHours(0, 0, 0, 0), e;
      } }, dayOfYear: { priority: 50, set: function set(e, t) {
        return e.date.setUTCMonth(0, t), e.date.setUTCHours(0, 0, 0, 0), e;
      } }, timeOfDay: { priority: 60, set: function set(e, t, r) {
        return e.timeOfDay = t, e;
      } }, hours: { priority: 70, set: function set(e, t, r) {
        return e.date.setUTCHours(t, 0, 0, 0), e;
      } }, timeOfDayHours: { priority: 70, set: function set(e, t, r) {
        var n = e.timeOfDay;return null != n && (t = E(t, n)), e.date.setUTCHours(t, 0, 0, 0), e;
      } }, minutes: { priority: 80, set: function set(e, t) {
        return e.date.setUTCMinutes(t, 0, 0), e;
      } }, seconds: { priority: 90, set: function set(e, t) {
        return e.date.setUTCSeconds(t, 0), e;
      } }, milliseconds: { priority: 100, set: function set(e, t) {
        return e.date.setUTCMilliseconds(t), e;
      } }, timezone: { priority: 110, set: function set(e, t) {
        return e.date = new Date(e.date.getTime() - 6e4 * t), e;
      } }, timestamp: { priority: 120, set: function set(e, t) {
        return e.date = new Date(t), e;
      } } },
      me = 110,
      pe = 6e4,
      ve = /(\[[^[]*])|(\\)?(LTS|LT|LLLL|LLL|LL|L|llll|lll|ll|l)/g,
      ge = /(\[[^[]*])|(\\)?(x|ss|s|mm|m|hh|h|do|dddd|ddd|dd|d|aa|a|ZZ|Z|YYYY|YY|X|Wo|WW|W|SSS|SS|S|Qo|Q|Mo|MMMM|MMM|MM|M|HH|H|GGGG|GG|E|Do|DDDo|DDDD|DDD|DD|D|A|.)/g,
      ye = function ye(e, t) {
    var r = k(e, t, new Date());return c(r) && _(r, t) === e ? r : null;
  },
      be = { en: /^[A-Z]*$/i, cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i, da: /^[A-ZÆØÅ]*$/i, de: /^[A-ZÄÖÜß]*$/i, es: /^[A-ZÁÉÍÑÓÚÜ]*$/i, fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i, lt: /^[A-ZĄČĘĖĮŠŲŪŽ]*$/i, nl: /^[A-ZÉËÏÓÖÜ]*$/i, hu: /^[A-ZÁÉÍÓÖŐÚÜŰ]*$/i, pl: /^[A-ZĄĆĘŚŁŃÓŻŹ]*$/i, pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i, ru: /^[А-ЯЁ]*$/i, sk: /^[A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ]*$/i, sr: /^[A-ZČĆŽŠĐ]*$/i, tr: /^[A-ZÇĞİıÖŞÜ]*$/i, uk: /^[А-ЩЬЮЯЄІЇҐ]*$/i, ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/ },
      De = { en: /^[A-Z\s]*$/i, cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ\s]*$/i, da: /^[A-ZÆØÅ\s]*$/i, de: /^[A-ZÄÖÜß\s]*$/i, es: /^[A-ZÁÉÍÑÓÚÜ\s]*$/i, fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ\s]*$/i, lt: /^[A-ZĄČĘĖĮŠŲŪŽ\s]*$/i, nl: /^[A-ZÉËÏÓÖÜ\s]*$/i, hu: /^[A-ZÁÉÍÓÖŐÚÜŰ\s]*$/i, pl: /^[A-ZĄĆĘŚŁŃÓŻŹ\s]*$/i, pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ\s]*$/i, ru: /^[А-ЯЁ\s]*$/i, sk: /^[A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ\s]*$/i, sr: /^[A-ZČĆŽŠĐ\s]*$/i, tr: /^[A-ZÇĞİıÖŞÜ\s]*$/i, uk: /^[А-ЩЬЮЯЄІЇҐ\s]*$/i, ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ\s]*$/ },
      we = { en: /^[0-9A-Z]*$/i, cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i, da: /^[0-9A-ZÆØÅ]$/i, de: /^[0-9A-ZÄÖÜß]*$/i, es: /^[0-9A-ZÁÉÍÑÓÚÜ]*$/i, fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i, lt: /^[0-9A-ZĄČĘĖĮŠŲŪŽ]*$/i, hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]*$/i, nl: /^[0-9A-ZÉËÏÓÖÜ]*$/i, pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]*$/i, pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i, ru: /^[0-9А-ЯЁ]*$/i, sk: /^[0-9A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ]*$/i, sr: /^[0-9A-ZČĆŽŠĐ]*$/i, tr: /^[0-9A-ZÇĞİıÖŞÜ]*$/i, uk: /^[0-9А-ЩЬЮЯЄІЇҐ]*$/i, ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/ },
      $e = { en: /^[0-9A-Z_-]*$/i, cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ_-]*$/i, da: /^[0-9A-ZÆØÅ_-]*$/i, de: /^[0-9A-ZÄÖÜß_-]*$/i, es: /^[0-9A-ZÁÉÍÑÓÚÜ_-]*$/i, fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ_-]*$/i, lt: /^[0-9A-ZĄČĘĖĮŠŲŪŽ_-]*$/i, nl: /^[0-9A-ZÉËÏÓÖÜ_-]*$/i, hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ_-]*$/i, pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ_-]*$/i, pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ_-]*$/i, ru: /^[0-9А-ЯЁ_-]*$/i, sk: /^[0-9A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ_-]*$/i, sr: /^[0-9A-ZČĆŽŠĐ_-]*$/i, tr: /^[0-9A-ZÇĞİıÖŞÜ_-]*$/i, uk: /^[0-9А-ЩЬЮЯЄІЇҐ_-]*$/i, ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ_-]*$/ },
      Te = function Te(e, t) {
    void 0 === t && (t = [null]);var r = t[0];return Array.isArray(e) ? e.every(function (e) {
      return Te(e, [r]);
    }) : r ? (be[r] || be.en).test(e) : Object.keys(be).some(function (t) {
      return be[t].test(e);
    });
  },
      _e = function _e(e, t) {
    void 0 === t && (t = [null]);var r = t[0];return Array.isArray(e) ? e.every(function (e) {
      return _e(e, [r]);
    }) : r ? ($e[r] || $e.en).test(e) : Object.keys($e).some(function (t) {
      return $e[t].test(e);
    });
  },
      Me = function Me(e, t) {
    void 0 === t && (t = [null]);var r = t[0];return Array.isArray(e) ? e.every(function (e) {
      return Me(e, [r]);
    }) : r ? (we[r] || we.en).test(e) : Object.keys(we).some(function (t) {
      return we[t].test(e);
    });
  },
      xe = function xe(e, t) {
    void 0 === t && (t = [null]);var r = t[0];return Array.isArray(e) ? e.every(function (e) {
      return xe(e, [r]);
    }) : r ? (De[r] || De.en).test(e) : Object.keys(De).some(function (t) {
      return De[t].test(e);
    });
  },
      Ae = function Ae(e, t) {
    var r = t[0],
        n = t[1];return Array.isArray(e) ? e.every(function (e) {
      return Ae(e, [r, n]);
    }) : Number(r) <= e && Number(n) >= e;
  },
      Oe = H(function (e, t) {
    Object.defineProperty(t, "__esModule", { value: !0 }), t.default = function (e) {
      if (!("string" == typeof e || e instanceof String)) throw new TypeError("This library (validator.js) validates strings only");
    }, e.exports = t.default;
  });Z(Oe);var Le = Z(H(function (e, t) {
    Object.defineProperty(t, "__esModule", { value: !0 }), t.default = function (e) {
      (0, r.default)(e);var t = e.replace(/[- ]+/g, "");if (!n.test(t)) return !1;for (var i = 0, a = void 0, o = void 0, s = void 0, u = t.length - 1; u >= 0; u--) {
        a = t.substring(u, u + 1), o = parseInt(a, 10), i += s && (o *= 2) >= 10 ? o % 10 + 1 : o, s = !s;
      }return !(i % 10 != 0 || !t);
    };var r = function (e) {
      return e && e.__esModule ? e : { default: e };
    }(Oe),
        n = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11}|62[0-9]{14})$/;e.exports = t.default;
  })),
      Fe = function Fe(e, t) {
    var r = Array.isArray(t) ? t[0] || "*" : "*";if (Array.isArray(e)) return e.every(function (e) {
      return Fe(e, t);
    });if (null === e || void 0 === e || "" === e) return !0;if (0 === Number(r)) return (/^-?\d*$/.test(e)
    );var n = "*" === r ? "+" : "{1," + r + "}";if (!new RegExp("^-?\\d*(\\.\\d" + n + ")?$").test(e)) return !1;var i = parseFloat(e);return i === i;
  },
      Ce = function Ce(e, t) {
    var r = t[0];if (Array.isArray(e)) return e.every(function (e) {
      return Ce(e, [r]);
    });var n = String(e);return (/^[0-9]*$/.test(n) && n.length === Number(r)
    );
  },
      Se = function Se(e, t, r) {
    var n = window.URL || window.webkitURL;return new Promise(function (i) {
      var a = new Image();a.onerror = function () {
        return i({ valid: !1 });
      }, a.onload = function () {
        return i({ valid: a.width === Number(t) && a.height === Number(r) });
      }, a.src = n.createObjectURL(e);
    });
  },
      Ye = H(function (e, t) {
    Object.defineProperty(t, "__esModule", { value: !0 }), t.default = function () {
      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          t = arguments[1];for (var r in t) {
        void 0 === e[r] && (e[r] = t[r]);
      }return e;
    }, e.exports = t.default;
  });Z(Ye);var Ne = H(function (e, t) {
    Object.defineProperty(t, "__esModule", { value: !0 });var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
      return typeof e === "undefined" ? "undefined" : _typeof(e);
    } : function (e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
    };t.default = function (e, t) {
      (0, n.default)(e);var i = void 0,
          a = void 0;"object" === (void 0 === t ? "undefined" : r(t)) ? (i = t.min || 0, a = t.max) : (i = arguments[1], a = arguments[2]);var o = encodeURI(e).split(/%..|./).length - 1;return o >= i && (void 0 === a || o <= a);
    };var n = function (e) {
      return e && e.__esModule ? e : { default: e };
    }(Oe);e.exports = t.default;
  });Z(Ne);var Ee = H(function (e, t) {
    function r(e) {
      return e && e.__esModule ? e : { default: e };
    }Object.defineProperty(t, "__esModule", { value: !0 }), t.default = function (e, t) {
      (0, n.default)(e), (t = (0, i.default)(t, a)).allow_trailing_dot && "." === e[e.length - 1] && (e = e.substring(0, e.length - 1));var r = e.split(".");if (t.require_tld) {
        var o = r.pop();if (!r.length || !/^([a-z\u00a1-\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(o)) return !1;if (/[\s\u2002-\u200B\u202F\u205F\u3000\uFEFF\uDB40\uDC20]/.test(o)) return !1;
      }for (var s, u = 0; u < r.length; u++) {
        if (s = r[u], t.allow_underscores && (s = s.replace(/_/g, "")), !/^[a-z\u00a1-\uffff0-9-]+$/i.test(s)) return !1;if (/[\uff01-\uff5e]/.test(s)) return !1;if ("-" === s[0] || "-" === s[s.length - 1]) return !1;
      }return !0;
    };var n = r(Oe),
        i = r(Ye),
        a = { require_tld: !0, allow_underscores: !1, allow_trailing_dot: !1 };e.exports = t.default;
  });Z(Ee);var ke = Z(H(function (e, t) {
    function r(e) {
      return e && e.__esModule ? e : { default: e };
    }Object.defineProperty(t, "__esModule", { value: !0 }), t.default = function (e, t) {
      if ((0, n.default)(e), (t = (0, i.default)(t, s)).require_display_name || t.allow_display_name) {
        var r = e.match(u);if (r) e = r[1];else if (t.require_display_name) return !1;
      }var h = e.split("@"),
          m = h.pop(),
          p = h.join("@"),
          v = m.toLowerCase();if ("gmail.com" !== v && "googlemail.com" !== v || (p = p.replace(/\./g, "").toLowerCase()), !(0, a.default)(p, { max: 64 }) || !(0, a.default)(m, { max: 254 })) return !1;if (!(0, o.default)(m, { require_tld: t.require_tld })) return !1;if ('"' === p[0]) return p = p.slice(1, p.length - 1), t.allow_utf8_local_part ? d.test(p) : c.test(p);for (var g = t.allow_utf8_local_part ? f : l, y = p.split("."), b = 0; b < y.length; b++) {
        if (!g.test(y[b])) return !1;
      }return !0;
    };var n = r(Oe),
        i = r(Ye),
        a = r(Ne),
        o = r(Ee),
        s = { allow_display_name: !1, require_display_name: !1, allow_utf8_local_part: !0, require_tld: !0 },
        u = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\.\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\,\.\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\s]*<(.+)>$/i,
        l = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i,
        c = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i,
        f = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i,
        d = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;e.exports = t.default;
  })),
      Ue = function Ue(e, t) {
    return Array.isArray(e) ? e.every(function (e) {
      return Ue(e, t);
    }) : !!t.filter(function (t) {
      return t == e;
    }).length;
  },
      je = H(function (e, t) {
    function r(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";if ((0, n.default)(e), !(t = String(t))) return r(e, 4) || r(e, 6);if ("4" === t) return !!i.test(e) && e.split(".").sort(function (e, t) {
        return e - t;
      })[3] <= 255;if ("6" === t) {
        var o = e.split(":"),
            s = !1,
            u = r(o[o.length - 1], 4),
            l = u ? 7 : 8;if (o.length > l) return !1;if ("::" === e) return !0;"::" === e.substr(0, 2) ? (o.shift(), o.shift(), s = !0) : "::" === e.substr(e.length - 2) && (o.pop(), o.pop(), s = !0);for (var c = 0; c < o.length; ++c) {
          if ("" === o[c] && c > 0 && c < o.length - 1) {
            if (s) return !1;s = !0;
          } else if (u && c === o.length - 1) ;else if (!a.test(o[c])) return !1;
        }return s ? o.length >= 1 : o.length === l;
      }return !1;
    }Object.defineProperty(t, "__esModule", { value: !0 }), t.default = r;var n = function (e) {
      return e && e.__esModule ? e : { default: e };
    }(Oe),
        i = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/,
        a = /^[0-9A-F]{1,4}$/i;e.exports = t.default;
  }),
      Ze = Z(je),
      He = function He(e, t) {
    return e.getAttribute("data-vv-" + t);
  },
      ze = function ze(e) {
    return null === e || void 0 === e;
  },
      qe = function qe(e, t, r) {
    return e.setAttribute("data-vv-" + t, r);
  },
      We = function We(e, t) {
    if (e instanceof RegExp && t instanceof RegExp) return We(e.source, t.source) && We(e.flags, t.flags);if (Array.isArray(e) && Array.isArray(t)) {
      if (e.length !== t.length) return !1;for (var r = 0; r < e.length; r++) {
        if (!We(e[r], t[r])) return !1;
      }return !0;
    }return Je(e) && Je(t) ? Object.keys(e).every(function (r) {
      return We(e[r], t[r]);
    }) && Object.keys(t).every(function (r) {
      return We(e[r], t[r]);
    }) : e === t;
  },
      Re = function Re(e) {
    var t = He(e, "scope");return ze(t) && e.form && (t = He(e.form, "scope")), ze(t) ? null : t;
  },
      Ve = function Ve(e, t, r) {
    if (void 0 === r && (r = void 0), !e || !t) return r;var n = t;return e.split(".").every(function (e) {
      return Object.prototype.hasOwnProperty.call(n, e) || void 0 !== n[e] ? (n = n[e], !0) : (n = r, !1);
    }), n;
  },
      Ie = function Ie(e, t) {
    var r = t;return e.split(".").every(function (e) {
      return !!Object.prototype.hasOwnProperty.call(r, e) && (r = r[e], !0);
    });
  },
      Pe = function Pe(e) {
    var t = [],
        r = e.split(":")[0];return ~e.indexOf(":") && (t = e.split(":").slice(1).join(":").split(",")), { name: r, params: t };
  },
      Ge = function Ge(e) {
    if (!e) return {};var t = {};return Je(e) ? (Object.keys(e).forEach(function (r) {
      var n = [];n = !0 === e[r] ? [] : Array.isArray(e[r]) ? e[r] : [e[r]], !1 !== e[r] && (t[r] = n);
    }), t) : "string" != typeof e ? (Xe("rules must be either a string or an object."), {}) : (e.split("|").forEach(function (e) {
      var r = Pe(e);r.name && (t[r.name] = r.params);
    }), t);
  },
      Be = function Be(e, t, r) {
    if (void 0 === t && (t = 0), void 0 === r && (r = !1), 0 === t) return e;var n;return function () {
      for (var i = [], a = arguments.length; a--;) {
        i[a] = arguments[a];
      }var o = r && !n;clearTimeout(n), n = setTimeout(function () {
        n = null, r || e.apply(void 0, i);
      }, t), o && e.apply(void 0, i);
    };
  },
      Xe = function Xe(e) {
    console.warn("[vee-validate] " + e);
  },
      Qe = function Qe(e) {
    return new Error("[vee-validate] " + e);
  },
      Je = function Je(e) {
    return null !== e && e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && !Array.isArray(e);
  },
      Ke = function Ke(e) {
    return "function" == typeof e;
  },
      et = function et(e, t) {
    return e.classList ? e.classList.contains(t) : !!e.className.match(new RegExp("(\\s|^)" + t + "(\\s|$)"));
  },
      tt = function tt(e, t) {
    e.classList ? e.classList.add(t) : et(e, t) || (e.className += " " + t);
  },
      rt = function rt(e, t) {
    if (e.classList) e.classList.remove(t);else if (et(e, t)) {
      var r = new RegExp("(\\s|^)" + t + "(\\s|$)");e.className = e.className.replace(r, " ");
    }
  },
      nt = function nt(e, t, r) {
    if (e && t) return r ? tt(e, t) : void rt(e, t);
  },
      it = function it(e) {
    if (Ke(Array.from)) return Array.from(e);for (var t = [], r = e.length, n = 0; n < r; n++) {
      t.push(e[n]);
    }return t;
  },
      at = function at(e) {
    for (var t = [], r = arguments.length - 1; r-- > 0;) {
      t[r] = arguments[r + 1];
    }if (Ke(Object.assign)) return Object.assign.apply(Object, [e].concat(t));if (null == e) throw new TypeError("Cannot convert undefined or null to object");var n = Object(e);return t.forEach(function (e) {
      null != e && Object.keys(e).forEach(function (t) {
        n[t] = e[t];
      });
    }), n;
  },
      ot = function ot() {
    return "_" + Math.random().toString(36).substr(2, 9);
  },
      st = function st(e, t) {
    if (Je(e) && (e = it(e)), e.find) return e.find(t);var r;return e.some(function (e) {
      return !!t(e) && (r = e, !0);
    }), r;
  },
      ut = function ut(e) {
    return e && ("SELECT" === e.tagName || ~["radio", "checkbox", "file"].indexOf(e.type)) ? "change" : "input";
  },
      lt = function lt(e, t, r) {
    return void 0 === r ? e.length === t : (r = Number(r), e.length >= t && e.length <= r);
  },
      ct = function ct(e, t) {
    return Array.isArray(e) ? e.every(function (e) {
      return ct(e, t);
    }) : !t.filter(function (t) {
      return t == e;
    }).length;
  },
      ft = Z(H(function (e, t) {
    function r(e) {
      return e && e.__esModule ? e : { default: e };
    }function n(e) {
      return "[object RegExp]" === Object.prototype.toString.call(e);
    }function i(e, t) {
      for (var r = 0; r < t.length; r++) {
        var i = t[r];if (e === i || n(i) && i.test(e)) return !0;
      }return !1;
    }Object.defineProperty(t, "__esModule", { value: !0 }), t.default = function (e, t) {
      if ((0, a.default)(e), !e || e.length >= 2083 || /[\s<>]/.test(e)) return !1;if (0 === e.indexOf("mailto:")) return !1;t = (0, u.default)(t, l);var r = void 0,
          n = void 0,
          f = void 0,
          d = void 0,
          h = void 0,
          m = void 0,
          p = void 0,
          v = void 0;if (p = e.split("#"), e = p.shift(), p = e.split("?"), e = p.shift(), (p = e.split("://")).length > 1) {
        if (r = p.shift(), t.require_valid_protocol && -1 === t.protocols.indexOf(r)) return !1;
      } else {
        if (t.require_protocol) return !1;t.allow_protocol_relative_urls && "//" === e.substr(0, 2) && (p[0] = e.substr(2));
      }if ("" === (e = p.join("://"))) return !1;if (p = e.split("/"), "" === (e = p.shift()) && !t.require_host) return !0;if ((p = e.split("@")).length > 1 && (n = p.shift()).indexOf(":") >= 0 && n.split(":").length > 2) return !1;m = null, v = null;var g = (d = p.join("@")).match(c);return g ? (f = "", v = g[1], m = g[2] || null) : (f = (p = d.split(":")).shift(), p.length && (m = p.join(":"))), !(null !== m && (h = parseInt(m, 10), !/^[0-9]+$/.test(m) || h <= 0 || h > 65535) || !((0, s.default)(f) || (0, o.default)(f, t) || v && (0, s.default)(v, 6)) || (f = f || v, t.host_whitelist && !i(f, t.host_whitelist) || t.host_blacklist && i(f, t.host_blacklist)));
    };var a = r(Oe),
        o = r(Ee),
        s = r(je),
        u = r(Ye),
        l = { protocols: ["http", "https", "ftp"], require_tld: !0, require_protocol: !1, require_host: !0, require_valid_protocol: !0, allow_underscores: !1, allow_trailing_dot: !1, allow_protocol_relative_urls: !1 },
        c = /^\[([^\]]+)\](?::([0-9]+))?$/;e.exports = t.default;
  })),
      dt = { after: function after(e, t) {
      var r = t[0],
          n = t[1],
          i = t[2];return void 0 === i && (i = n, n = !1), e = ye(e, i), r = ye(r, i), !(!e || !r) && (A(e, r) || n && L(e, r));
    }, alpha_dash: _e, alpha_num: Me, alpha_spaces: xe, alpha: Te, before: function before(e, t) {
      var r = t[0],
          n = t[1],
          i = t[2];return void 0 === i && (i = n, n = !1), e = ye(e, i), r = ye(r, i), !(!e || !r) && (O(e, r) || n && L(e, r));
    }, between: Ae, confirmed: function confirmed(e, t) {
      return String(e) === String(t);
    }, credit_card: function credit_card(e) {
      return Le(String(e));
    }, date_between: function date_between(e, t) {
      var r,
          n,
          i,
          a = "()";if (t.length > 3) {
        var o;r = (o = t)[0], n = o[1], a = o[2], i = o[3];
      } else {
        var s;r = (s = t)[0], n = s[1], i = s[2];
      }var u = ye(r, i),
          l = ye(n, i),
          c = ye(e, i);return !!(u && l && c) && ("()" === a ? A(c, u) && O(c, l) : "(]" === a ? A(c, u) && (L(c, l) || O(c, l)) : "[)" === a ? O(c, l) && (L(c, u) || A(c, u)) : L(c, l) || L(c, u) || O(c, l) && A(c, u));
    }, date_format: function date_format(e, t) {
      var r = t[0];return !!ye(e, r);
    }, decimal: Fe, digits: Ce, dimensions: function dimensions(e, t) {
      for (var r = t[0], n = t[1], i = [], a = 0; a < e.length; a++) {
        if (!/\.(jpg|svg|jpeg|png|bmp|gif)$/i.test(e[a].name)) return !1;i.push(e[a]);
      }return Promise.all(i.map(function (e) {
        return Se(e, r, n);
      }));
    }, email: function email(e) {
      return Array.isArray(e) ? e.every(function (e) {
        return ke(String(e));
      }) : ke(String(e));
    }, ext: function ext(e, t) {
      var r = new RegExp(".(" + t.join("|") + ")$", "i");return e.every(function (e) {
        return r.test(e.name);
      });
    }, image: function image(e) {
      return e.every(function (e) {
        return (/\.(jpg|svg|jpeg|png|bmp|gif)$/i.test(e.name)
        );
      });
    }, in: Ue, integer: function integer(e) {
      return Array.isArray(e) ? e.every(function (e) {
        return (/^-?[0-9]+$/.test(String(e))
        );
      }) : /^-?[0-9]+$/.test(String(e));
    }, length: function length(e, t) {
      var r = t[0],
          n = t[1];return void 0 === n && (n = void 0), r = Number(r), void 0 !== e && null !== e && ("number" == typeof e && (e = String(e)), e.length || (e = it(e)), lt(e, r, n));
    }, ip: function ip(e, t) {
      void 0 === t && (t = [4]);var r = t[0];return Array.isArray(e) ? e.every(function (e) {
        return Ze(e, [r]);
      }) : Ze(e, r);
    }, max: function max(e, t) {
      var r = t[0];return void 0 === e || null === e ? r >= 0 : String(e).length <= r;
    }, max_value: function max_value(e, t) {
      var r = t[0];return !Array.isArray(e) && null !== e && void 0 !== e && "" !== e && Number(e) <= r;
    }, mimes: function mimes(e, t) {
      var r = new RegExp(t.join("|").replace("*", ".+") + "$", "i");return e.every(function (e) {
        return r.test(e.type);
      });
    }, min: function min(e, t) {
      var r = t[0];return void 0 !== e && null !== e && String(e).length >= r;
    }, min_value: function min_value(e, t) {
      var r = t[0];return !Array.isArray(e) && null !== e && void 0 !== e && "" !== e && Number(e) >= r;
    }, not_in: ct, numeric: function numeric(e) {
      return Array.isArray(e) ? e.every(function (e) {
        return (/^[0-9]+$/.test(String(e))
        );
      }) : /^[0-9]+$/.test(String(e));
    }, regex: function regex(e, t) {
      var r = t[0],
          n = t.slice(1);return r instanceof RegExp ? r.test(e) : new RegExp(r, n).test(String(e));
    }, required: function required(e, t) {
      if (void 0 === t && (t = [!1]), Array.isArray(e)) return !!e.length;var r = t[0];return !(!1 === e && r || void 0 === e || null === e || !String(e).trim().length);
    }, size: function size(e, t) {
      var r = t[0];if (isNaN(r)) return !1;for (var n = 1024 * Number(r), i = 0; i < e.length; i++) {
        if (e[i].size > n) return !1;
      }return !0;
    }, url: function url(e, t) {
      void 0 === t && (t = [!0]);var r = { require_protocol: !!t[0], allow_underscores: !0 };return Array.isArray(e) ? e.every(function (e) {
        return ft(e, r);
      }) : ft(e, r);
    } },
      ht = function ht(e) {
    var t = ["Byte", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
        r = 0 === (e = 1024 * Number(e)) ? 0 : Math.floor(Math.log(e) / Math.log(1024));return 1 * (e / Math.pow(1024, r)).toFixed(2) + " " + t[r];
  },
      mt = { _default: function _default(e) {
      return "The " + e + " value is not valid.";
    }, after: function after(e, t) {
      var r = t[0];return "The " + e + " must be after " + (t[1] ? "or equal to " : "") + r + ".";
    }, alpha_dash: function alpha_dash(e) {
      return "The " + e + " field may contain alpha-numeric characters as well as dashes and underscores.";
    }, alpha_num: function alpha_num(e) {
      return "The " + e + " field may only contain alpha-numeric characters.";
    }, alpha_spaces: function alpha_spaces(e) {
      return "The " + e + " field may only contain alphabetic characters as well as spaces.";
    }, alpha: function alpha(e) {
      return "The " + e + " field may only contain alphabetic characters.";
    }, before: function before(e, t) {
      var r = t[0];return "The " + e + " must be before " + (t[1] ? "or equal to " : "") + r + ".";
    }, between: function between(e, t) {
      return "The " + e + " field must be between " + t[0] + " and " + t[1] + ".";
    }, confirmed: function confirmed(e) {
      return "The " + e + " confirmation does not match.";
    }, credit_card: function credit_card(e) {
      return "The " + e + " field is invalid.";
    }, date_between: function date_between(e, t) {
      return "The " + e + " must be between " + t[0] + " and " + t[1] + ".";
    }, date_format: function date_format(e, t) {
      return "The " + e + " must be in the format " + t[0] + ".";
    }, decimal: function decimal(e, t) {
      void 0 === t && (t = ["*"]);var r = t[0];return "The " + e + " field must be numeric and may contain " + (r && "*" !== r ? r : "") + " decimal points.";
    }, digits: function digits(e, t) {
      return "The " + e + " field must be numeric and exactly contain " + t[0] + " digits.";
    }, dimensions: function dimensions(e, t) {
      return "The " + e + " field must be " + t[0] + " pixels by " + t[1] + " pixels.";
    }, email: function email(e) {
      return "The " + e + " field must be a valid email.";
    }, ext: function ext(e) {
      return "The " + e + " field must be a valid file.";
    }, image: function image(e) {
      return "The " + e + " field must be an image.";
    }, in: function _in(e) {
      return "The " + e + " field must be a valid value.";
    }, integer: function integer(e) {
      return "The " + e + " field must be an integer.";
    }, ip: function ip(e) {
      return "The " + e + " field must be a valid ip address.";
    }, length: function length(e, t) {
      var r = t[0],
          n = t[1];return n ? "The " + e + " length be between " + r + " and " + n + "." : "The " + e + " length must be " + r + ".";
    }, max: function max(e, t) {
      return "The " + e + " field may not be greater than " + t[0] + " characters.";
    }, max_value: function max_value(e, t) {
      return "The " + e + " field must be " + t[0] + " or less.";
    }, mimes: function mimes(e) {
      return "The " + e + " field must have a valid file type.";
    }, min: function min(e, t) {
      return "The " + e + " field must be at least " + t[0] + " characters.";
    }, min_value: function min_value(e, t) {
      return "The " + e + " field must be " + t[0] + " or more.";
    }, not_in: function not_in(e) {
      return "The " + e + " field must be a valid value.";
    }, numeric: function numeric(e) {
      return "The " + e + " field may only contain numeric characters.";
    }, regex: function regex(e) {
      return "The " + e + " field format is invalid.";
    }, required: function required(e) {
      return "The " + e + " field is required.";
    }, size: function size(e, t) {
      var r = t[0];return "The " + e + " size must be less than " + ht(r) + ".";
    }, url: function url(e) {
      return "The " + e + " field is not a valid URL.";
    } },
      pt = { name: "en", messages: mt, attributes: {} };"undefined" != typeof VeeValidate && VeeValidate.Validator.addLocale(pt);var vt = function vt() {
    this.items = [];
  };vt.prototype.add = function (e) {
    arguments.length > 1 && (e = { field: arguments[0], msg: arguments[1], rule: arguments[2], scope: ze(arguments[3]) ? null : arguments[3] }), e.scope = ze(e.scope) ? null : e.scope, this.items.push(e);
  }, vt.prototype.update = function (e, t) {
    var r = st(this.items, function (t) {
      return t.id === e;
    });if (r) {
      var n = this.items.indexOf(r);this.items.splice(n, 1), r.scope = t.scope, this.items.push(r);
    }
  }, vt.prototype.all = function (e) {
    return ze(e) ? this.items.map(function (e) {
      return e.msg;
    }) : this.items.filter(function (t) {
      return t.scope === e;
    }).map(function (e) {
      return e.msg;
    });
  }, vt.prototype.any = function (e) {
    return ze(e) ? !!this.items.length : !!this.items.filter(function (t) {
      return t.scope === e;
    }).length;
  }, vt.prototype.clear = function (e) {
    var t = this;ze(e) && (e = null);for (var r = 0; r < this.items.length; ++r) {
      (function (t) {
        return t.scope === e;
      })(t.items[r]) && (t.items.splice(r, 1), --r);
    }
  }, vt.prototype.collect = function (e, t, r) {
    if (void 0 === r && (r = !0), !e) {
      var n = {};return this.items.forEach(function (e) {
        n[e.field] || (n[e.field] = []), n[e.field].push(r ? e.msg : e);
      }), n;
    }return e = ze(e) ? e : String(e), ze(t) ? this.items.filter(function (t) {
      return t.field === e;
    }).map(function (e) {
      return r ? e.msg : e;
    }) : this.items.filter(function (r) {
      return r.field === e && r.scope === t;
    }).map(function (e) {
      return r ? e.msg : e;
    });
  }, vt.prototype.count = function () {
    return this.items.length;
  }, vt.prototype.firstById = function (e) {
    var t = st(this.items, function (t) {
      return t.id === e;
    });return t ? t.msg : null;
  }, vt.prototype.first = function (e, t) {
    var r = this;void 0 === t && (t = null), e = ze(e) ? e : String(e);var n = this._selector(e),
        i = this._scope(e);if (i) {
      var a = this.first(i.name, i.scope);if (a) return a;
    }if (n) return this.firstByRule(n.name, n.rule, t);for (var o = 0; o < this.items.length; ++o) {
      if (r.items[o].field === e && r.items[o].scope === t) return r.items[o].msg;
    }return null;
  }, vt.prototype.firstRule = function (e, t) {
    var r = this.collect(e, t, !1);return r.length && r[0].rule || null;
  }, vt.prototype.has = function (e, t) {
    return void 0 === t && (t = null), !!this.first(e, t);
  }, vt.prototype.firstByRule = function (e, t, r) {
    var n = this.collect(e, r, !1).filter(function (e) {
      return e.rule === t;
    })[0];return n && n.msg || null;
  }, vt.prototype.firstNot = function (e, t, r) {
    void 0 === t && (t = "required");var n = this.collect(e, r, !1).filter(function (e) {
      return e.rule !== t;
    })[0];return n && n.msg || null;
  }, vt.prototype.removeById = function (e) {
    for (var t = this, r = 0; r < this.items.length; ++r) {
      t.items[r].id === e && (t.items.splice(r, 1), --r);
    }
  }, vt.prototype.remove = function (e, t, r) {
    var n = this;e = ze(e) ? e : String(e);for (var i = 0; i < this.items.length; ++i) {
      (function (n) {
        return n.id && r ? n.id === r : ze(t) ? n.field === e && null === n.scope : n.field === e && n.scope === t;
      })(n.items[i]) && (n.items.splice(i, 1), --i);
    }
  }, vt.prototype._selector = function (e) {
    if (e.indexOf(":") > -1) {
      var t = e.split(":");return { name: t[0], rule: t[1] };
    }return null;
  }, vt.prototype._scope = function (e) {
    if (e.indexOf(".") > -1) {
      var t = e.split("."),
          r = t[0];return { name: t.slice(1).join("."), scope: r };
    }return null;
  };var gt = function gt(e) {
    void 0 === e && (e = {}), this.container = {}, this.merge(e);
  };gt.prototype.hasLocale = function (e) {
    return !!this.container[e];
  }, gt.prototype.setDateFormat = function (e, t) {
    this.container[e] || (this.container[e] = {}), this.container[e].dateFormat = t;
  }, gt.prototype.getDateFormat = function (e) {
    if (this.container[e]) return this.container[e].dateFormat;
  }, gt.prototype.getMessage = function (e, t, r) {
    return this.hasMessage(e, t) ? this.container[e].messages[t] : r || this._getDefaultMessage(e);
  }, gt.prototype.getFieldMessage = function (e, t, r) {
    if (!this.hasLocale(e)) return this.getMessage(e, r);var n = this.container[e].custom && this.container[e].custom[t];return n && n[r] ? n[r] : this.getMessage(e, r);
  }, gt.prototype._getDefaultMessage = function (e) {
    return this.hasMessage(e, "_default") ? this.container[e].messages._default : this.container.en.messages._default;
  }, gt.prototype.getAttribute = function (e, t, r) {
    return void 0 === r && (r = ""), this.hasAttribute(e, t) ? this.container[e].attributes[t] : r;
  }, gt.prototype.hasMessage = function (e, t) {
    return !!(this.hasLocale(e) && this.container[e].messages && this.container[e].messages[t]);
  }, gt.prototype.hasAttribute = function (e, t) {
    return !!(this.hasLocale(e) && this.container[e].attributes && this.container[e].attributes[t]);
  }, gt.prototype.merge = function (e) {
    this._merge(this.container, e);
  }, gt.prototype.setMessage = function (e, t, r) {
    this.hasLocale(e) || (this.container[e] = { messages: {}, attributes: {} }), this.container[e].messages[t] = r;
  }, gt.prototype.setAttribute = function (e, t, r) {
    this.hasLocale(e) || (this.container[e] = { messages: {}, attributes: {} }), this.container[e].attributes[t] = r;
  }, gt.prototype._merge = function (e, t) {
    var r = this;return Je(e) && Je(t) ? (Object.keys(t).forEach(function (n) {
      if (Je(t[n])) {
        if (!e[n]) {
          at(e, (i = {}, i[n] = {}, i));var i;
        }r._merge(e[n], t[n]);
      } else {
        at(e, (a = {}, a[n] = t[n], a));var a;
      }
    }), e) : e;
  };var yt = function yt() {};yt.generate = function (e, t, r, n) {
    void 0 === n && (n = {});var i = yt.resolveModel(t, r);return { name: yt.resolveName(e, r), el: e, listen: !t.modifiers.disable, scope: yt.resolveScope(e, t, r), vm: yt.makeVM(r.context), expression: t.value, component: r.child, classes: n.classes, classNames: n.classNames, getter: yt.resolveGetter(e, r, i), events: yt.resolveEvents(e, r) || n.events, model: i, delay: yt.resolveDelay(e, r, n), rules: yt.resolveRules(e, t), initial: !!t.modifiers.initial, alias: yt.resolveAlias(e, r), validity: n.validity, aria: n.aria, initialValue: yt.resolveInitialValue(r) };
  }, yt.getCtorConfig = function (e) {
    return e.child ? Ve("child.$options.$_veeValidate", e) : null;
  }, yt.resolveRules = function (e, t) {
    return t && t.expression ? "string" == typeof t.value ? t.value : ~["string", "object"].indexOf(_typeof(t.value.rules)) ? t.value.rules : t.value : He(e, "rules");
  }, yt.resolveInitialValue = function (e) {
    var t = e.data.model || st(e.data.directives, function (e) {
      return "model" === e.name;
    });return t && t.value;
  }, yt.makeVM = function (e) {
    return { get $el() {
        return e.$el;
      }, get $refs() {
        return e.$refs;
      }, $watch: e.$watch ? e.$watch.bind(e) : function () {}, $validator: e.$validator ? { errors: e.$validator.errors, validate: e.$validator.validate.bind(e.$validator), update: e.$validator.update.bind(e.$validator) } : null };
  }, yt.resolveDelay = function (e, t, r) {
    return void 0 === r && (r = {}), He(e, "delay") || t.child && t.child.$attrs && t.child.$attrs["data-vv-delay"] || r.delay;
  }, yt.resolveAlias = function (e, t) {
    return function () {
      return He(e, "as") || t.child && t.child.$attrs && t.child.$attrs["data-vv-as"] || e.title || null;
    };
  }, yt.resolveEvents = function (e, t) {
    var r = He(e, "validate-on");if (!r && t.child && t.child.$attrs && (r = t.child.$attrs["data-vv-validate-on"]), !r && t.child) {
      var n = yt.getCtorConfig(t);r = n && n.events;
    }return r;
  }, yt.resolveScope = function (e, t, r) {
    void 0 === r && (r = {});var n = null;return Je(t.value) && (n = t.value.scope), r.child && ze(n) && (n = r.child.$attrs && r.child.$attrs["data-vv-scope"]), ze(n) ? Re(e) : n;
  }, yt.resolveModel = function (e, t) {
    if (e.arg) return e.arg;if (Je(e.value) && e.value.arg) return e.value.arg;var r = t.data.model || st(t.data.directives, function (e) {
      return "model" === e.name;
    });return r && /^[a-z_]+[0-9]*(\w*\.[a-z_]\w*)*$/i.test(r.expression) && Ie(r.expression, t.context) ? r.expression : null;
  }, yt.resolveName = function (e, t) {
    var r = He(e, "name");if (!r && !t.child) return e.name;if (!r && t.child && t.child.$attrs && (r = t.child.$attrs["data-vv-name"] || t.child.$attrs.name), !r && t.child) {
      var n = yt.getCtorConfig(t);return n && Ke(n.name) ? n.name.bind(t.child)() : t.child.name;
    }return r;
  }, yt.resolveGetter = function (e, t, r) {
    if (r) return function () {
      return Ve(r, t.context);
    };if (t.child) {
      var n = He(e, "value-path") || t.child.$attrs && t.child.$attrs["data-vv-value-path"];if (n) return function () {
        return Ve(n, t.child);
      };var i = yt.getCtorConfig(t);if (i && Ke(i.value)) {
        var a = i.value.bind(t.child);return function () {
          return a();
        };
      }return function () {
        return t.child.value;
      };
    }switch (e.type) {case "checkbox":
        return function () {
          var t = document.querySelectorAll('input[name="' + e.name + '"]');if ((t = it(t).filter(function (e) {
            return e.checked;
          })).length) return t.map(function (e) {
            return e.value;
          });
        };case "radio":
        return function () {
          var t = document.querySelectorAll('input[name="' + e.name + '"]'),
              r = st(t, function (e) {
            return e.checked;
          });return r && r.value;
        };case "file":
        return function (t) {
          return it(e.files);
        };case "select-multiple":
        return function () {
          return it(e.options).filter(function (e) {
            return e.selected;
          }).map(function (e) {
            return e.value;
          });
        };default:
        return function () {
          return e && e.value;
        };}
  };var bt = { targetOf: null, initial: !1, scope: null, listen: !0, name: null, active: !0, required: !1, rules: {}, vm: null, classes: !1, validity: !0, aria: !0, events: "input|blur", delay: 0, classNames: { touched: "touched", untouched: "untouched", valid: "valid", invalid: "invalid", pristine: "pristine", dirty: "dirty" } },
      Dt = function Dt(e, t) {
    void 0 === t && (t = {}), this.id = ot(), this.el = e, this.updated = !1, this.dependencies = [], this.watchers = [], this.events = [], this.rules = {}, this.isHeadless || t.targetOf || qe(this.el, "id", this.id), t = at({}, bt, t), this.validity = t.validity, this.aria = t.aria, this.flags = { untouched: !0, touched: !1, dirty: !1, pristine: !0, valid: null, invalid: null, validated: !1, pending: !1, required: !1 }, this.vm = t.vm, this.component = t.component, this.ctorConfig = this.component ? Ve("$options.$_veeValidate", this.component) : void 0, this.update(t), this.updated = !1;
  },
      wt = { isVue: {}, validator: {}, isRequired: {}, isDisabled: {}, isHeadless: {}, displayName: {}, value: {}, rejectsFalse: {} };wt.isVue.get = function () {
    return !!this.component;
  }, wt.validator.get = function () {
    return this.vm && this.vm.$validator ? this.vm.$validator : (Xe("No validator instance detected."), { validate: function validate() {} });
  }, wt.isRequired.get = function () {
    return !!this.rules.required;
  }, wt.isDisabled.get = function () {
    return this.isVue && this.component.disabled || this.el && this.el.disabled;
  }, wt.isHeadless.get = function () {
    return !this.el;
  }, wt.displayName.get = function () {
    return Ke(this.alias) ? this.alias() : this.alias;
  }, wt.value.get = function () {
    if (Ke(this.getter)) return this.getter();
  }, wt.rejectsFalse.get = function () {
    return this.isVue && this.ctorConfig ? !!this.ctorConfig.rejectsFalse : !this.isHeadless && "checkbox" === this.el.type;
  }, Dt.prototype.matches = function (e) {
    return e.id ? this.id === e.id : void 0 === e.name && void 0 === e.scope || (void 0 === e.scope ? this.name === e.name : void 0 === e.name ? this.scope === e.scope : e.name === this.name && e.scope === this.scope);
  }, Dt.prototype.update = function (e) {
    this.targetOf = e.targetOf || null, this.initial = e.initial || this.initial || !1, this.updated && !ze(e.scope) && e.scope !== this.scope && Ke(this.validator.update) && this.validator.update(this.id, { scope: e.scope }), this.scope = ze(e.scope) ? ze(this.scope) ? null : this.scope : e.scope, this.name = (ze(e.name) ? e.name : String(e.name)) || this.name || null, this.rules = void 0 !== e.rules ? Ge(e.rules) : this.rules, this.model = e.model || this.model, this.listen = void 0 !== e.listen ? e.listen : this.listen, this.classes = e.classes || this.classes || !1, this.classNames = e.classNames || this.classNames || bt.classNames, this.alias = e.alias || this.alias, this.getter = Ke(e.getter) ? e.getter : this.getter, this.delay = e.delay || this.delay || 0, this.events = "string" == typeof e.events && e.events.length ? e.events.split("|") : this.events, this.updateDependencies(), this.addActionListeners(), void 0 !== e.rules && (this.flags.required = this.isRequired), this.flags.validated && void 0 !== e.rules && this.updated && this.validator.validate("#" + this.id), this.updated = !0, this.isHeadless || (this.updateClasses(), this.addValueListeners(), this.updateAriaAttrs());
  }, Dt.prototype.reset = function () {
    var e = this,
        t = { untouched: !0, touched: !1, dirty: !1, pristine: !0, valid: null, invalid: null, validated: !1, pending: !1, required: !1 };Object.keys(this.flags).forEach(function (r) {
      e.flags[r] = t[r];
    }), this.addActionListeners(), this.updateClasses(), this.validator.errors && Ke(this.validator.errors.removeById) && this.validator.errors.removeById(this.id);
  }, Dt.prototype.setFlags = function (e) {
    var t = this,
        r = { pristine: "dirty", dirty: "pristine", valid: "invalid", invalid: "valid", touched: "untouched", untouched: "touched" };Object.keys(e).forEach(function (n) {
      t.flags[n] = e[n], r[n] && void 0 === e[r[n]] && (t.flags[r[n]] = !e[n]);
    }), void 0 === e.untouched && void 0 === e.touched && void 0 === e.dirty && void 0 === e.pristine || this.addActionListeners(), this.updateClasses(), this.updateAriaAttrs(), this.updateCustomValidity();
  }, Dt.prototype.updateDependencies = function () {
    var e = this;this.dependencies.forEach(function (e) {
      return e.field.destroy();
    }), this.dependencies = [];var t = Object.keys(this.rules).reduce(function (t, r) {
      return "confirmed" === r ? t.push({ selector: e.rules[r][0] || e.name + "_confirmation", name: r }) : /after|before/.test(r) && t.push({ selector: e.rules[r][0], name: r }), t;
    }, []);t.length && this.vm && this.vm.$el && t.forEach(function (t) {
      var r = t.selector,
          n = t.name,
          i = null;if ("$" === r[0]) i = e.vm.$refs[r.slice(1)];else try {
        i = e.vm.$el.querySelector(r);
      } catch (e) {
        i = null;
      }if (!i) try {
        i = e.vm.$el.querySelector('input[name="' + r + '"]');
      } catch (e) {
        i = null;
      }if (i) {
        var a = { vm: e.vm, classes: e.classes, classNames: e.classNames, delay: e.delay, scope: e.scope, events: e.events.join("|"), initial: e.initial, targetOf: e.id };Ke(i.$watch) ? (a.component = i, a.el = i.$el, a.alias = yt.resolveAlias(i.$el, { child: i }), a.getter = yt.resolveGetter(i.$el, { child: i })) : (a.el = i, a.alias = yt.resolveAlias(i, {}), a.getter = yt.resolveGetter(i, {})), e.dependencies.push({ name: n, field: new Dt(a.el, a) });
      }
    });
  }, Dt.prototype.unwatch = function (e) {
    if (void 0 === e && (e = null), !e) return this.watchers.forEach(function (e) {
      return e.unwatch();
    }), void (this.watchers = []);this.watchers.filter(function (t) {
      return e.test(t.tag);
    }).forEach(function (e) {
      return e.unwatch();
    }), this.watchers = this.watchers.filter(function (t) {
      return !e.test(t.tag);
    });
  }, Dt.prototype.updateClasses = function () {
    this.classes && (nt(this.el, this.classNames.dirty, this.flags.dirty), nt(this.el, this.classNames.pristine, this.flags.pristine), nt(this.el, this.classNames.valid, !!this.flags.valid), nt(this.el, this.classNames.invalid, !!this.flags.invalid), nt(this.el, this.classNames.touched, this.flags.touched), nt(this.el, this.classNames.untouched, this.flags.untouched));
  }, Dt.prototype.addActionListeners = function () {
    var e = this;this.unwatch(/class/);var t = function t() {
      e.flags.touched = !0, e.flags.untouched = !1, e.classes && (nt(e.el, e.classNames.touched, !0), nt(e.el, e.classNames.untouched, !1)), e.unwatch(/^class_blur$/);
    },
        r = ut(this.el),
        n = function n() {
      e.flags.dirty = !0, e.flags.pristine = !1, e.classes && (nt(e.el, e.classNames.pristine, !1), nt(e.el, e.classNames.dirty, !0)), e.unwatch(/^class_input$/);
    };if (this.isVue && Ke(this.component.$once)) return this.component.$once("input", n), this.component.$once("blur", t), this.watchers.push({ tag: "class_input", unwatch: function unwatch() {
        e.component.$off("input", n);
      } }), void this.watchers.push({ tag: "class_blur", unwatch: function unwatch() {
        e.component.$off("blur", t);
      } });if (!this.isHeadless) {
      this.el.addEventListener(r, n);var i = -1 === ["radio", "checkbox"].indexOf(this.el.type) ? "blur" : "click";this.el.addEventListener(i, t), this.watchers.push({ tag: "class_input", unwatch: function unwatch() {
          e.el.removeEventListener(r, n);
        } }), this.watchers.push({ tag: "class_blur", unwatch: function unwatch() {
          e.el.removeEventListener(i, t);
        } });
    }
  }, Dt.prototype.addValueListeners = function () {
    var e = this;if (this.unwatch(/^input_.+/), this.listen) {
      var t = this.targetOf ? function () {
        e.validator.validate("#" + e.targetOf);
      } : function () {
        for (var t = [], r = arguments.length; r--;) {
          t[r] = arguments[r];
        }(0 === t.length || Ke(Event) && t[0] instanceof Event || t[0] && t[0].srcElement) && (t[0] = e.value), e.validator.validate("#" + e.id, t[0]);
      },
          r = Be(t, this.delay),
          n = ut(this.el),
          i = this.events.map(function (e) {
        return "input" === e ? n : e;
      });if (this.model && -1 !== i.indexOf(n)) {
        var a = this.vm.$watch(this.model, r);this.watchers.push({ tag: "input_model", unwatch: a }), i = i.filter(function (e) {
          return e !== n;
        });
      }i.forEach(function (t) {
        if (e.isVue) return e.component.$on(t, r), void e.watchers.push({ tag: "input_vue", unwatch: function unwatch() {
            e.component.$off(t, r);
          } });if (~["radio", "checkbox"].indexOf(e.el.type)) {
          var n = document.querySelectorAll('input[name="' + e.el.name + '"]');it(n).forEach(function (n) {
            n.addEventListener(t, r), e.watchers.push({ tag: "input_native", unwatch: function unwatch() {
                n.removeEventListener(t, r);
              } });
          });
        } else e.el.addEventListener(t, r), e.watchers.push({ tag: "input_native", unwatch: function unwatch() {
            e.el.removeEventListener(t, r);
          } });
      });
    }
  }, Dt.prototype.updateAriaAttrs = function () {
    this.aria && !this.isHeadless && Ke(this.el.setAttribute) && (this.el.setAttribute("aria-required", this.isRequired ? "true" : "false"), this.el.setAttribute("aria-invalid", this.flags.invalid ? "true" : "false"));
  }, Dt.prototype.updateCustomValidity = function () {
    this.validity && !this.isHeadless && Ke(this.el.setCustomValidity) && this.el.setCustomValidity(this.flags.valid ? "" : this.validator.errors.firstById(this.id) || "");
  }, Dt.prototype.destroy = function () {
    this.watchers.forEach(function (e) {
      return e.unwatch();
    }), this.watchers = [], this.dependencies.forEach(function (e) {
      return e.field.destroy();
    }), this.dependencies = [];
  }, Object.defineProperties(Dt.prototype, wt);var $t = function $t() {
    this.items = [];
  },
      Tt = { length: {} };Tt.length.get = function () {
    return this.items.length;
  }, $t.prototype.find = function (e) {
    return st(this.items, function (t) {
      return t.matches(e);
    });
  }, $t.prototype.filter = function (e) {
    return Array.isArray(e) ? this.items.filter(function (t) {
      return e.some(function (e) {
        return t.matches(e);
      });
    }) : this.items.filter(function (t) {
      return t.matches(e);
    });
  }, $t.prototype.map = function (e) {
    return this.items.map(e);
  }, $t.prototype.remove = function (e) {
    var t = null;if (!(t = e instanceof Dt ? e : this.find(e))) return null;var r = this.items.indexOf(t);return this.items.splice(r, 1), t;
  }, $t.prototype.push = function (e) {
    if (!(e instanceof Dt)) throw Qe("FieldBag only accepts instances of Field that has an id defined.");if (!e.id) throw Qe("Field id must be defined.");if (this.find({ id: e.id })) throw Qe("Field with id " + e.id + " is already added.");this.items.push(e);
  }, Object.defineProperties($t.prototype, Tt);var _t = {},
      Mt = "en",
      xt = !0,
      At = new gt({ en: { messages: {}, attributes: {}, custom: {} } }),
      Ot = function Ot(e, t) {
    var r = this;void 0 === t && (t = { vm: null, fastExit: !0 }), this.strict = xt, this.errors = new vt(), this.fields = new $t(), this.flags = {}, this._createFields(e), this.paused = !1, this.fastExit = t.fastExit || !1, this.ownerId = t.vm && t.vm._uid, this.reset = t.vm && Ke(t.vm.$nextTick) ? function () {
      t.vm.$nextTick(function () {
        r.fields.items.forEach(function (e) {
          return e.reset();
        }), r.errors.clear();
      });
    } : function () {
      r.fields.items.forEach(function (e) {
        return e.reset();
      }), r.errors.clear();
    }, this.clean = function () {
      Xe("validator.clean is marked for deprecation, please use validator.reset instead."), r.reset();
    };
  },
      Lt = { dictionary: {}, locale: {}, rules: {} },
      Ft = { dictionary: {}, locale: {}, rules: {} };Lt.dictionary.get = function () {
    return At;
  }, Ft.dictionary.get = function () {
    return At;
  }, Lt.locale.get = function () {
    return Mt;
  }, Lt.locale.set = function (e) {
    Ot.locale = e;
  }, Ft.locale.get = function () {
    return Mt;
  }, Ft.locale.set = function (e) {
    At.hasLocale(e) || Xe("You are setting the validator locale to a locale that is not defined in the dictionary. English messages may still be generated."), Mt = e;
  }, Lt.rules.get = function () {
    return _t;
  }, Ft.rules.get = function () {
    return _t;
  }, Ot.create = function (e, t) {
    return new Ot(e, t);
  }, Ot.extend = function (e, t) {
    Ot._guardExtend(e, t), Ot._merge(e, t);
  }, Ot.remove = function (e) {
    delete _t[e];
  }, Ot.setLocale = function (e) {
    void 0 === e && (e = "en"), Ot.locale = e;
  }, Ot.installDateTimeValidators = function () {
    Xe("Date validations are now installed by default, you no longer need to install it.");
  }, Ot.prototype.installDateTimeValidators = function () {
    Xe("Date validations are now installed by default, you no longer need to install it.");
  }, Ot.setStrictMode = function (e) {
    void 0 === e && (e = !0), xt = e;
  }, Ot.updateDictionary = function (e) {
    At.merge(e);
  }, Ot.addLocale = function (e) {
    if (e.name) {
      this.updateDictionary((t = {}, t[e.name] = e, t));var t;
    } else Xe("Your locale must have a name property");
  }, Ot.prototype.addLocale = function (e) {
    Ot.addLocale(e);
  }, Ot.prototype.localize = function (e, t) {
    Ot.localize(e, t);
  }, Ot.localize = function (e, t) {
    t && (t = at({}, t, { name: e }), Ot.addLocale(t)), Ot.locale = e;
  }, Ot.prototype.attach = function (e) {
    arguments.length > 1 && (e = at({}, { name: arguments[0], rules: arguments[1] }, arguments[2] || { vm: { $validator: this } }));var t = e.initialValue;return e instanceof Dt || (e = new Dt(e.el || null, e)), this.fields.push(e), e.initial ? this.validate("#" + e.id, t || e.value) : this._validate(e, t || e.value, !0).then(function (t) {
      e.flags.valid = t, e.flags.invalid = !t;
    }), this._addFlag(e, e.scope), e;
  }, Ot.prototype.flag = function (e, t) {
    var r = this._resolveField(e);r && t && r.setFlags(t);
  }, Ot.prototype.detach = function (e, t) {
    var r = e instanceof Dt ? e : this._resolveField(e, t);if (r) {
      r.destroy(), this.errors.remove(r.name, r.scope, r.id), this.fields.remove(r);var n = this.flags;!ze(r.scope) && n["$" + r.scope] ? delete n["$" + r.scope][r.name] : ze(r.scope) && delete n[r.name], this.flags = at({}, n);
    }
  }, Ot.prototype.extend = function (e, t) {
    Ot.extend(e, t);
  }, Ot.prototype.update = function (e, t) {
    var r = t.scope,
        n = this._resolveField("#" + e);this.errors.update(e, { scope: r }), !ze(n.scope) && this.flags["$" + n.scope] ? delete this.flags["$" + n.scope][n.name] : ze(n.scope) && delete this.flags[n.name], this._addFlag(n, r);
  }, Ot.prototype.remove = function (e) {
    Ot.remove(e);
  }, Ot.prototype.setLocale = function (e) {
    this.locale = e;
  }, Ot.prototype.updateDictionary = function (e) {
    Ot.updateDictionary(e);
  }, Ot.prototype.validate = function (e, t, r) {
    if (void 0 === r && (r = null), this.paused) return Promise.resolve(!0);if (0 === arguments.length) return this.validateScopes();if (1 === arguments.length && "*" === arguments[0]) return this.validateAll();if (1 === arguments.length && "string" == typeof arguments[0] && /^(.+)\.\*$/.test(arguments[0])) {
      var n = arguments[0].match(/^(.+)\.\*$/)[1];return this.validateAll(n);
    }var i = this._resolveField(e, r);if (!i) return this._handleFieldNotFound(e, r);this.errors.remove(i.name, i.scope, i.id), i.flags.pending = !0, 1 === arguments.length && (t = i.value);var a = i.isDisabled;return this._validate(i, t, a).then(function (e) {
      return i.setFlags({ pending: !1, valid: e, validated: !0 }), a ? Promise.resolve(!0) : e;
    });
  }, Ot.prototype.pause = function () {
    return this.paused = !0, this;
  }, Ot.prototype.resume = function () {
    return this.paused = !1, this;
  }, Ot.prototype.validateAll = function (e) {
    var t = arguments,
        r = this;if (this.paused) return Promise.resolve(!0);var n = null,
        i = !1;"string" == typeof e ? n = { scope: e } : Je(e) ? (n = Object.keys(e).map(function (e) {
      return { name: e, scope: t[1] || null };
    }), i = !0) : 0 === arguments.length && (n = { scope: null });var a = this.fields.filter(n).map(function (t) {
      return r.validate("#" + t.id, i ? e[t.name] : t.value);
    });return Promise.all(a).then(function (e) {
      return e.every(function (e) {
        return e;
      });
    });
  }, Ot.prototype.validateScopes = function () {
    var e = this;if (this.paused) return Promise.resolve(!0);var t = this.fields.map(function (t) {
      return e.validate("#" + t.id, t.value);
    });return Promise.all(t).then(function (e) {
      return e.every(function (e) {
        return e;
      });
    });
  }, Ot.prototype._createFields = function (e) {
    var t = this;e && Object.keys(e).forEach(function (r) {
      var n = at({}, { name: r, rules: e[r] });t.attach(n);
    });
  }, Ot.prototype._getDateFormat = function (e) {
    var t = null;return e.date_format && Array.isArray(e.date_format) && (t = e.date_format[0]), t || this.dictionary.getDateFormat(this.locale);
  }, Ot.prototype._isADateRule = function (e) {
    return !!~["after", "before", "date_between", "date_format"].indexOf(e);
  }, Ot.prototype._formatErrorMessage = function (e, t, r, n) {
    void 0 === r && (r = {}), void 0 === n && (n = null);var i = this._getFieldDisplayName(e),
        a = this._getLocalizedParams(t, n);if (!this.dictionary.hasLocale(Mt)) {
      var o = this.dictionary.getFieldMessage("en", e.name, t.name);return Ke(o) ? o(i, a, r) : o;
    }var s = this.dictionary.getFieldMessage(Mt, e.name, t.name);return Ke(s) ? s(i, a, r) : s;
  }, Ot.prototype._getLocalizedParams = function (e, t) {
    return void 0 === t && (t = null), ~["after", "before", "confirmed"].indexOf(e.name) && e.params && e.params[0] ? [t || this.dictionary.getAttribute(Mt, e.params[0], e.params[0])].concat(e.params.slice(1)) : e.params;
  }, Ot.prototype._getFieldDisplayName = function (e) {
    return e.displayName || this.dictionary.getAttribute(Mt, e.name, e.name);
  }, Ot.prototype._addFlag = function (e, t) {
    if (void 0 === t && (t = null), ze(t)) {
      this.flags = at({}, this.flags, (r = {}, r["" + e.name] = e.flags, r));var r;
    } else {
      var n,
          i = at({}, this.flags["$" + t] || {}, (n = {}, n["" + e.name] = e.flags, n));this.flags = at({}, this.flags, (a = {}, a["$" + t] = i, a));var a;
    }
  }, Ot.prototype._test = function (e, t, r, n) {
    var i = this,
        a = _t[r.name],
        o = Array.isArray(r.params) ? it(r.params) : [],
        s = null;if (!a || "function" != typeof a) throw Qe("No such validator '" + r.name + "' exists.");if (/(confirmed|after|before)/.test(r.name)) {
      var u = st(e.dependencies, function (e) {
        return e.name === r.name;
      });u && (s = u.field.displayName, o = [u.field.value].concat(o.slice(1)));
    } else "required" === r.name && e.rejectsFalse && (o = o.length ? o : [!0]);if (this._isADateRule(r.name)) {
      var l = this._getDateFormat(e.rules);"date_format" !== r.name && o.push(l);
    }var c = a(t, o);return Ke(c.then) ? c.then(function (t) {
      var a = !0,
          o = {};return Array.isArray(t) ? a = t.every(function (e) {
        return Je(e) ? e.valid : e;
      }) : (a = Je(t) ? t.valid : t, o = t.data), a || n || i.errors.add({ id: e.id, field: e.name, msg: i._formatErrorMessage(e, r, o, s), rule: r.name, scope: e.scope }), a;
    }) : (Je(c) || (c = { valid: c, data: {} }), c.valid || n || this.errors.add({ id: e.id, field: e.name, msg: this._formatErrorMessage(e, r, c.data, s), rule: r.name, scope: e.scope }), c.valid);
  }, Ot._merge = function (e, t) {
    Ke(t) ? _t[e] = t : (_t[e] = t.validate, Ke(t.getMessage) && At.setMessage(Mt, e, t.getMessage), t.messages && At.merge(Object.keys(t.messages).reduce(function (r, n) {
      var i = r;i[n] = { messages: (a = {}, a[e] = t.messages[n], a) };var a;return i;
    }, {})));
  }, Ot._guardExtend = function (e, t) {
    if (!Ke(t)) {
      if (!Ke(t.validate)) throw Qe("Extension Error: The validator '" + e + "' must be a function or have a 'validate' method.");if (!Ke(t.getMessage) && !Je(t.messages)) throw Qe("Extension Error: The validator '" + e + "' must have a 'getMessage' method or have a 'messages' object.");
    }
  }, Ot.prototype._resolveField = function (e, t) {
    if (!ze(t)) return this.fields.find({ name: e, scope: t });if ("#" === e[0]) return this.fields.find({ id: e.slice(1) });if (e.indexOf(".") > -1) {
      var r = e.split("."),
          n = r[0],
          i = r.slice(1),
          a = this.fields.find({ name: i.join("."), scope: n });if (a) return a;
    }return this.fields.find({ name: e, scope: null });
  }, Ot.prototype._handleFieldNotFound = function (e, t) {
    if (!this.strict) return Promise.resolve(!0);var r = ze(t) ? e : (ze(t) ? "" : t + ".") + e;throw Qe('Validating a non-existant field: "' + r + '". Use "attach()" first.');
  }, Ot.prototype._validate = function (e, t, r) {
    var n = this;if (void 0 === r && (r = !1), !e.isRequired && (ze(t) || "" === t)) return Promise.resolve(!0);var i = [],
        a = !1;return Object.keys(e.rules).some(function (o) {
      var s = n._test(e, t, { name: o, params: e.rules[o] }, r);if (Ke(s.then)) i.push(s);else if (n.fastExit && !s) a = !0;else {
        var u = new Promise(function (e) {
          e(s);
        });i.push(u);
      }return a;
    }), a ? Promise.resolve(!1) : Promise.all(i).then(function (e) {
      return e.every(function (e) {
        return e;
      });
    });
  }, Object.defineProperties(Ot.prototype, Lt), Object.defineProperties(Ot, Ft);var Ct,
      St = function (e, t) {
    return "undefined" == typeof Proxy ? e : new Proxy(e, t);
  }({}, { get: function get(e, t) {
      return 0 === String(t).indexOf("$") ? St : { untouched: !0, touched: !1, dirty: !1, pristine: !0, valid: null, invalid: null, validated: !1, pending: !1, required: !1 };
    } }),
      Yt = function Yt(e) {
    return !!e && (!(!Array.isArray(e) || !~e.indexOf("$validator")) || !(!Je(e) || !e.$validator));
  },
      Nt = function Nt(e, t) {
    return new Ot(null, { vm: e, fastExit: t.fastExit });
  },
      Et = function Et(e, t) {
    void 0 === t && (t = {});var r = {};return r.provide = function () {
      return this.$validator ? { $validator: this.$validator } : {};
    }, r.beforeCreate = function () {
      this.$options.$validates && (Xe('The ctor $validates option has been deprecated please set the $_veeValidate.validator option to "new" instead'), this.$validator = Nt(this, t)), (!this.$parent || this.$options.$_veeValidate && /new/.test(this.$options.$_veeValidate.validator)) && (this.$validator = Nt(this, t));var r = Yt(this.$options.inject);this.$validator || !t.inject || r || (this.$validator = Nt(this, t)), (r || this.$validator) && (!r && this.$validator && (e.util.defineReactive(this.$validator, "errors", this.$validator.errors), e.util.defineReactive(this.$validator, "flags", this.$validator.flags)), this.$options.computed || (this.$options.computed = {}), this.$options.computed[t.errorBagName || "errors"] = function () {
        return this.$validator.errors;
      }, this.$options.computed[t.fieldsBagName || "fields"] = function () {
        return Object.keys(this.$validator.flags).length ? this.$validator.flags : St;
      });
    }, r.beforeDestroy = function () {
      this.$validator && this.$validator.ownerId === this._uid && Ke(this.$validator.pause) && this.$validator.pause();
    }, r;
  },
      kt = { locale: "en", delay: 0, errorBagName: "errors", dictionary: null, strict: !0, fieldsBagName: "fields", classes: !1, classNames: void 0, events: "input|blur", inject: !0, fastExit: !0, aria: !0, validity: !1 },
      Ut = function Ut(e, t) {
    return t && t.$validator ? t.$validator.fields.find({ id: He(e, "id") }) : null;
  },
      jt = function jt(e) {
    return e = at({}, kt, e), { bind: function bind(t, r, n) {
        var i = n.context.$validator;if (i) {
          var a = yt.generate(t, r, n, e);i.attach(a);
        } else Xe("No validator instance is present on vm, did you forget to inject '$validator'?");
      }, inserted: function inserted(e, t, r) {
        var n = Ut(e, r.context),
            i = yt.resolveScope(e, t, r);n && i !== n.scope && (n.update({ scope: i }), n.updated = !1);
      }, update: function update(e, t, r) {
        var n = Ut(e, r.context);if (!(!n || n.updated && We(t.value, t.oldValue))) {
          var i = yt.resolveScope(e, t, r),
              a = yt.resolveRules(e, t);n.update({ scope: i, rules: a });
        }
      }, unbind: function unbind(e, t, r) {
        var n = r.context,
            i = Ut(e, n);i && n.$validator.detach(i);
      } };
  },
      Zt = function Zt(e) {
    return Array.isArray(e) ? e.reduce(function (e, t) {
      return ~t.indexOf(".") ? e[t.split(".")[1]] = t : e[t] = t, e;
    }, {}) : e;
  },
      Ht = { install: function install(e, t) {
      if (void 0 === t && (t = {}), Ct) Xe("already installed, Vue.use(VeeValidate) should only be called once.");else {
        Ct = e;var r = at({}, kt, t);r.dictionary && Ot.updateDictionary(r.dictionary), t && (t.locale && (Ot.locale = t.locale), t.strict && Ot.setStrictMode(r.strict)), Ct.mixin(Et(Ct, r)), Ct.directive("validate", jt(r));
      }
    }, use: function use(e, t) {
      if (void 0 === t && (t = {}), !Ke(e)) return Xe("The plugin must be a callable function");e({ Validator: Ot, ErrorBag: vt, Rules: Ot.rules }, t);
    }, mapFields: function mapFields(e) {
      var t = Zt(e);return Object.keys(t).reduce(function (e, r) {
        var n = t[r];return e[r] = function () {
          if (this.$validator.flags[n]) return this.$validator.flags[n];if (n.indexOf(".") <= 0) return {};var e = n.split("."),
              t = e[0],
              r = e.slice(1);return t = this.$validator.flags["$" + t], r = r.join("."), t && t[r] ? t[r] : {};
        }, e;
      }, {});
    }, Validator: Ot, ErrorBag: vt, version: "2.0.0-rc.19" };return Ht.use(function (e) {
    var t = e.Validator;Object.keys(dt).forEach(function (e) {
      t.extend(e, dt[e]);
    }), t.localize("en", { messages: mt });
  }), Ht.Rules = dt, Ht;
});

/***/ }),

/***/ 110:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Vue = __webpack_require__(3);
var TweenMax = __webpack_require__(19).TweenMax;
// const $ = require('jquery');

// Template
var template = __webpack_require__(375);

var Loading = Vue.component('loading', {
  template: template,

  methods: {
    onEnter: function onEnter(el, done) {
      done();
    },
    onLeave: function onLeave(el, done) {
      TweenMax.to(el, 1, {
        ease: 'Power3',
        opacity: 0,
        onComplete: function onComplete() {
          el.setAttribute('style', '');
          done();
        }
      });
    }
  }
});

module.exports = Loading;

/***/ }),

/***/ 111:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Vue = __webpack_require__(3);
var $ = __webpack_require__(2);
var iswebview = __webpack_require__(27);

// Template
var template = __webpack_require__(376);
var store = __webpack_require__(32);

var Filters = Vue.component('filters', {
  template: template,
  data: function data() {
    return {
      sharedState: store,
      clickedAmenity: false
    };
  },

  mounted: function mounted() {
    if (this.getQueryKeyword() == "city" && this.getQueryParam("sort") != 'Rating' && this.getQueryParam("sort") != 'Rate-High' && this.getQueryParam("sort") != 'Rate-Low') {
      $('.filter-radio li input#distance').prop('checked', true);
    } else if (this.getQueryParam('sort').length > 0) {
      $('.filter-radio li input.' + this.getQueryParam('sort')).prop('checked', true);
    }

    if (this.getQueryKeyword() == "city") {
      this.sharedState.searchType = 'city';
    } else if (this.getQueryKeyword() == "state") {
      this.sharedState.searchType = 'state';
    } else if (this.getQueryKeyword() == "country") {
      this.sharedState.searchType = 'country';
    } else {
      this.sharedState.searchType = 'property';
    }
  },

  methods: {
    getQueryKeyword: function getQueryKeyword() {
      var query = window.location.search.substring(1);
      var vars = query.split("&");
      var pair = vars[0].split("=");
      var firstVarsVal = pair[0];

      return firstVarsVal;
    },
    getQueryParam: function getQueryParam(variable) {
      var query = window.location.search.substring(1);
      var vars = query.split("&");
      for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split("=");
        if (pair[0] == variable) {
          return pair[1];
        }
      }
      return false;
    },

    close: function close() {
      this.sharedState.showFilters = false;
      $('body').removeClass('no-scroll');

      var cities = [];
      var states = [];
      var hotels = [];
      var hotelsbrands = [];
      var hiLowContent = 0;

      if (store.propertiesitems.length > 0) {
        store.propertiesitems.forEach(function (element) {
          hotels.push(element.engineid);

          var brandsindex = hotelsbrands.indexOf(element.brand.record.code);
          if (brandsindex === -1) {
            hotelsbrands.push(element.brand.record.code);
          }

          var citiesindex = cities.indexOf(element.city);
          if (citiesindex === -1) {
            cities.push(element.city);
          }

          if (!$.isEmptyObject(element.state)) {
            var statesindex = states.indexOf(element.state);
            if (statesindex === -1) {
              states.push(element.state);
            }
          }
        });
      }

      var hotelsString = hotels.join('|');
      var hotelsbrandsString = hotelsbrands.join('|');
      var citiesString = cities.join('|');
      var statesString = states.join('|');

      if (store.travelGuideitems.length > 0) {
        if (store.travelGuideitems.attraction.length > 0) {
          hiLowContent = '1';
        } else {
          hiLowContent = '0';
        }
      } else {
        hiLowContent = '0';
      }

      var promocode = [];
      var promocodetype = [];
      if (store.promocodes.codes.length > 0) {
        store.promocodes.codes.forEach(function (promo) {
          promocode.push(promo.code);
          promocodetype.push(promo.name);
        });
      }

      var promoNames = promocode.join('|');
      var promoTypes = promocodetype.join('|');

      var searchLoc = '';
      if (store.searchType == 'state' || store.searchType == 'city' || store.searchType == 'country') {
        searchLoc = 'Location';
      } else if (store.searchType == 'attraction') {
        searchLoc = 'Attraction';
      } else if (store.searchType == 'airport') {
        searchLoc = 'Airport';
      }

      var searchResults = 0;
      if (store.brand == true) {
        if (store.brandpropertiesitems.length < 1 && store.othercarlsonproperties.length < 1 && store.propertiesitems.length < 1) {
          searchResults = 0;
        }
      } else {
        if (store.propertiesitems.length < 1) {
          searchResults = 0;
        }
      }

      var webViewString;
      if (iswebview(navigator.userAgent)) {
        webViewString = 'Yes|' + this.getMobileOperatingSystem();
      } else {
        webViewString = 'No';
      }

      var facilitator = '';
      if (this.getQueryParam("facilitator") || this.getQueryParam("facilitatorId") || this.getQueryParam("faciliatatorID") || this.getQueryParam("facilitatorid") || this.getQueryParam("facilitatorID")) {
        facilitator = this.getQueryParam("facilitator") || this.getQueryParam("facilitatorId") || this.getQueryParam("faciliatatorID") || this.getQueryParam("facilitatorid") || this.getQueryParam("facilitatorID");
      }
      this.facilitator = facilitator;

      var self = this;
      window.utag.view({
        'page.pageInfo.pageName': store.pageInfo.pageName,
        'page.pageInfo.pagePath': store.pageInfo.pagePath,
        'page.pageInfo.destinationURL': store.pageInfo.destinationURL,
        'page.pageInfo.referringURL': store.pageInfo.referringURL,
        'page.pageInfo.language': store.pageInfo.language,
        'page.pageInfo.geoRegion': store.pageInfo.geoRegion,
        'page.pageInfo.systemEnv': store.pageInfo.systemEnv,
        'page.pageInfo.effectiveDate': store.pageInfo.effectiveDate,
        'page.pageInfo.primaryCategory': 'Search',
        'page.pageInfo.dayOfWeek': store.pageInfo.dayOfWeek,
        'page.pageInfo.timeOfDay': store.pageInfo.timeOfDay,
        'page.pageInfo.timeZone': store.pageInfo.timezone,
        'page.pageInfo.brand': store.brandInfo.slug,
        'page.pageInfo.facilitatorID': store.facilitator,
        'page.pageInfo.currencyCode': store.pageInfo.currencyCode,
        'page.pageInfo.bvCode': store.pageInfo.bvCode,
        'page.pageInfo.isWebview': webViewString,
        'user.userInfo.userID': store.userInfo.userId,
        'user.userInfo.loyaltyTier': store.userInfo.userLoyaltyTier,
        'search.term': store.keywordParam,
        'search.searchCity': citiesString,
        'search.searchState': statesString,
        'search.searchCountry': store.searchCountry,
        'search.rateCodeSearchType': promoNames,
        'search.rateCodeSearchID': promoTypes,
        'search.searchDimension': searchLoc,
        'search.searchHotelCode': hotelsString,
        'search.searchHotelBrand': hotelsbrandsString,
        'search.contentType': hiLowContent,
        'search.noSearchResults': searchResults
      });
    },
    getMobileOperatingSystem: function getMobileOperatingSystem() {
      var userAgent = navigator.userAgent || navigator.vendor || window.opera;
      if (/windows phone|IEMobile/i.test(userAgent)) {
        return 'Windows';
      } else if (/Android/i.test(userAgent)) {
        return 'Android';
      } else if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
        return 'iOS';
      } else if (/Opera Mini/i.test(userAgent)) {
        return 'Opera';
      } else if (/BlackBerry/i.test(userAgent)) {
        return 'BlackBerry';
      } else {
        return 'Unknown';
      }
    },
    apply: function apply(event) {
      event.preventDefault();
      this.sharedState.showFilters = false;
      $('body').removeClass('no-scroll');

      var rebuildParam;
      if (this.sharedState.params.indexOf('sort') !== -1) {
        rebuildParam = this.sharedState.params.split('&sort')[0];
      } else if (this.sharedState.params.indexOf('sort') < 0 && this.sharedState.params.indexOf('amenities') !== -1) {
        rebuildParam = this.sharedState.params.split('&amenities')[0];
      } else if (this.sharedState.params.indexOf('sort') < 0 && this.sharedState.params.indexOf('brands') !== -1) {
        rebuildParam = this.sharedState.params.split('&brands')[0];
      } else {
        rebuildParam = this.sharedState.params;
      }
      this.sharedState.params = rebuildParam;

      var rebuildBrandsParam;
      if (this.sharedState.brandsparams.indexOf('brands') !== -1) {
        rebuildBrandsParam = this.sharedState.brandsparams.split('&brands')[0];
      } else {
        rebuildBrandsParam = this.sharedState.brandsparams;
      }
      this.sharedState.brandsparams = rebuildBrandsParam;

      if ($('.filter-radio #distance').is(':checked')) {
        this.sharedState.params = this.sharedState.params + '&sort=Distance';
      } else if ($('.filter-radio #rating').is(':checked')) {
        this.sharedState.params = this.sharedState.params + '&sort=Rating';
      } else if ($('.filter-radio #price-high').is(':checked')) {
        this.sharedState.params = this.sharedState.params + '&sort=Rate-High';
      } else if ($('.filter-radio #price-low').is(':checked')) {
        this.sharedState.params = this.sharedState.params + '&sort=Rate-Low';
      }

      var amenitiesParamsArray1 = this.sharedState.amenitiesIds[0];
      var amenitiesParams1 = [];

      var amenitiesParamsArray = this.sharedState.amenitiesIds;
      var amenitiesParams = [];

      if (amenitiesParamsArray.length > 1 && amenitiesParamsArray1.length === 1) {
        $.each(amenitiesParamsArray, function (index, id) {
          amenitiesParams1 += '&amenities[' + index + ']=' + id;
        });
        this.sharedState.params = this.sharedState.params + amenitiesParams1;
      } else {
        //if ( amenitiesParamsArray1.length > 1) {
        if (amenitiesParamsArray1) {
          $.each(amenitiesParamsArray, function (index, id) {
            amenitiesParams += '&amenities[' + index + ']=' + id;
          });
          this.sharedState.params = this.sharedState.params + amenitiesParams;
        }
      }

      var brandsParamsArray1 = this.sharedState.branditemsCodes[0];
      var brandsParams1 = [];

      var brandsParamsArray = this.sharedState.branditemsCodes;
      var brandsParams = [];

      if (brandsParamsArray.length > 1 && brandsParamsArray1.length === 1) {
        $.each(brandsParamsArray, function (index, code) {
          brandsParams1 += '&brands[' + index + ']=' + code;
        });
        this.sharedState.brandparams = this.sharedState.brandsparams + brandsParams1;
      } else {
        if (brandsParamsArray1) {
          $.each(brandsParamsArray, function (index, code) {
            brandsParams += '&brands[' + index + ']=' + code;
          });
          this.sharedState.brandsparams = this.sharedState.brandsparams + brandsParams;
        }
      }

      $('.wrapper').removeClass('no-scroll');

      setTimeout(function () {
        var cities = [];
        var states = [];
        var hotels = [];
        var hotelsbrands = [];

        var hiLowContent = 0;

        if (store.brand == true) {
          //if it's a brand search
          if (store.brandpropertiesitems.length > 0) {
            store.brandpropertiesitems.forEach(function (element) {
              hotels.push(element.engineid);

              var brandsindex = hotelsbrands.indexOf(element.brand.record.code);
              if (brandsindex === -1) {
                hotelsbrands.push(element.brand.record.code);
              }

              var citiesindex = cities.indexOf(element.city);
              if (citiesindex === -1) {
                cities.push(element.city);
              }

              var statesindex = states.indexOf(element.state);
              if (statesindex === -1) {
                states.push(element.state);
              }
            });
          }

          if (store.othercarlsonproperties.length > 0) {
            store.othercarlsonproperties.forEach(function (element) {
              hotels.push(element.engineid);

              var brandsindex = hotelsbrands.indexOf(element.brand.record.code);
              if (brandsindex === -1) {
                hotelsbrands.push(element.brand.record.code);
              }

              var citiesindex = cities.indexOf(element.city);
              if (citiesindex === -1) {
                cities.push(element.city);
              }

              var statesindex = states.indexOf(element.state);
              if (statesindex === -1) {
                states.push(element.state);
              }
            });
          }
        } else {
          if (store.propertiesitems.length > 0) {
            store.propertiesitems.forEach(function (element) {
              hotels.push(element.engineid);

              var brandsindex = hotelsbrands.indexOf(element.brand.record.code);
              if (brandsindex === -1) {
                hotelsbrands.push(element.brand.record.code);
              }

              var citiesindex = cities.indexOf(element.city);
              if (citiesindex === -1) {
                cities.push(element.city);
              }

              if (!$.isEmptyObject(element.state)) {
                var statesindex = states.indexOf(element.state);
                if (statesindex === -1) {
                  states.push(element.state);
                }
              }
            });
          }
        }

        var hotelsString = hotels.join('|');
        var hotelsbrandsString = hotelsbrands.join('|');
        var citiesString = cities.join('|');
        var statesString = states.join('|');

        if (store.travelGuideitems.length > 0) {
          if (store.travelGuideitems.attraction.length > 0) {
            hiLowContent = '1';
          } else {
            hiLowContent = '0';
          }
        } else {
          hiLowContent = '0';
        }

        var filters = [];
        var filtersCategory = [];

        store.amenitiesitems.forEach(function (element) {
          if (element.name !== 'undefined') {
            filters.push(element.name);
            filtersCategory.push(element.parentCategory);
          }
        });

        store.branditems.forEach(function (element) {
          if (element.name !== 'undefined') {
            filters.push(element.name);

            var index = filtersCategory.indexOf('Hotel Brand');
            if (index === -1) {
              filtersCategory.push('Hotel Brand');
            }
          }
        });

        var filtersString = filters.join('|');
        var filtersCatString = filtersCategory.join('|');

        var promocode = [];
        var promocodetype = [];
        if (store.promocodes.codes.length > 0) {
          store.promocodes.codes.forEach(function (promo) {
            promocode.push(promo.code);
            promocodetype.push(promo.name);
          });
        }

        var promoNames = promocode.join('|');
        var promoTypes = promocodetype.join('|');

        var searchLoc = '';
        if (store.searchType == 'state' || store.searchType == 'city' || store.searchType == 'country') {
          searchLoc = 'Location';
        } else if (store.searchType == 'attraction') {
          searchLoc = 'Attraction';
        } else if (store.searchType == 'airport') {
          searchLoc = 'Airport';
        }

        var searchResults = 0;
        if (store.brand == true) {
          if (store.brandpropertiesitems.length < 1 && store.othercarlsonproperties.length < 1 && store.propertiesitems.length < 1) {
            searchResults = 0;
          }
        } else {
          if (store.propertiesitems.length < 1) {
            searchResults = 0;
          }
        }

        window.utag.link({
          'search.term': store.keywordParam,
          'search.searchCity': citiesString,
          'search.searchState': statesString,
          'search.searchCountry': store.searchCountry,
          'search.rateCodeSearchType': promoNames,
          'search.rateCodeSearchID': promoTypes,
          'search.searchDimension': searchLoc,
          'search.searchHotelCode': hotelsString,
          'search.searchHotelBrand': hotelsbrandsString,
          'search.contentType': hiLowContent,
          'search.searchRefinementType': filtersCatString,
          'search.searchRefinementSelection': filtersString,
          'search.noSearchResults': searchResults,
          'eventInfo.eventName': 'Successful Search Refinement'
        });
      }, 4000);
    },

    getQueryVariable: function getQueryVariable() {
      var query = window.location.search.substring(1);
      return query;
    },

    toggleAmenity: function toggleAmenity(amenity) {
      var amenityItems = amenity;
      var demAmenities = this.sharedState.amenitiesitems;

      var amenityIndex = -1;
      for (var i = 0; i < demAmenities.length; ++i) {
        if (demAmenities[i]['@attributes'].id == amenity['@attributes'].id) {
          amenityIndex = i;
          break;
        }
      }

      if (amenityIndex === -1) {
        this.sharedState.amenitiesIds.push(amenity['@attributes'].id);
        this.sharedState.amenitiesitems.push(amenityItems);
        return;
      }

      // is added, need to remove
      this.sharedState.amenitiesIds.splice(amenityIndex, 1);
      this.sharedState.amenitiesitems.splice(amenityIndex, 1);
    },

    getAmenityIndex: function getAmenityIndex(amenity) {
      return this.sharedState.amenitiesIds.indexOf(amenity['@attributes'].id);
    },

    toggleBrand: function toggleBrand(brand) {
      var brandItems = brand;
      var demBrands = this.sharedState.branditems;

      var brandIndex = -1;
      for (var i = 0; i < demBrands.length; ++i) {
        if (demBrands[i].code == brand.code) {
          brandIndex = i;
          break;
        }
      }

      if (brandIndex === -1) {
        this.sharedState.branditemsCodes.push(brand.code);
        this.sharedState.branditems.push(brandItems);
        return;
      }

      // is added, need to remove
      this.sharedState.branditemsCodes.splice(brandIndex, 1);
      this.sharedState.branditems.splice(brandIndex, 1);
    },

    getBrandsIndex: function getBrandsIndex(brand) {
      return this.sharedState.branditemsCodes.indexOf(brand.code);
    },

    reset: function reset() {
      if (this.sharedState.config.debug) {
        console.log("Reset filters");
      }
      this.sharedState.amenitiesIds = [];
      this.sharedState.amenitiesitems = [];

      this.sharedState.branditemsCodes = [];
      this.sharedState.branditems = [];

      $('.filter-radio li input').prop('checked', false);

      if ($('.filter-options .button').hasClass('active')) {
        $('.filter-options .button').removeClass('active').addClass('secondary');
      }
    },

    hotelCount: function hotelCount(item) {
      if (!this.sharedState.amenitiesitems.length) return item.number_of_hotels;

      // how many of this item's hotels are included in ALL amenitiesitems hotels
      var itemHotels = $.isArray(item.hotels.record) ? item.hotels.record : [item.hotels.record];
      var amenitiesitems = this.sharedState.amenitiesitems;
      var hotelCount = 0;

      // start by looping through each of this item's hotels
      itemHotels.forEach(function (itemHotel) {
        var hotelsIncluded = 0;

        // loop through each of the selected amenitiesitems
        amenitiesitems.forEach(function (amenitiesitem) {
          var hotels = $.isArray(amenitiesitem.hotels.record) ? amenitiesitem.hotels.record : [amenitiesitem.hotels.record];

          // if the amenitiesitem's hotels contains the item's hotel
          if (hotels.filter(function (hotel) {
            return hotel.id == itemHotel.id;
          }).length) hotelsIncluded++;
        });

        // the item's hotels needs to be in ALL amenitiesitems
        if (hotelsIncluded === amenitiesitems.length) hotelCount++;
      });

      return hotelCount;
    }
  }
});

module.exports = Filters;

/***/ }),

/***/ 112:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* globals DIMENSIONS */

var Vue = __webpack_require__(3);
// const $ = require('jquery');

/***example_html
 * 
 * <responsiveimage 
 *    v-if="propertiesitem.property_image['@attributes']" 
 *    :source-id="propertiesitem.property_image['@attributes'].id" 
 *    :source-image="propertiesitem.property_image.record" 
 *    :alttext="propertiesitem.name" picture="searchresults/card/property_image">
 * </responsiveimage>
 * 
**/

// Template
var template = __webpack_require__(113);

var ResponsiveImage = void 0;

ResponsiveImage = Vue.component('responsiveimage', {
  template: template,

  props: {
    sourceId: {
      type: String,
      required: true
    },
    sourceImage: {
      type: String,
      required: true
    },
    alttext: {
      type: String,
      required: true
    },
    picture: {
      type: String,
      required: true
    },
    source: {
      type: Array,
      default: function _default() {
        return [
        // BUG: Something is really strange with our image crops/cms
        { minWidth: '1080px', dimension: 'card-mobile-lg' }, { minWidth: '769px', dimension: 'card-mobile-lg' }, { minWidth: '375px', dimension: 'card-mobile-lg' }, { minWidth: '320px', dimension: 'card-mobile' }];
      }
    }
  },

  mounted: function mounted() {},

  methods: {
    getDimension: function getDimension(slug) {
      if (!DIMENSIONS) {
        return 0;
      }

      if (DIMENSIONS[slug]) {
        return DIMENSIONS[slug];
      } else {
        return 0;
      }
    }
  }
});

module.exports = ResponsiveImage;

/***/ }),

/***/ 113:
/***/ (function(module, exports) {

module.exports = "<picture v-if=\"sourceImage != '' && sourceId\">\n  <source v-for=\"image in source\" :media=\"`(min-width: ${image.minWidth})`\" :srcset=\"`/uploads/${sourceId}/${getDimension(image.dimension)}/${sourceImage}`\" />\n  <img itemprop=\"image\" :src=\"`/uploads/${sourceId}/0/${sourceImage}`\" :alt=\"alttext\" class=\"cover-img\" data-type=\"card-img\" :data-picture=\"picture\" />\n</picture>\n<div v-else class=\"no-image\" />\n";

/***/ }),

/***/ 16:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Fizzy UI utils v2.0.5
 * MIT license
 */

/*jshint browser: true, undef: true, unused: true, strict: true */

(function (window, factory) {
  // universal module definition
  /*jshint strict: false */ /*globals define, module, require */

  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(98)], __WEBPACK_AMD_DEFINE_RESULT__ = function (matchesSelector) {
      return factory(window, matchesSelector);
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('desandro-matches-selector'));
  } else {
    // browser global
    window.fizzyUIUtils = factory(window, window.matchesSelector);
  }
})(window, function factory(window, matchesSelector) {

  'use strict';

  var utils = {};

  // ----- extend ----- //

  // extends objects
  utils.extend = function (a, b) {
    for (var prop in b) {
      a[prop] = b[prop];
    }
    return a;
  };

  // ----- modulo ----- //

  utils.modulo = function (num, div) {
    return (num % div + div) % div;
  };

  // ----- makeArray ----- //

  // turn element or nodeList into an array
  utils.makeArray = function (obj) {
    var ary = [];
    if (Array.isArray(obj)) {
      // use object if already an array
      ary = obj;
    } else if (obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' && typeof obj.length == 'number') {
      // convert nodeList to array
      for (var i = 0; i < obj.length; i++) {
        ary.push(obj[i]);
      }
    } else {
      // array of single index
      ary.push(obj);
    }
    return ary;
  };

  // ----- removeFrom ----- //

  utils.removeFrom = function (ary, obj) {
    var index = ary.indexOf(obj);
    if (index != -1) {
      ary.splice(index, 1);
    }
  };

  // ----- getParent ----- //

  utils.getParent = function (elem, selector) {
    while (elem.parentNode && elem != document.body) {
      elem = elem.parentNode;
      if (matchesSelector(elem, selector)) {
        return elem;
      }
    }
  };

  // ----- getQueryElement ----- //

  // use element as selector string
  utils.getQueryElement = function (elem) {
    if (typeof elem == 'string') {
      return document.querySelector(elem);
    }
    return elem;
  };

  // ----- handleEvent ----- //

  // enable .ontype to trigger from .addEventListener( elem, 'type' )
  utils.handleEvent = function (event) {
    var method = 'on' + event.type;
    if (this[method]) {
      this[method](event);
    }
  };

  // ----- filterFindElements ----- //

  utils.filterFindElements = function (elems, selector) {
    // make array of elems
    elems = utils.makeArray(elems);
    var ffElems = [];

    elems.forEach(function (elem) {
      // check that elem is an actual element
      if (!(elem instanceof HTMLElement)) {
        return;
      }
      // add elem if no selector
      if (!selector) {
        ffElems.push(elem);
        return;
      }
      // filter & find items if we have a selector
      // filter
      if (matchesSelector(elem, selector)) {
        ffElems.push(elem);
      }
      // find children
      var childElems = elem.querySelectorAll(selector);
      // concat childElems to filterFound array
      for (var i = 0; i < childElems.length; i++) {
        ffElems.push(childElems[i]);
      }
    });

    return ffElems;
  };

  // ----- debounceMethod ----- //

  utils.debounceMethod = function (_class, methodName, threshold) {
    // original method
    var method = _class.prototype[methodName];
    var timeoutName = methodName + 'Timeout';

    _class.prototype[methodName] = function () {
      var timeout = this[timeoutName];
      if (timeout) {
        clearTimeout(timeout);
      }
      var args = arguments;

      var _this = this;
      this[timeoutName] = setTimeout(function () {
        method.apply(_this, args);
        delete _this[timeoutName];
      }, threshold || 100);
    };
  };

  // ----- docReady ----- //

  utils.docReady = function (callback) {
    var readyState = document.readyState;
    if (readyState == 'complete' || readyState == 'interactive') {
      // do async to allow for other scripts to run. metafizzy/flickity#441
      setTimeout(callback);
    } else {
      document.addEventListener('DOMContentLoaded', callback);
    }
  };

  // ----- htmlInit ----- //

  // http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
  utils.toDashed = function (str) {
    return str.replace(/(.)([A-Z])/g, function (match, $1, $2) {
      return $1 + '-' + $2;
    }).toLowerCase();
  };

  var console = window.console;
  /**
   * allow user to initialize classes via [data-namespace] or .js-namespace class
   * htmlInit( Widget, 'widgetName' )
   * options are parsed from data-namespace-options
   */
  utils.htmlInit = function (WidgetClass, namespace) {
    utils.docReady(function () {
      var dashedNamespace = utils.toDashed(namespace);
      var dataAttr = 'data-' + dashedNamespace;
      var dataAttrElems = document.querySelectorAll('[' + dataAttr + ']');
      var jsDashElems = document.querySelectorAll('.js-' + dashedNamespace);
      var elems = utils.makeArray(dataAttrElems).concat(utils.makeArray(jsDashElems));
      var dataOptionsAttr = dataAttr + '-options';
      var jQuery = window.jQuery;

      elems.forEach(function (elem) {
        var attr = elem.getAttribute(dataAttr) || elem.getAttribute(dataOptionsAttr);
        var options;
        try {
          options = attr && JSON.parse(attr);
        } catch (error) {
          // log error, do not initialize
          if (console) {
            console.error('Error parsing ' + dataAttr + ' on ' + elem.className + ': ' + error);
          }
          return;
        }
        // initialize
        var instance = new WidgetClass(elem, options);
        // make available via $().data('namespace')
        if (jQuery) {
          jQuery.data(elem, namespace, instance);
        }
      });
    });
  };

  // -----  ----- //

  return utils;
});

/***/ }),

/***/ 17:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Flickity main
(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(48), __webpack_require__(68), __webpack_require__(16), __webpack_require__(99), __webpack_require__(100), __webpack_require__(101)], __WEBPACK_AMD_DEFINE_RESULT__ = function (EvEmitter, getSize, utils, Cell, Slide, animatePrototype) {
      return factory(window, EvEmitter, getSize, utils, Cell, Slide, animatePrototype);
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('ev-emitter'), require('get-size'), require('fizzy-ui-utils'), require('./cell'), require('./slide'), require('./animate'));
  } else {
    // browser global
    var _Flickity = window.Flickity;

    window.Flickity = factory(window, window.EvEmitter, window.getSize, window.fizzyUIUtils, _Flickity.Cell, _Flickity.Slide, _Flickity.animatePrototype);
  }
})(window, function factory(window, EvEmitter, getSize, utils, Cell, Slide, animatePrototype) {

  'use strict';

  // vars

  var jQuery = window.jQuery;
  var getComputedStyle = window.getComputedStyle;
  var console = window.console;

  function moveElements(elems, toElem) {
    elems = utils.makeArray(elems);
    while (elems.length) {
      toElem.appendChild(elems.shift());
    }
  }

  // -------------------------- Flickity -------------------------- //

  // globally unique identifiers
  var GUID = 0;
  // internal store of all Flickity intances
  var instances = {};

  function Flickity(element, options) {
    var queryElement = utils.getQueryElement(element);
    if (!queryElement) {
      if (console) {
        console.error('Bad element for Flickity: ' + (queryElement || element));
      }
      return;
    }
    this.element = queryElement;
    // do not initialize twice on same element
    if (this.element.flickityGUID) {
      var instance = instances[this.element.flickityGUID];
      instance.option(options);
      return instance;
    }

    // add jQuery
    if (jQuery) {
      this.$element = jQuery(this.element);
    }
    // options
    this.options = utils.extend({}, this.constructor.defaults);
    this.option(options);

    // kick things off
    this._create();
  }

  Flickity.defaults = {
    accessibility: true,
    // adaptiveHeight: false,
    cellAlign: 'center',
    // cellSelector: undefined,
    // contain: false,
    freeScrollFriction: 0.075, // friction when free-scrolling
    friction: 0.28, // friction when selecting
    namespaceJQueryEvents: true,
    // initialIndex: 0,
    percentPosition: true,
    resize: true,
    selectedAttraction: 0.025,
    setGallerySize: true
    // watchCSS: false,
    // wrapAround: false
  };

  // hash of methods triggered on _create()
  Flickity.createMethods = [];

  var proto = Flickity.prototype;
  // inherit EventEmitter
  utils.extend(proto, EvEmitter.prototype);

  proto._create = function () {
    // add id for Flickity.data
    var id = this.guid = ++GUID;
    this.element.flickityGUID = id; // expando
    instances[id] = this; // associate via id
    // initial properties
    this.selectedIndex = 0;
    // how many frames slider has been in same position
    this.restingFrames = 0;
    // initial physics properties
    this.x = 0;
    this.velocity = 0;
    this.originSide = this.options.rightToLeft ? 'right' : 'left';
    // create viewport & slider
    this.viewport = document.createElement('div');
    this.viewport.className = 'flickity-viewport';
    this._createSlider();

    if (this.options.resize || this.options.watchCSS) {
      window.addEventListener('resize', this);
    }

    Flickity.createMethods.forEach(function (method) {
      this[method]();
    }, this);

    if (this.options.watchCSS) {
      this.watchCSS();
    } else {
      this.activate();
    }
  };

  /**
   * set options
   * @param {Object} opts
   */
  proto.option = function (opts) {
    utils.extend(this.options, opts);
  };

  proto.activate = function () {
    if (this.isActive) {
      return;
    }
    this.isActive = true;
    this.element.classList.add('flickity-enabled');
    if (this.options.rightToLeft) {
      this.element.classList.add('flickity-rtl');
    }

    this.getSize();
    // move initial cell elements so they can be loaded as cells
    var cellElems = this._filterFindCellElements(this.element.children);
    moveElements(cellElems, this.slider);
    this.viewport.appendChild(this.slider);
    this.element.appendChild(this.viewport);
    // get cells from children
    this.reloadCells();

    if (this.options.accessibility) {
      // allow element to focusable
      this.element.tabIndex = 0;
      // listen for key presses
      this.element.addEventListener('keydown', this);
    }

    this.emitEvent('activate');

    var index;
    var initialIndex = this.options.initialIndex;
    if (this.isInitActivated) {
      index = this.selectedIndex;
    } else if (initialIndex !== undefined) {
      index = this.cells[initialIndex] ? initialIndex : 0;
    } else {
      index = 0;
    }
    // select instantly
    this.select(index, false, true);
    // flag for initial activation, for using initialIndex
    this.isInitActivated = true;
  };

  // slider positions the cells
  proto._createSlider = function () {
    // slider element does all the positioning
    var slider = document.createElement('div');
    slider.className = 'flickity-slider';
    slider.style[this.originSide] = 0;
    this.slider = slider;
  };

  proto._filterFindCellElements = function (elems) {
    return utils.filterFindElements(elems, this.options.cellSelector);
  };

  // goes through all children
  proto.reloadCells = function () {
    // collection of item elements
    this.cells = this._makeCells(this.slider.children);
    this.positionCells();
    this._getWrapShiftCells();
    this.setGallerySize();
  };

  /**
   * turn elements into Flickity.Cells
   * @param {Array or NodeList or HTMLElement} elems
   * @returns {Array} items - collection of new Flickity Cells
   */
  proto._makeCells = function (elems) {
    var cellElems = this._filterFindCellElements(elems);

    // create new Flickity for collection
    var cells = cellElems.map(function (cellElem) {
      return new Cell(cellElem, this);
    }, this);

    return cells;
  };

  proto.getLastCell = function () {
    return this.cells[this.cells.length - 1];
  };

  proto.getLastSlide = function () {
    return this.slides[this.slides.length - 1];
  };

  // positions all cells
  proto.positionCells = function () {
    // size all cells
    this._sizeCells(this.cells);
    // position all cells
    this._positionCells(0);
  };

  /**
   * position certain cells
   * @param {Integer} index - which cell to start with
   */
  proto._positionCells = function (index) {
    index = index || 0;
    // also measure maxCellHeight
    // start 0 if positioning all cells
    this.maxCellHeight = index ? this.maxCellHeight || 0 : 0;
    var cellX = 0;
    // get cellX
    if (index > 0) {
      var startCell = this.cells[index - 1];
      cellX = startCell.x + startCell.size.outerWidth;
    }
    var len = this.cells.length;
    for (var i = index; i < len; i++) {
      var cell = this.cells[i];
      cell.setPosition(cellX);
      cellX += cell.size.outerWidth;
      this.maxCellHeight = Math.max(cell.size.outerHeight, this.maxCellHeight);
    }
    // keep track of cellX for wrap-around
    this.slideableWidth = cellX;
    // slides
    this.updateSlides();
    // contain slides target
    this._containSlides();
    // update slidesWidth
    this.slidesWidth = len ? this.getLastSlide().target - this.slides[0].target : 0;
  };

  /**
   * cell.getSize() on multiple cells
   * @param {Array} cells
   */
  proto._sizeCells = function (cells) {
    cells.forEach(function (cell) {
      cell.getSize();
    });
  };

  // --------------------------  -------------------------- //

  proto.updateSlides = function () {
    this.slides = [];
    if (!this.cells.length) {
      return;
    }

    var slide = new Slide(this);
    this.slides.push(slide);
    var isOriginLeft = this.originSide == 'left';
    var nextMargin = isOriginLeft ? 'marginRight' : 'marginLeft';

    var canCellFit = this._getCanCellFit();

    this.cells.forEach(function (cell, i) {
      // just add cell if first cell in slide
      if (!slide.cells.length) {
        slide.addCell(cell);
        return;
      }

      var slideWidth = slide.outerWidth - slide.firstMargin + (cell.size.outerWidth - cell.size[nextMargin]);

      if (canCellFit.call(this, i, slideWidth)) {
        slide.addCell(cell);
      } else {
        // doesn't fit, new slide
        slide.updateTarget();

        slide = new Slide(this);
        this.slides.push(slide);
        slide.addCell(cell);
      }
    }, this);
    // last slide
    slide.updateTarget();
    // update .selectedSlide
    this.updateSelectedSlide();
  };

  proto._getCanCellFit = function () {
    var groupCells = this.options.groupCells;
    if (!groupCells) {
      return function () {
        return false;
      };
    } else if (typeof groupCells == 'number') {
      // group by number. 3 -> [0,1,2], [3,4,5], ...
      var number = parseInt(groupCells, 10);
      return function (i) {
        return i % number !== 0;
      };
    }
    // default, group by width of slide
    // parse '75%
    var percentMatch = typeof groupCells == 'string' && groupCells.match(/^(\d+)%$/);
    var percent = percentMatch ? parseInt(percentMatch[1], 10) / 100 : 1;
    return function (i, slideWidth) {
      return slideWidth <= (this.size.innerWidth + 1) * percent;
    };
  };

  // alias _init for jQuery plugin .flickity()
  proto._init = proto.reposition = function () {
    this.positionCells();
    this.positionSliderAtSelected();
  };

  proto.getSize = function () {
    this.size = getSize(this.element);
    this.setCellAlign();
    this.cursorPosition = this.size.innerWidth * this.cellAlign;
  };

  var cellAlignShorthands = {
    // cell align, then based on origin side
    center: {
      left: 0.5,
      right: 0.5
    },
    left: {
      left: 0,
      right: 1
    },
    right: {
      right: 0,
      left: 1
    }
  };

  proto.setCellAlign = function () {
    var shorthand = cellAlignShorthands[this.options.cellAlign];
    this.cellAlign = shorthand ? shorthand[this.originSide] : this.options.cellAlign;
  };

  proto.setGallerySize = function () {
    if (this.options.setGallerySize) {
      var height = this.options.adaptiveHeight && this.selectedSlide ? this.selectedSlide.height : this.maxCellHeight;
      this.viewport.style.height = height + 'px';
    }
  };

  proto._getWrapShiftCells = function () {
    // only for wrap-around
    if (!this.options.wrapAround) {
      return;
    }
    // unshift previous cells
    this._unshiftCells(this.beforeShiftCells);
    this._unshiftCells(this.afterShiftCells);
    // get before cells
    // initial gap
    var gapX = this.cursorPosition;
    var cellIndex = this.cells.length - 1;
    this.beforeShiftCells = this._getGapCells(gapX, cellIndex, -1);
    // get after cells
    // ending gap between last cell and end of gallery viewport
    gapX = this.size.innerWidth - this.cursorPosition;
    // start cloning at first cell, working forwards
    this.afterShiftCells = this._getGapCells(gapX, 0, 1);
  };

  proto._getGapCells = function (gapX, cellIndex, increment) {
    // keep adding cells until the cover the initial gap
    var cells = [];
    while (gapX > 0) {
      var cell = this.cells[cellIndex];
      if (!cell) {
        break;
      }
      cells.push(cell);
      cellIndex += increment;
      gapX -= cell.size.outerWidth;
    }
    return cells;
  };

  // ----- contain ----- //

  // contain cell targets so no excess sliding
  proto._containSlides = function () {
    if (!this.options.contain || this.options.wrapAround || !this.cells.length) {
      return;
    }
    var isRightToLeft = this.options.rightToLeft;
    var beginMargin = isRightToLeft ? 'marginRight' : 'marginLeft';
    var endMargin = isRightToLeft ? 'marginLeft' : 'marginRight';
    var contentWidth = this.slideableWidth - this.getLastCell().size[endMargin];
    // content is less than gallery size
    var isContentSmaller = contentWidth < this.size.innerWidth;
    // bounds
    var beginBound = this.cursorPosition + this.cells[0].size[beginMargin];
    var endBound = contentWidth - this.size.innerWidth * (1 - this.cellAlign);
    // contain each cell target
    this.slides.forEach(function (slide) {
      if (isContentSmaller) {
        // all cells fit inside gallery
        slide.target = contentWidth * this.cellAlign;
      } else {
        // contain to bounds
        slide.target = Math.max(slide.target, beginBound);
        slide.target = Math.min(slide.target, endBound);
      }
    }, this);
  };

  // -----  ----- //

  /**
   * emits events via eventEmitter and jQuery events
   * @param {String} type - name of event
   * @param {Event} event - original event
   * @param {Array} args - extra arguments
   */
  proto.dispatchEvent = function (type, event, args) {
    var emitArgs = event ? [event].concat(args) : args;
    this.emitEvent(type, emitArgs);

    if (jQuery && this.$element) {
      // default trigger with type if no event
      type += this.options.namespaceJQueryEvents ? '.flickity' : '';
      var $event = type;
      if (event) {
        // create jQuery event
        var jQEvent = jQuery.Event(event);
        jQEvent.type = type;
        $event = jQEvent;
      }
      this.$element.trigger($event, args);
    }
  };

  // -------------------------- select -------------------------- //

  /**
   * @param {Integer} index - index of the slide
   * @param {Boolean} isWrap - will wrap-around to last/first if at the end
   * @param {Boolean} isInstant - will immediately set position at selected cell
   */
  proto.select = function (index, isWrap, isInstant) {
    if (!this.isActive) {
      return;
    }
    index = parseInt(index, 10);
    this._wrapSelect(index);

    if (this.options.wrapAround || isWrap) {
      index = utils.modulo(index, this.slides.length);
    }
    // bail if invalid index
    if (!this.slides[index]) {
      return;
    }
    this.selectedIndex = index;
    this.updateSelectedSlide();
    if (isInstant) {
      this.positionSliderAtSelected();
    } else {
      this.startAnimation();
    }
    if (this.options.adaptiveHeight) {
      this.setGallerySize();
    }

    this.dispatchEvent('select');
    // old v1 event name, remove in v3
    this.dispatchEvent('cellSelect');
  };

  // wraps position for wrapAround, to move to closest slide. #113
  proto._wrapSelect = function (index) {
    var len = this.slides.length;
    var isWrapping = this.options.wrapAround && len > 1;
    if (!isWrapping) {
      return index;
    }
    var wrapIndex = utils.modulo(index, len);
    // go to shortest
    var delta = Math.abs(wrapIndex - this.selectedIndex);
    var backWrapDelta = Math.abs(wrapIndex + len - this.selectedIndex);
    var forewardWrapDelta = Math.abs(wrapIndex - len - this.selectedIndex);
    if (!this.isDragSelect && backWrapDelta < delta) {
      index += len;
    } else if (!this.isDragSelect && forewardWrapDelta < delta) {
      index -= len;
    }
    // wrap position so slider is within normal area
    if (index < 0) {
      this.x -= this.slideableWidth;
    } else if (index >= len) {
      this.x += this.slideableWidth;
    }
  };

  proto.previous = function (isWrap, isInstant) {
    this.select(this.selectedIndex - 1, isWrap, isInstant);
  };

  proto.next = function (isWrap, isInstant) {
    this.select(this.selectedIndex + 1, isWrap, isInstant);
  };

  proto.updateSelectedSlide = function () {
    var slide = this.slides[this.selectedIndex];
    // selectedIndex could be outside of slides, if triggered before resize()
    if (!slide) {
      return;
    }
    // unselect previous selected slide
    this.unselectSelectedSlide();
    // update new selected slide
    this.selectedSlide = slide;
    slide.select();
    this.selectedCells = slide.cells;
    this.selectedElements = slide.getCellElements();
    // HACK: selectedCell & selectedElement is first cell in slide, backwards compatibility
    // Remove in v3?
    this.selectedCell = slide.cells[0];
    this.selectedElement = this.selectedElements[0];
  };

  proto.unselectSelectedSlide = function () {
    if (this.selectedSlide) {
      this.selectedSlide.unselect();
    }
  };

  /**
   * select slide from number or cell element
   * @param {Element or Number} elem
   */
  proto.selectCell = function (value, isWrap, isInstant) {
    // get cell
    var cell;
    if (typeof value == 'number') {
      cell = this.cells[value];
    } else {
      // use string as selector
      if (typeof value == 'string') {
        value = this.element.querySelector(value);
      }
      // get cell from element
      cell = this.getCell(value);
    }
    // select slide that has cell
    for (var i = 0; cell && i < this.slides.length; i++) {
      var slide = this.slides[i];
      var index = slide.cells.indexOf(cell);
      if (index != -1) {
        this.select(i, isWrap, isInstant);
        return;
      }
    }
  };

  // -------------------------- get cells -------------------------- //

  /**
   * get Flickity.Cell, given an Element
   * @param {Element} elem
   * @returns {Flickity.Cell} item
   */
  proto.getCell = function (elem) {
    // loop through cells to get the one that matches
    for (var i = 0; i < this.cells.length; i++) {
      var cell = this.cells[i];
      if (cell.element == elem) {
        return cell;
      }
    }
  };

  /**
   * get collection of Flickity.Cells, given Elements
   * @param {Element, Array, NodeList} elems
   * @returns {Array} cells - Flickity.Cells
   */
  proto.getCells = function (elems) {
    elems = utils.makeArray(elems);
    var cells = [];
    elems.forEach(function (elem) {
      var cell = this.getCell(elem);
      if (cell) {
        cells.push(cell);
      }
    }, this);
    return cells;
  };

  /**
   * get cell elements
   * @returns {Array} cellElems
   */
  proto.getCellElements = function () {
    return this.cells.map(function (cell) {
      return cell.element;
    });
  };

  /**
   * get parent cell from an element
   * @param {Element} elem
   * @returns {Flickit.Cell} cell
   */
  proto.getParentCell = function (elem) {
    // first check if elem is cell
    var cell = this.getCell(elem);
    if (cell) {
      return cell;
    }
    // try to get parent cell elem
    elem = utils.getParent(elem, '.flickity-slider > *');
    return this.getCell(elem);
  };

  /**
   * get cells adjacent to a slide
   * @param {Integer} adjCount - number of adjacent slides
   * @param {Integer} index - index of slide to start
   * @returns {Array} cells - array of Flickity.Cells
   */
  proto.getAdjacentCellElements = function (adjCount, index) {
    if (!adjCount) {
      return this.selectedSlide.getCellElements();
    }
    index = index === undefined ? this.selectedIndex : index;

    var len = this.slides.length;
    if (1 + adjCount * 2 >= len) {
      return this.getCellElements();
    }

    var cellElems = [];
    for (var i = index - adjCount; i <= index + adjCount; i++) {
      var slideIndex = this.options.wrapAround ? utils.modulo(i, len) : i;
      var slide = this.slides[slideIndex];
      if (slide) {
        cellElems = cellElems.concat(slide.getCellElements());
      }
    }
    return cellElems;
  };

  // -------------------------- events -------------------------- //

  proto.uiChange = function () {
    this.emitEvent('uiChange');
  };

  proto.childUIPointerDown = function (event) {
    this.emitEvent('childUIPointerDown', [event]);
  };

  // ----- resize ----- //

  proto.onresize = function () {
    this.watchCSS();
    this.resize();
  };

  utils.debounceMethod(Flickity, 'onresize', 150);

  proto.resize = function () {
    if (!this.isActive) {
      return;
    }
    this.getSize();
    // wrap values
    if (this.options.wrapAround) {
      this.x = utils.modulo(this.x, this.slideableWidth);
    }
    this.positionCells();
    this._getWrapShiftCells();
    this.setGallerySize();
    this.emitEvent('resize');
    // update selected index for group slides, instant
    // TODO: position can be lost between groups of various numbers
    var selectedElement = this.selectedElements && this.selectedElements[0];
    this.selectCell(selectedElement, false, true);
  };

  // watches the :after property, activates/deactivates
  proto.watchCSS = function () {
    var watchOption = this.options.watchCSS;
    if (!watchOption) {
      return;
    }

    var afterContent = getComputedStyle(this.element, ':after').content;
    // activate if :after { content: 'flickity' }
    if (afterContent.indexOf('flickity') != -1) {
      this.activate();
    } else {
      this.deactivate();
    }
  };

  // ----- keydown ----- //

  // go previous/next if left/right keys pressed
  proto.onkeydown = function (event) {
    // only work if element is in focus
    if (!this.options.accessibility || document.activeElement && document.activeElement != this.element) {
      return;
    }

    if (event.keyCode == 37) {
      // go left
      var leftMethod = this.options.rightToLeft ? 'next' : 'previous';
      this.uiChange();
      this[leftMethod]();
    } else if (event.keyCode == 39) {
      // go right
      var rightMethod = this.options.rightToLeft ? 'previous' : 'next';
      this.uiChange();
      this[rightMethod]();
    }
  };

  // -------------------------- destroy -------------------------- //

  // deactivate all Flickity functionality, but keep stuff available
  proto.deactivate = function () {
    if (!this.isActive) {
      return;
    }
    this.element.classList.remove('flickity-enabled');
    this.element.classList.remove('flickity-rtl');
    // destroy cells
    this.cells.forEach(function (cell) {
      cell.destroy();
    });
    this.unselectSelectedSlide();
    this.element.removeChild(this.viewport);
    // move child elements back into element
    moveElements(this.slider.children, this.element);
    if (this.options.accessibility) {
      this.element.removeAttribute('tabIndex');
      this.element.removeEventListener('keydown', this);
    }
    // set flags
    this.isActive = false;
    this.emitEvent('deactivate');
  };

  proto.destroy = function () {
    this.deactivate();
    window.removeEventListener('resize', this);
    this.emitEvent('destroy');
    if (jQuery && this.$element) {
      jQuery.removeData(this.element, 'flickity');
    }
    delete this.element.flickityGUID;
    delete instances[this.guid];
  };

  // -------------------------- prototype -------------------------- //

  utils.extend(proto, animatePrototype);

  // -------------------------- extras -------------------------- //

  /**
   * get Flickity instance from element
   * @param {Element} elem
   * @returns {Flickity}
   */
  Flickity.data = function (elem) {
    elem = utils.getQueryElement(elem);
    var id = elem && elem.flickityGUID;
    return id && instances[id];
  };

  utils.htmlInit(Flickity, 'flickity');

  if (jQuery && jQuery.bridget) {
    jQuery.bridget('flickity', Flickity);
  }

  // set internal jQuery, for Webpack + jQuery v3, #478
  Flickity.setJQuery = function (jq) {
    jQuery = jq;
  };

  Flickity.Cell = Cell;

  return Flickity;
});

/***/ }),

/***/ 19:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * VERSION: 1.20.2
 * DATE: 2017-06-30
 * UPDATES AND DOCS AT: http://greensock.com
 * 
 * Includes all of the following: TweenLite, TweenMax, TimelineLite, TimelineMax, EasePack, CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin
 *
 * @license Copyright (c) 2008-2017, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
var _gsScope = typeof module !== "undefined" && module.exports && typeof global !== "undefined" ? global : undefined || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node
(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push(function () {

	"use strict";

	_gsScope._gsDefine("TweenMax", ["core.Animation", "core.SimpleTimeline", "TweenLite"], function (Animation, SimpleTimeline, TweenLite) {

		var _slice = function _slice(a) {
			//don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
			var b = [],
			    l = a.length,
			    i;
			for (i = 0; i !== l; b.push(a[i++])) {}
			return b;
		},
		    _applyCycle = function _applyCycle(vars, targets, i) {
			var alt = vars.cycle,
			    p,
			    val;
			for (p in alt) {
				val = alt[p];
				vars[p] = typeof val === "function" ? val(i, targets[i]) : val[i % val.length];
			}
			delete vars.cycle;
		},
		    TweenMax = function TweenMax(target, duration, vars) {
			TweenLite.call(this, target, duration, vars);
			this._cycle = 0;
			this._yoyo = this.vars.yoyo === true || !!this.vars.yoyoEase;
			this._repeat = this.vars.repeat || 0;
			this._repeatDelay = this.vars.repeatDelay || 0;
			this._dirty = true; //ensures that if there is any repeat, the totalDuration will get recalculated to accurately report it.
			this.render = TweenMax.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)
		},
		    _tinyNum = 0.0000000001,
		    TweenLiteInternals = TweenLite._internals,
		    _isSelector = TweenLiteInternals.isSelector,
		    _isArray = TweenLiteInternals.isArray,
		    p = TweenMax.prototype = TweenLite.to({}, 0.1, {}),
		    _blankArray = [];

		TweenMax.version = "1.20.2";
		p.constructor = TweenMax;
		p.kill()._gc = false;
		TweenMax.killTweensOf = TweenMax.killDelayedCallsTo = TweenLite.killTweensOf;
		TweenMax.getTweensOf = TweenLite.getTweensOf;
		TweenMax.lagSmoothing = TweenLite.lagSmoothing;
		TweenMax.ticker = TweenLite.ticker;
		TweenMax.render = TweenLite.render;

		p.invalidate = function () {
			this._yoyo = this.vars.yoyo === true || !!this.vars.yoyoEase;
			this._repeat = this.vars.repeat || 0;
			this._repeatDelay = this.vars.repeatDelay || 0;
			this._yoyoEase = null;
			this._uncache(true);
			return TweenLite.prototype.invalidate.call(this);
		};

		p.updateTo = function (vars, resetDuration) {
			var curRatio = this.ratio,
			    immediate = this.vars.immediateRender || vars.immediateRender,
			    p;
			if (resetDuration && this._startTime < this._timeline._time) {
				this._startTime = this._timeline._time;
				this._uncache(false);
				if (this._gc) {
					this._enabled(true, false);
				} else {
					this._timeline.insert(this, this._startTime - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
				}
			}
			for (p in vars) {
				this.vars[p] = vars[p];
			}
			if (this._initted || immediate) {
				if (resetDuration) {
					this._initted = false;
					if (immediate) {
						this.render(0, true, true);
					}
				} else {
					if (this._gc) {
						this._enabled(true, false);
					}
					if (this._notifyPluginsOfEnabled && this._firstPT) {
						TweenLite._onPluginEvent("_onDisable", this); //in case a plugin like MotionBlur must perform some cleanup tasks
					}
					if (this._time / this._duration > 0.998) {
						//if the tween has finished (or come extremely close to finishing), we just need to rewind it to 0 and then render it again at the end which forces it to re-initialize (parsing the new vars). We allow tweens that are close to finishing (but haven't quite finished) to work this way too because otherwise, the values are so small when determining where to project the starting values that binary math issues creep in and can make the tween appear to render incorrectly when run backwards. 
						var prevTime = this._totalTime;
						this.render(0, true, false);
						this._initted = false;
						this.render(prevTime, true, false);
					} else {
						this._initted = false;
						this._init();
						if (this._time > 0 || immediate) {
							var inv = 1 / (1 - curRatio),
							    pt = this._firstPT,
							    endValue;
							while (pt) {
								endValue = pt.s + pt.c;
								pt.c *= inv;
								pt.s = endValue - pt.c;
								pt = pt._next;
							}
						}
					}
				}
			}
			return this;
		};

		p.render = function (time, suppressEvents, force) {
			if (!this._initted) if (this._duration === 0 && this.vars.repeat) {
				//zero duration tweens that render immediately have render() called from TweenLite's constructor, before TweenMax's constructor has finished setting _repeat, _repeatDelay, and _yoyo which are critical in determining totalDuration() so we need to call invalidate() which is a low-kb way to get those set properly.
				this.invalidate();
			}
			var totalDur = !this._dirty ? this._totalDuration : this.totalDuration(),
			    prevTime = this._time,
			    prevTotalTime = this._totalTime,
			    prevCycle = this._cycle,
			    duration = this._duration,
			    prevRawPrevTime = this._rawPrevTime,
			    isComplete,
			    callback,
			    pt,
			    cycleDuration,
			    r,
			    type,
			    pow,
			    rawPrevTime,
			    yoyoEase;
			if (time >= totalDur - 0.0000001 && time >= 0) {
				//to work around occasional floating point math artifacts.
				this._totalTime = totalDur;
				this._cycle = this._repeat;
				if (this._yoyo && (this._cycle & 1) !== 0) {
					this._time = 0;
					this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
				} else {
					this._time = duration;
					this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
				}
				if (!this._reversed) {
					isComplete = true;
					callback = "onComplete";
					force = force || this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
				}
				if (duration === 0) if (this._initted || !this.vars.lazy || force) {
					//zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
					if (this._startTime === this._timeline._duration) {
						//if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
						time = 0;
					}
					if (prevRawPrevTime < 0 || time <= 0 && time >= -0.0000001 || prevRawPrevTime === _tinyNum && this.data !== "isPause") if (prevRawPrevTime !== time) {
						//note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
						force = true;
						if (prevRawPrevTime > _tinyNum) {
							callback = "onReverseComplete";
						}
					}
					this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
				}
			} else if (time < 0.0000001) {
				//to work around occasional floating point math artifacts, round super small values to 0.
				this._totalTime = this._time = this._cycle = 0;
				this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
				if (prevTotalTime !== 0 || duration === 0 && prevRawPrevTime > 0) {
					callback = "onReverseComplete";
					isComplete = this._reversed;
				}
				if (time < 0) {
					this._active = false;
					if (duration === 0) if (this._initted || !this.vars.lazy || force) {
						//zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
						if (prevRawPrevTime >= 0) {
							force = true;
						}
						this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
					}
				}
				if (!this._initted) {
					//if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
					force = true;
				}
			} else {
				this._totalTime = this._time = time;
				if (this._repeat !== 0) {
					cycleDuration = duration + this._repeatDelay;
					this._cycle = this._totalTime / cycleDuration >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
					if (this._cycle !== 0) if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
						this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
					}
					this._time = this._totalTime - this._cycle * cycleDuration;
					if (this._yoyo) if ((this._cycle & 1) !== 0) {
						this._time = duration - this._time;
						yoyoEase = this._yoyoEase || this.vars.yoyoEase; //note: we don't set this._yoyoEase in _init() like we do other properties because it's TweenMax-specific and doing it here allows us to optimize performance (most tweens don't have a yoyoEase). Note that we also must skip the this.ratio calculation further down right after we _init() in this function, because we're doing it here.
						if (yoyoEase) {
							if (!this._yoyoEase) {
								if (yoyoEase === true && !this._initted) {
									//if it's not initted and yoyoEase is true, this._ease won't have been populated yet so we must discern it here.
									yoyoEase = this.vars.ease;
									this._yoyoEase = yoyoEase = !yoyoEase ? TweenLite.defaultEase : yoyoEase instanceof Ease ? yoyoEase : typeof yoyoEase === "function" ? new Ease(yoyoEase, this.vars.easeParams) : Ease.map[yoyoEase] || TweenLite.defaultEase;
								} else {
									this._yoyoEase = yoyoEase = yoyoEase === true ? this._ease : yoyoEase instanceof Ease ? yoyoEase : Ease.map[yoyoEase];
								}
							}
							this.ratio = yoyoEase ? 1 - yoyoEase.getRatio((duration - this._time) / duration) : 0;
						}
					}
					if (this._time > duration) {
						this._time = duration;
					} else if (this._time < 0) {
						this._time = 0;
					}
				}

				if (this._easeType && !yoyoEase) {
					r = this._time / duration;
					type = this._easeType;
					pow = this._easePower;
					if (type === 1 || type === 3 && r >= 0.5) {
						r = 1 - r;
					}
					if (type === 3) {
						r *= 2;
					}
					if (pow === 1) {
						r *= r;
					} else if (pow === 2) {
						r *= r * r;
					} else if (pow === 3) {
						r *= r * r * r;
					} else if (pow === 4) {
						r *= r * r * r * r;
					}

					if (type === 1) {
						this.ratio = 1 - r;
					} else if (type === 2) {
						this.ratio = r;
					} else if (this._time / duration < 0.5) {
						this.ratio = r / 2;
					} else {
						this.ratio = 1 - r / 2;
					}
				} else if (!yoyoEase) {
					this.ratio = this._ease.getRatio(this._time / duration);
				}
			}

			if (prevTime === this._time && !force && prevCycle === this._cycle) {
				if (prevTotalTime !== this._totalTime) if (this._onUpdate) if (!suppressEvents) {
					//so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
					this._callback("onUpdate");
				}
				return;
			} else if (!this._initted) {
				this._init();
				if (!this._initted || this._gc) {
					//immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
					return;
				} else if (!force && this._firstPT && (this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration)) {
					//we stick it in the queue for rendering at the very end of the tick - this is a performance optimization because browsers invalidate styles and force a recalculation if you read, write, and then read style data (so it's better to read/read/read/write/write/write than read/write/read/write/read/write). The down side, of course, is that usually you WANT things to render immediately because you may have code running right after that which depends on the change. Like imagine running TweenLite.set(...) and then immediately after that, creating a nother tween that animates the same property to another value; the starting values of that 2nd tween wouldn't be accurate if lazy is true.
					this._time = prevTime;
					this._totalTime = prevTotalTime;
					this._rawPrevTime = prevRawPrevTime;
					this._cycle = prevCycle;
					TweenLiteInternals.lazyTweens.push(this);
					this._lazy = [time, suppressEvents];
					return;
				}
				//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
				if (this._time && !isComplete && !yoyoEase) {
					this.ratio = this._ease.getRatio(this._time / duration);
				} else if (isComplete && this._ease._calcEnd && !yoyoEase) {
					this.ratio = this._ease.getRatio(this._time === 0 ? 0 : 1);
				}
			}
			if (this._lazy !== false) {
				this._lazy = false;
			}

			if (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {
				this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
			}
			if (prevTotalTime === 0) {
				if (this._initted === 2 && time > 0) {
					//this.invalidate();
					this._init(); //will just apply overwriting since _initted of (2) means it was a from() tween that had immediateRender:true
				}
				if (this._startAt) {
					if (time >= 0) {
						this._startAt.render(time, suppressEvents, force);
					} else if (!callback) {
						callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
					}
				}
				if (this.vars.onStart) if (this._totalTime !== 0 || duration === 0) if (!suppressEvents) {
					this._callback("onStart");
				}
			}

			pt = this._firstPT;
			while (pt) {
				if (pt.f) {
					pt.t[pt.p](pt.c * this.ratio + pt.s);
				} else {
					pt.t[pt.p] = pt.c * this.ratio + pt.s;
				}
				pt = pt._next;
			}

			if (this._onUpdate) {
				if (time < 0) if (this._startAt && this._startTime) {
					//if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
					this._startAt.render(time, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
				}
				if (!suppressEvents) if (this._totalTime !== prevTotalTime || callback) {
					this._callback("onUpdate");
				}
			}
			if (this._cycle !== prevCycle) if (!suppressEvents) if (!this._gc) if (this.vars.onRepeat) {
				this._callback("onRepeat");
			}
			if (callback) if (!this._gc || force) {
				//check gc because there's a chance that kill() could be called in an onUpdate
				if (time < 0 && this._startAt && !this._onUpdate && this._startTime) {
					//if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
					this._startAt.render(time, suppressEvents, force);
				}
				if (isComplete) {
					if (this._timeline.autoRemoveChildren) {
						this._enabled(false, false);
					}
					this._active = false;
				}
				if (!suppressEvents && this.vars[callback]) {
					this._callback(callback);
				}
				if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) {
					//the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
					this._rawPrevTime = 0;
				}
			}
		};

		//---- STATIC FUNCTIONS -----------------------------------------------------------------------------------------------------------

		TweenMax.to = function (target, duration, vars) {
			return new TweenMax(target, duration, vars);
		};

		TweenMax.from = function (target, duration, vars) {
			vars.runBackwards = true;
			vars.immediateRender = vars.immediateRender != false;
			return new TweenMax(target, duration, vars);
		};

		TweenMax.fromTo = function (target, duration, fromVars, toVars) {
			toVars.startAt = fromVars;
			toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;
			return new TweenMax(target, duration, toVars);
		};

		TweenMax.staggerTo = TweenMax.allTo = function (targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			stagger = stagger || 0;
			var delay = 0,
			    a = [],
			    finalComplete = function finalComplete() {
				if (vars.onComplete) {
					vars.onComplete.apply(vars.onCompleteScope || this, arguments);
				}
				onCompleteAll.apply(onCompleteAllScope || vars.callbackScope || this, onCompleteAllParams || _blankArray);
			},
			    cycle = vars.cycle,
			    fromCycle = vars.startAt && vars.startAt.cycle,
			    l,
			    copy,
			    i,
			    p;
			if (!_isArray(targets)) {
				if (typeof targets === "string") {
					targets = TweenLite.selector(targets) || targets;
				}
				if (_isSelector(targets)) {
					targets = _slice(targets);
				}
			}
			targets = targets || [];
			if (stagger < 0) {
				targets = _slice(targets);
				targets.reverse();
				stagger *= -1;
			}
			l = targets.length - 1;
			for (i = 0; i <= l; i++) {
				copy = {};
				for (p in vars) {
					copy[p] = vars[p];
				}
				if (cycle) {
					_applyCycle(copy, targets, i);
					if (copy.duration != null) {
						duration = copy.duration;
						delete copy.duration;
					}
				}
				if (fromCycle) {
					fromCycle = copy.startAt = {};
					for (p in vars.startAt) {
						fromCycle[p] = vars.startAt[p];
					}
					_applyCycle(copy.startAt, targets, i);
				}
				copy.delay = delay + (copy.delay || 0);
				if (i === l && onCompleteAll) {
					copy.onComplete = finalComplete;
				}
				a[i] = new TweenMax(targets[i], duration, copy);
				delay += stagger;
			}
			return a;
		};

		TweenMax.staggerFrom = TweenMax.allFrom = function (targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			vars.runBackwards = true;
			vars.immediateRender = vars.immediateRender != false;
			return TweenMax.staggerTo(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
		};

		TweenMax.staggerFromTo = TweenMax.allFromTo = function (targets, duration, fromVars, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			toVars.startAt = fromVars;
			toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;
			return TweenMax.staggerTo(targets, duration, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
		};

		TweenMax.delayedCall = function (delay, callback, params, scope, useFrames) {
			return new TweenMax(callback, 0, { delay: delay, onComplete: callback, onCompleteParams: params, callbackScope: scope, onReverseComplete: callback, onReverseCompleteParams: params, immediateRender: false, useFrames: useFrames, overwrite: 0 });
		};

		TweenMax.set = function (target, vars) {
			return new TweenMax(target, 0, vars);
		};

		TweenMax.isTweening = function (target) {
			return TweenLite.getTweensOf(target, true).length > 0;
		};

		var _getChildrenOf = function _getChildrenOf(timeline, includeTimelines) {
			var a = [],
			    cnt = 0,
			    tween = timeline._first;
			while (tween) {
				if (tween instanceof TweenLite) {
					a[cnt++] = tween;
				} else {
					if (includeTimelines) {
						a[cnt++] = tween;
					}
					a = a.concat(_getChildrenOf(tween, includeTimelines));
					cnt = a.length;
				}
				tween = tween._next;
			}
			return a;
		},
		    getAllTweens = TweenMax.getAllTweens = function (includeTimelines) {
			return _getChildrenOf(Animation._rootTimeline, includeTimelines).concat(_getChildrenOf(Animation._rootFramesTimeline, includeTimelines));
		};

		TweenMax.killAll = function (complete, tweens, delayedCalls, timelines) {
			if (tweens == null) {
				tweens = true;
			}
			if (delayedCalls == null) {
				delayedCalls = true;
			}
			var a = getAllTweens(timelines != false),
			    l = a.length,
			    allTrue = tweens && delayedCalls && timelines,
			    isDC,
			    tween,
			    i;
			for (i = 0; i < l; i++) {
				tween = a[i];
				if (allTrue || tween instanceof SimpleTimeline || (isDC = tween.target === tween.vars.onComplete) && delayedCalls || tweens && !isDC) {
					if (complete) {
						tween.totalTime(tween._reversed ? 0 : tween.totalDuration());
					} else {
						tween._enabled(false, false);
					}
				}
			}
		};

		TweenMax.killChildTweensOf = function (parent, complete) {
			if (parent == null) {
				return;
			}
			var tl = TweenLiteInternals.tweenLookup,
			    a,
			    curParent,
			    p,
			    i,
			    l;
			if (typeof parent === "string") {
				parent = TweenLite.selector(parent) || parent;
			}
			if (_isSelector(parent)) {
				parent = _slice(parent);
			}
			if (_isArray(parent)) {
				i = parent.length;
				while (--i > -1) {
					TweenMax.killChildTweensOf(parent[i], complete);
				}
				return;
			}
			a = [];
			for (p in tl) {
				curParent = tl[p].target.parentNode;
				while (curParent) {
					if (curParent === parent) {
						a = a.concat(tl[p].tweens);
					}
					curParent = curParent.parentNode;
				}
			}
			l = a.length;
			for (i = 0; i < l; i++) {
				if (complete) {
					a[i].totalTime(a[i].totalDuration());
				}
				a[i]._enabled(false, false);
			}
		};

		var _changePause = function _changePause(pause, tweens, delayedCalls, timelines) {
			tweens = tweens !== false;
			delayedCalls = delayedCalls !== false;
			timelines = timelines !== false;
			var a = getAllTweens(timelines),
			    allTrue = tweens && delayedCalls && timelines,
			    i = a.length,
			    isDC,
			    tween;
			while (--i > -1) {
				tween = a[i];
				if (allTrue || tween instanceof SimpleTimeline || (isDC = tween.target === tween.vars.onComplete) && delayedCalls || tweens && !isDC) {
					tween.paused(pause);
				}
			}
		};

		TweenMax.pauseAll = function (tweens, delayedCalls, timelines) {
			_changePause(true, tweens, delayedCalls, timelines);
		};

		TweenMax.resumeAll = function (tweens, delayedCalls, timelines) {
			_changePause(false, tweens, delayedCalls, timelines);
		};

		TweenMax.globalTimeScale = function (value) {
			var tl = Animation._rootTimeline,
			    t = TweenLite.ticker.time;
			if (!arguments.length) {
				return tl._timeScale;
			}
			value = value || _tinyNum; //can't allow zero because it'll throw the math off
			tl._startTime = t - (t - tl._startTime) * tl._timeScale / value;
			tl = Animation._rootFramesTimeline;
			t = TweenLite.ticker.frame;
			tl._startTime = t - (t - tl._startTime) * tl._timeScale / value;
			tl._timeScale = Animation._rootTimeline._timeScale = value;
			return value;
		};

		//---- GETTERS / SETTERS ----------------------------------------------------------------------------------------------------------

		p.progress = function (value, suppressEvents) {
			return !arguments.length ? this._time / this.duration() : this.totalTime(this.duration() * (this._yoyo && (this._cycle & 1) !== 0 ? 1 - value : value) + this._cycle * (this._duration + this._repeatDelay), suppressEvents);
		};

		p.totalProgress = function (value, suppressEvents) {
			return !arguments.length ? this._totalTime / this.totalDuration() : this.totalTime(this.totalDuration() * value, suppressEvents);
		};

		p.time = function (value, suppressEvents) {
			if (!arguments.length) {
				return this._time;
			}
			if (this._dirty) {
				this.totalDuration();
			}
			if (value > this._duration) {
				value = this._duration;
			}
			if (this._yoyo && (this._cycle & 1) !== 0) {
				value = this._duration - value + this._cycle * (this._duration + this._repeatDelay);
			} else if (this._repeat !== 0) {
				value += this._cycle * (this._duration + this._repeatDelay);
			}
			return this.totalTime(value, suppressEvents);
		};

		p.duration = function (value) {
			if (!arguments.length) {
				return this._duration; //don't set _dirty = false because there could be repeats that haven't been factored into the _totalDuration yet. Otherwise, if you create a repeated TweenMax and then immediately check its duration(), it would cache the value and the totalDuration would not be correct, thus repeats wouldn't take effect.
			}
			return Animation.prototype.duration.call(this, value);
		};

		p.totalDuration = function (value) {
			if (!arguments.length) {
				if (this._dirty) {
					//instead of Infinity, we use 999999999999 so that we can accommodate reverses
					this._totalDuration = this._repeat === -1 ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat;
					this._dirty = false;
				}
				return this._totalDuration;
			}
			return this._repeat === -1 ? this : this.duration((value - this._repeat * this._repeatDelay) / (this._repeat + 1));
		};

		p.repeat = function (value) {
			if (!arguments.length) {
				return this._repeat;
			}
			this._repeat = value;
			return this._uncache(true);
		};

		p.repeatDelay = function (value) {
			if (!arguments.length) {
				return this._repeatDelay;
			}
			this._repeatDelay = value;
			return this._uncache(true);
		};

		p.yoyo = function (value) {
			if (!arguments.length) {
				return this._yoyo;
			}
			this._yoyo = value;
			return this;
		};

		return TweenMax;
	}, true);

	/*
  * ----------------------------------------------------------------
  * TimelineLite
  * ----------------------------------------------------------------
  */
	_gsScope._gsDefine("TimelineLite", ["core.Animation", "core.SimpleTimeline", "TweenLite"], function (Animation, SimpleTimeline, TweenLite) {

		var TimelineLite = function TimelineLite(vars) {
			SimpleTimeline.call(this, vars);
			this._labels = {};
			this.autoRemoveChildren = this.vars.autoRemoveChildren === true;
			this.smoothChildTiming = this.vars.smoothChildTiming === true;
			this._sortChildren = true;
			this._onUpdate = this.vars.onUpdate;
			var v = this.vars,
			    val,
			    p;
			for (p in v) {
				val = v[p];
				if (_isArray(val)) if (val.join("").indexOf("{self}") !== -1) {
					v[p] = this._swapSelfInParams(val);
				}
			}
			if (_isArray(v.tweens)) {
				this.add(v.tweens, 0, v.align, v.stagger);
			}
		},
		    _tinyNum = 0.0000000001,
		    TweenLiteInternals = TweenLite._internals,
		    _internals = TimelineLite._internals = {},
		    _isSelector = TweenLiteInternals.isSelector,
		    _isArray = TweenLiteInternals.isArray,
		    _lazyTweens = TweenLiteInternals.lazyTweens,
		    _lazyRender = TweenLiteInternals.lazyRender,
		    _globals = _gsScope._gsDefine.globals,
		    _copy = function _copy(vars) {
			var copy = {},
			    p;
			for (p in vars) {
				copy[p] = vars[p];
			}
			return copy;
		},
		    _applyCycle = function _applyCycle(vars, targets, i) {
			var alt = vars.cycle,
			    p,
			    val;
			for (p in alt) {
				val = alt[p];
				vars[p] = typeof val === "function" ? val(i, targets[i]) : val[i % val.length];
			}
			delete vars.cycle;
		},
		    _pauseCallback = _internals.pauseCallback = function () {},
		    _slice = function _slice(a) {
			//don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
			var b = [],
			    l = a.length,
			    i;
			for (i = 0; i !== l; b.push(a[i++])) {}
			return b;
		},
		    p = TimelineLite.prototype = new SimpleTimeline();

		TimelineLite.version = "1.20.2";
		p.constructor = TimelineLite;
		p.kill()._gc = p._forcingPlayhead = p._hasPause = false;

		/* might use later...
  //translates a local time inside an animation to the corresponding time on the root/global timeline, factoring in all nesting and timeScales.
  function localToGlobal(time, animation) {
  	while (animation) {
  		time = (time / animation._timeScale) + animation._startTime;
  		animation = animation.timeline;
  	}
  	return time;
  }
  	//translates the supplied time on the root/global timeline into the corresponding local time inside a particular animation, factoring in all nesting and timeScales
  function globalToLocal(time, animation) {
  	var scale = 1;
  	time -= localToGlobal(0, animation);
  	while (animation) {
  		scale *= animation._timeScale;
  		animation = animation.timeline;
  	}
  	return time * scale;
  }
  */

		p.to = function (target, duration, vars, position) {
			var Engine = vars.repeat && _globals.TweenMax || TweenLite;
			return duration ? this.add(new Engine(target, duration, vars), position) : this.set(target, vars, position);
		};

		p.from = function (target, duration, vars, position) {
			return this.add((vars.repeat && _globals.TweenMax || TweenLite).from(target, duration, vars), position);
		};

		p.fromTo = function (target, duration, fromVars, toVars, position) {
			var Engine = toVars.repeat && _globals.TweenMax || TweenLite;
			return duration ? this.add(Engine.fromTo(target, duration, fromVars, toVars), position) : this.set(target, toVars, position);
		};

		p.staggerTo = function (targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			var tl = new TimelineLite({ onComplete: onCompleteAll, onCompleteParams: onCompleteAllParams, callbackScope: onCompleteAllScope, smoothChildTiming: this.smoothChildTiming }),
			    cycle = vars.cycle,
			    copy,
			    i;
			if (typeof targets === "string") {
				targets = TweenLite.selector(targets) || targets;
			}
			targets = targets || [];
			if (_isSelector(targets)) {
				//senses if the targets object is a selector. If it is, we should translate it into an array.
				targets = _slice(targets);
			}
			stagger = stagger || 0;
			if (stagger < 0) {
				targets = _slice(targets);
				targets.reverse();
				stagger *= -1;
			}
			for (i = 0; i < targets.length; i++) {
				copy = _copy(vars);
				if (copy.startAt) {
					copy.startAt = _copy(copy.startAt);
					if (copy.startAt.cycle) {
						_applyCycle(copy.startAt, targets, i);
					}
				}
				if (cycle) {
					_applyCycle(copy, targets, i);
					if (copy.duration != null) {
						duration = copy.duration;
						delete copy.duration;
					}
				}
				tl.to(targets[i], duration, copy, i * stagger);
			}
			return this.add(tl, position);
		};

		p.staggerFrom = function (targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			vars.immediateRender = vars.immediateRender != false;
			vars.runBackwards = true;
			return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
		};

		p.staggerFromTo = function (targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			toVars.startAt = fromVars;
			toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;
			return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
		};

		p.call = function (callback, params, scope, position) {
			return this.add(TweenLite.delayedCall(0, callback, params, scope), position);
		};

		p.set = function (target, vars, position) {
			position = this._parseTimeOrLabel(position, 0, true);
			if (vars.immediateRender == null) {
				vars.immediateRender = position === this._time && !this._paused;
			}
			return this.add(new TweenLite(target, 0, vars), position);
		};

		TimelineLite.exportRoot = function (vars, ignoreDelayedCalls) {
			vars = vars || {};
			if (vars.smoothChildTiming == null) {
				vars.smoothChildTiming = true;
			}
			var tl = new TimelineLite(vars),
			    root = tl._timeline,
			    tween,
			    next;
			if (ignoreDelayedCalls == null) {
				ignoreDelayedCalls = true;
			}
			root._remove(tl, true);
			tl._startTime = 0;
			tl._rawPrevTime = tl._time = tl._totalTime = root._time;
			tween = root._first;
			while (tween) {
				next = tween._next;
				if (!ignoreDelayedCalls || !(tween instanceof TweenLite && tween.target === tween.vars.onComplete)) {
					tl.add(tween, tween._startTime - tween._delay);
				}
				tween = next;
			}
			root.add(tl, 0);
			return tl;
		};

		p.add = function (value, position, align, stagger) {
			var curTime, l, i, child, tl, beforeRawTime;
			if (typeof position !== "number") {
				position = this._parseTimeOrLabel(position, 0, true, value);
			}
			if (!(value instanceof Animation)) {
				if (value instanceof Array || value && value.push && _isArray(value)) {
					align = align || "normal";
					stagger = stagger || 0;
					curTime = position;
					l = value.length;
					for (i = 0; i < l; i++) {
						if (_isArray(child = value[i])) {
							child = new TimelineLite({ tweens: child });
						}
						this.add(child, curTime);
						if (typeof child !== "string" && typeof child !== "function") {
							if (align === "sequence") {
								curTime = child._startTime + child.totalDuration() / child._timeScale;
							} else if (align === "start") {
								child._startTime -= child.delay();
							}
						}
						curTime += stagger;
					}
					return this._uncache(true);
				} else if (typeof value === "string") {
					return this.addLabel(value, position);
				} else if (typeof value === "function") {
					value = TweenLite.delayedCall(0, value);
				} else {
					throw "Cannot add " + value + " into the timeline; it is not a tween, timeline, function, or string.";
				}
			}

			SimpleTimeline.prototype.add.call(this, value, position);

			if (value._time) {
				//in case, for example, the _startTime is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
				value.render((this.rawTime() - value._startTime) * value._timeScale, false, false);
			}

			//if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.
			if (this._gc || this._time === this._duration) if (!this._paused) if (this._duration < this.duration()) {
				//in case any of the ancestors had completed but should now be enabled...
				tl = this;
				beforeRawTime = tl.rawTime() > value._startTime; //if the tween is placed on the timeline so that it starts BEFORE the current rawTime, we should align the playhead (move the timeline). This is because sometimes users will create a timeline, let it finish, and much later append a tween and expect it to run instead of jumping to its end state. While technically one could argue that it should jump to its end state, that's not what users intuitively expect.
				while (tl._timeline) {
					if (beforeRawTime && tl._timeline.smoothChildTiming) {
						tl.totalTime(tl._totalTime, true); //moves the timeline (shifts its startTime) if necessary, and also enables it.
					} else if (tl._gc) {
						tl._enabled(true, false);
					}
					tl = tl._timeline;
				}
			}

			return this;
		};

		p.remove = function (value) {
			if (value instanceof Animation) {
				this._remove(value, false);
				var tl = value._timeline = value.vars.useFrames ? Animation._rootFramesTimeline : Animation._rootTimeline; //now that it's removed, default it to the root timeline so that if it gets played again, it doesn't jump back into this timeline.
				value._startTime = (value._paused ? value._pauseTime : tl._time) - (!value._reversed ? value._totalTime : value.totalDuration() - value._totalTime) / value._timeScale; //ensure that if it gets played again, the timing is correct.
				return this;
			} else if (value instanceof Array || value && value.push && _isArray(value)) {
				var i = value.length;
				while (--i > -1) {
					this.remove(value[i]);
				}
				return this;
			} else if (typeof value === "string") {
				return this.removeLabel(value);
			}
			return this.kill(null, value);
		};

		p._remove = function (tween, skipDisable) {
			SimpleTimeline.prototype._remove.call(this, tween, skipDisable);
			var last = this._last;
			if (!last) {
				this._time = this._totalTime = this._duration = this._totalDuration = 0;
			} else if (this._time > this.duration()) {
				this._time = this._duration;
				this._totalTime = this._totalDuration;
			}
			return this;
		};

		p.append = function (value, offsetOrLabel) {
			return this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value));
		};

		p.insert = p.insertMultiple = function (value, position, align, stagger) {
			return this.add(value, position || 0, align, stagger);
		};

		p.appendMultiple = function (tweens, offsetOrLabel, align, stagger) {
			return this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger);
		};

		p.addLabel = function (label, position) {
			this._labels[label] = this._parseTimeOrLabel(position);
			return this;
		};

		p.addPause = function (position, callback, params, scope) {
			var t = TweenLite.delayedCall(0, _pauseCallback, params, scope || this);
			t.vars.onComplete = t.vars.onReverseComplete = callback;
			t.data = "isPause";
			this._hasPause = true;
			return this.add(t, position);
		};

		p.removeLabel = function (label) {
			delete this._labels[label];
			return this;
		};

		p.getLabelTime = function (label) {
			return this._labels[label] != null ? this._labels[label] : -1;
		};

		p._parseTimeOrLabel = function (timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {
			var clippedDuration, i;
			//if we're about to add a tween/timeline (or an array of them) that's already a child of this timeline, we should remove it first so that it doesn't contaminate the duration().
			if (ignore instanceof Animation && ignore.timeline === this) {
				this.remove(ignore);
			} else if (ignore && (ignore instanceof Array || ignore.push && _isArray(ignore))) {
				i = ignore.length;
				while (--i > -1) {
					if (ignore[i] instanceof Animation && ignore[i].timeline === this) {
						this.remove(ignore[i]);
					}
				}
			}
			clippedDuration = this.duration() > 99999999999 ? this.recent().endTime(false) : this._duration; //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
			if (typeof offsetOrLabel === "string") {
				return this._parseTimeOrLabel(offsetOrLabel, appendIfAbsent && typeof timeOrLabel === "number" && this._labels[offsetOrLabel] == null ? timeOrLabel - clippedDuration : 0, appendIfAbsent);
			}
			offsetOrLabel = offsetOrLabel || 0;
			if (typeof timeOrLabel === "string" && (isNaN(timeOrLabel) || this._labels[timeOrLabel] != null)) {
				//if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
				i = timeOrLabel.indexOf("=");
				if (i === -1) {
					if (this._labels[timeOrLabel] == null) {
						return appendIfAbsent ? this._labels[timeOrLabel] = clippedDuration + offsetOrLabel : offsetOrLabel;
					}
					return this._labels[timeOrLabel] + offsetOrLabel;
				}
				offsetOrLabel = parseInt(timeOrLabel.charAt(i - 1) + "1", 10) * Number(timeOrLabel.substr(i + 1));
				timeOrLabel = i > 1 ? this._parseTimeOrLabel(timeOrLabel.substr(0, i - 1), 0, appendIfAbsent) : clippedDuration;
			} else if (timeOrLabel == null) {
				timeOrLabel = clippedDuration;
			}
			return Number(timeOrLabel) + offsetOrLabel;
		};

		p.seek = function (position, suppressEvents) {
			return this.totalTime(typeof position === "number" ? position : this._parseTimeOrLabel(position), suppressEvents !== false);
		};

		p.stop = function () {
			return this.paused(true);
		};

		p.gotoAndPlay = function (position, suppressEvents) {
			return this.play(position, suppressEvents);
		};

		p.gotoAndStop = function (position, suppressEvents) {
			return this.pause(position, suppressEvents);
		};

		p.render = function (time, suppressEvents, force) {
			if (this._gc) {
				this._enabled(true, false);
			}
			var totalDur = !this._dirty ? this._totalDuration : this.totalDuration(),
			    prevTime = this._time,
			    prevStart = this._startTime,
			    prevTimeScale = this._timeScale,
			    prevPaused = this._paused,
			    tween,
			    isComplete,
			    next,
			    callback,
			    internalForce,
			    pauseTween,
			    curTime;
			if (time >= totalDur - 0.0000001 && time >= 0) {
				//to work around occasional floating point math artifacts.
				this._totalTime = this._time = totalDur;
				if (!this._reversed) if (!this._hasPausedChild()) {
					isComplete = true;
					callback = "onComplete";
					internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
					if (this._duration === 0) if (time <= 0 && time >= -0.0000001 || this._rawPrevTime < 0 || this._rawPrevTime === _tinyNum) if (this._rawPrevTime !== time && this._first) {
						internalForce = true;
						if (this._rawPrevTime > _tinyNum) {
							callback = "onReverseComplete";
						}
					}
				}
				this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
				time = totalDur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7.
			} else if (time < 0.0000001) {
				//to work around occasional floating point math artifacts, round super small values to 0.
				this._totalTime = this._time = 0;
				if (prevTime !== 0 || this._duration === 0 && this._rawPrevTime !== _tinyNum && (this._rawPrevTime > 0 || time < 0 && this._rawPrevTime >= 0)) {
					callback = "onReverseComplete";
					isComplete = this._reversed;
				}
				if (time < 0) {
					this._active = false;
					if (this._timeline.autoRemoveChildren && this._reversed) {
						//ensures proper GC if a timeline is resumed after it's finished reversing.
						internalForce = isComplete = true;
						callback = "onReverseComplete";
					} else if (this._rawPrevTime >= 0 && this._first) {
						//when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
						internalForce = true;
					}
					this._rawPrevTime = time;
				} else {
					this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
					if (time === 0 && isComplete) {
						//if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
						tween = this._first;
						while (tween && tween._startTime === 0) {
							if (!tween._duration) {
								isComplete = false;
							}
							tween = tween._next;
						}
					}
					time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
					if (!this._initted) {
						internalForce = true;
					}
				}
			} else {

				if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
					if (time >= prevTime) {
						tween = this._first;
						while (tween && tween._startTime <= time && !pauseTween) {
							if (!tween._duration) if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
								pauseTween = tween;
							}
							tween = tween._next;
						}
					} else {
						tween = this._last;
						while (tween && tween._startTime >= time && !pauseTween) {
							if (!tween._duration) if (tween.data === "isPause" && tween._rawPrevTime > 0) {
								pauseTween = tween;
							}
							tween = tween._prev;
						}
					}
					if (pauseTween) {
						this._time = time = pauseTween._startTime;
						this._totalTime = time + this._cycle * (this._totalDuration + this._repeatDelay);
					}
				}

				this._totalTime = this._time = this._rawPrevTime = time;
			}
			if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
				return;
			} else if (!this._initted) {
				this._initted = true;
			}

			if (!this._active) if (!this._paused && this._time !== prevTime && time > 0) {
				this._active = true; //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
			}

			if (prevTime === 0) if (this.vars.onStart) if (this._time !== 0 || !this._duration) if (!suppressEvents) {
				this._callback("onStart");
			}

			curTime = this._time;
			if (curTime >= prevTime) {
				tween = this._first;
				while (tween) {
					next = tween._next; //record it here because the value could change after rendering...
					if (curTime !== this._time || this._paused && !prevPaused) {
						//in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
						break;
					} else if (tween._active || tween._startTime <= curTime && !tween._paused && !tween._gc) {
						if (pauseTween === tween) {
							this.pause();
						}
						if (!tween._reversed) {
							tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
						} else {
							tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);
						}
					}
					tween = next;
				}
			} else {
				tween = this._last;
				while (tween) {
					next = tween._prev; //record it here because the value could change after rendering...
					if (curTime !== this._time || this._paused && !prevPaused) {
						//in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
						break;
					} else if (tween._active || tween._startTime <= prevTime && !tween._paused && !tween._gc) {
						if (pauseTween === tween) {
							pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
							while (pauseTween && pauseTween.endTime() > this._time) {
								pauseTween.render(pauseTween._reversed ? pauseTween.totalDuration() - (time - pauseTween._startTime) * pauseTween._timeScale : (time - pauseTween._startTime) * pauseTween._timeScale, suppressEvents, force);
								pauseTween = pauseTween._prev;
							}
							pauseTween = null;
							this.pause();
						}
						if (!tween._reversed) {
							tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
						} else {
							tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);
						}
					}
					tween = next;
				}
			}

			if (this._onUpdate) if (!suppressEvents) {
				if (_lazyTweens.length) {
					//in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
					_lazyRender();
				}
				this._callback("onUpdate");
			}

			if (callback) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) {
				//if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
				if (isComplete) {
					if (_lazyTweens.length) {
						//in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
						_lazyRender();
					}
					if (this._timeline.autoRemoveChildren) {
						this._enabled(false, false);
					}
					this._active = false;
				}
				if (!suppressEvents && this.vars[callback]) {
					this._callback(callback);
				}
			}
		};

		p._hasPausedChild = function () {
			var tween = this._first;
			while (tween) {
				if (tween._paused || tween instanceof TimelineLite && tween._hasPausedChild()) {
					return true;
				}
				tween = tween._next;
			}
			return false;
		};

		p.getChildren = function (nested, tweens, timelines, ignoreBeforeTime) {
			ignoreBeforeTime = ignoreBeforeTime || -9999999999;
			var a = [],
			    tween = this._first,
			    cnt = 0;
			while (tween) {
				if (tween._startTime < ignoreBeforeTime) {
					//do nothing
				} else if (tween instanceof TweenLite) {
					if (tweens !== false) {
						a[cnt++] = tween;
					}
				} else {
					if (timelines !== false) {
						a[cnt++] = tween;
					}
					if (nested !== false) {
						a = a.concat(tween.getChildren(true, tweens, timelines));
						cnt = a.length;
					}
				}
				tween = tween._next;
			}
			return a;
		};

		p.getTweensOf = function (target, nested) {
			var disabled = this._gc,
			    a = [],
			    cnt = 0,
			    tweens,
			    i;
			if (disabled) {
				this._enabled(true, true); //getTweensOf() filters out disabled tweens, and we have to mark them as _gc = true when the timeline completes in order to allow clean garbage collection, so temporarily re-enable the timeline here.
			}
			tweens = TweenLite.getTweensOf(target);
			i = tweens.length;
			while (--i > -1) {
				if (tweens[i].timeline === this || nested && this._contains(tweens[i])) {
					a[cnt++] = tweens[i];
				}
			}
			if (disabled) {
				this._enabled(false, true);
			}
			return a;
		};

		p.recent = function () {
			return this._recent;
		};

		p._contains = function (tween) {
			var tl = tween.timeline;
			while (tl) {
				if (tl === this) {
					return true;
				}
				tl = tl.timeline;
			}
			return false;
		};

		p.shiftChildren = function (amount, adjustLabels, ignoreBeforeTime) {
			ignoreBeforeTime = ignoreBeforeTime || 0;
			var tween = this._first,
			    labels = this._labels,
			    p;
			while (tween) {
				if (tween._startTime >= ignoreBeforeTime) {
					tween._startTime += amount;
				}
				tween = tween._next;
			}
			if (adjustLabels) {
				for (p in labels) {
					if (labels[p] >= ignoreBeforeTime) {
						labels[p] += amount;
					}
				}
			}
			return this._uncache(true);
		};

		p._kill = function (vars, target) {
			if (!vars && !target) {
				return this._enabled(false, false);
			}
			var tweens = !target ? this.getChildren(true, true, false) : this.getTweensOf(target),
			    i = tweens.length,
			    changed = false;
			while (--i > -1) {
				if (tweens[i]._kill(vars, target)) {
					changed = true;
				}
			}
			return changed;
		};

		p.clear = function (labels) {
			var tweens = this.getChildren(false, true, true),
			    i = tweens.length;
			this._time = this._totalTime = 0;
			while (--i > -1) {
				tweens[i]._enabled(false, false);
			}
			if (labels !== false) {
				this._labels = {};
			}
			return this._uncache(true);
		};

		p.invalidate = function () {
			var tween = this._first;
			while (tween) {
				tween.invalidate();
				tween = tween._next;
			}
			return Animation.prototype.invalidate.call(this);;
		};

		p._enabled = function (enabled, ignoreTimeline) {
			if (enabled === this._gc) {
				var tween = this._first;
				while (tween) {
					tween._enabled(enabled, true);
					tween = tween._next;
				}
			}
			return SimpleTimeline.prototype._enabled.call(this, enabled, ignoreTimeline);
		};

		p.totalTime = function (time, suppressEvents, uncapped) {
			this._forcingPlayhead = true;
			var val = Animation.prototype.totalTime.apply(this, arguments);
			this._forcingPlayhead = false;
			return val;
		};

		p.duration = function (value) {
			if (!arguments.length) {
				if (this._dirty) {
					this.totalDuration(); //just triggers recalculation
				}
				return this._duration;
			}
			if (this.duration() !== 0 && value !== 0) {
				this.timeScale(this._duration / value);
			}
			return this;
		};

		p.totalDuration = function (value) {
			if (!arguments.length) {
				if (this._dirty) {
					var max = 0,
					    tween = this._last,
					    prevStart = 999999999999,
					    prev,
					    end;
					while (tween) {
						prev = tween._prev; //record it here in case the tween changes position in the sequence...
						if (tween._dirty) {
							tween.totalDuration(); //could change the tween._startTime, so make sure the tween's cache is clean before analyzing it.
						}
						if (tween._startTime > prevStart && this._sortChildren && !tween._paused) {
							//in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
							this.add(tween, tween._startTime - tween._delay);
						} else {
							prevStart = tween._startTime;
						}
						if (tween._startTime < 0 && !tween._paused) {
							//children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
							max -= tween._startTime;
							if (this._timeline.smoothChildTiming) {
								this._startTime += tween._startTime / this._timeScale;
							}
							this.shiftChildren(-tween._startTime, false, -9999999999);
							prevStart = 0;
						}
						end = tween._startTime + tween._totalDuration / tween._timeScale;
						if (end > max) {
							max = end;
						}
						tween = prev;
					}
					this._duration = this._totalDuration = max;
					this._dirty = false;
				}
				return this._totalDuration;
			}
			return value && this.totalDuration() ? this.timeScale(this._totalDuration / value) : this;
		};

		p.paused = function (value) {
			if (!value) {
				//if there's a pause directly at the spot from where we're unpausing, skip it.
				var tween = this._first,
				    time = this._time;
				while (tween) {
					if (tween._startTime === time && tween.data === "isPause") {
						tween._rawPrevTime = 0; //remember, _rawPrevTime is how zero-duration tweens/callbacks sense directionality and determine whether or not to fire. If _rawPrevTime is the same as _startTime on the next render, it won't fire.
					}
					tween = tween._next;
				}
			}
			return Animation.prototype.paused.apply(this, arguments);
		};

		p.usesFrames = function () {
			var tl = this._timeline;
			while (tl._timeline) {
				tl = tl._timeline;
			}
			return tl === Animation._rootFramesTimeline;
		};

		p.rawTime = function (wrapRepeats) {
			return wrapRepeats && (this._paused || this._repeat && this.time() > 0 && this.totalProgress() < 1) ? this._totalTime % (this._duration + this._repeatDelay) : this._paused ? this._totalTime : (this._timeline.rawTime(wrapRepeats) - this._startTime) * this._timeScale;
		};

		return TimelineLite;
	}, true);

	/*
  * ----------------------------------------------------------------
  * TimelineMax
  * ----------------------------------------------------------------
  */
	_gsScope._gsDefine("TimelineMax", ["TimelineLite", "TweenLite", "easing.Ease"], function (TimelineLite, TweenLite, Ease) {

		var TimelineMax = function TimelineMax(vars) {
			TimelineLite.call(this, vars);
			this._repeat = this.vars.repeat || 0;
			this._repeatDelay = this.vars.repeatDelay || 0;
			this._cycle = 0;
			this._yoyo = this.vars.yoyo === true;
			this._dirty = true;
		},
		    _tinyNum = 0.0000000001,
		    TweenLiteInternals = TweenLite._internals,
		    _lazyTweens = TweenLiteInternals.lazyTweens,
		    _lazyRender = TweenLiteInternals.lazyRender,
		    _globals = _gsScope._gsDefine.globals,
		    _easeNone = new Ease(null, null, 1, 0),
		    p = TimelineMax.prototype = new TimelineLite();

		p.constructor = TimelineMax;
		p.kill()._gc = false;
		TimelineMax.version = "1.20.2";

		p.invalidate = function () {
			this._yoyo = this.vars.yoyo === true;
			this._repeat = this.vars.repeat || 0;
			this._repeatDelay = this.vars.repeatDelay || 0;
			this._uncache(true);
			return TimelineLite.prototype.invalidate.call(this);
		};

		p.addCallback = function (callback, position, params, scope) {
			return this.add(TweenLite.delayedCall(0, callback, params, scope), position);
		};

		p.removeCallback = function (callback, position) {
			if (callback) {
				if (position == null) {
					this._kill(null, callback);
				} else {
					var a = this.getTweensOf(callback, false),
					    i = a.length,
					    time = this._parseTimeOrLabel(position);
					while (--i > -1) {
						if (a[i]._startTime === time) {
							a[i]._enabled(false, false);
						}
					}
				}
			}
			return this;
		};

		p.removePause = function (position) {
			return this.removeCallback(TimelineLite._internals.pauseCallback, position);
		};

		p.tweenTo = function (position, vars) {
			vars = vars || {};
			var copy = { ease: _easeNone, useFrames: this.usesFrames(), immediateRender: false },
			    Engine = vars.repeat && _globals.TweenMax || TweenLite,
			    duration,
			    p,
			    t;
			for (p in vars) {
				copy[p] = vars[p];
			}
			copy.time = this._parseTimeOrLabel(position);
			duration = Math.abs(Number(copy.time) - this._time) / this._timeScale || 0.001;
			t = new Engine(this, duration, copy);
			copy.onStart = function () {
				t.target.paused(true);
				if (t.vars.time !== t.target.time() && duration === t.duration()) {
					//don't make the duration zero - if it's supposed to be zero, don't worry because it's already initting the tween and will complete immediately, effectively making the duration zero anyway. If we make duration zero, the tween won't run at all.
					t.duration(Math.abs(t.vars.time - t.target.time()) / t.target._timeScale);
				}
				if (vars.onStart) {
					//in case the user had an onStart in the vars - we don't want to overwrite it.
					vars.onStart.apply(vars.onStartScope || vars.callbackScope || t, vars.onStartParams || []); //don't use t._callback("onStart") or it'll point to the copy.onStart and we'll get a recursion error.
				}
			};
			return t;
		};

		p.tweenFromTo = function (fromPosition, toPosition, vars) {
			vars = vars || {};
			fromPosition = this._parseTimeOrLabel(fromPosition);
			vars.startAt = { onComplete: this.seek, onCompleteParams: [fromPosition], callbackScope: this };
			vars.immediateRender = vars.immediateRender !== false;
			var t = this.tweenTo(toPosition, vars);
			return t.duration(Math.abs(t.vars.time - fromPosition) / this._timeScale || 0.001);
		};

		p.render = function (time, suppressEvents, force) {
			if (this._gc) {
				this._enabled(true, false);
			}
			var totalDur = !this._dirty ? this._totalDuration : this.totalDuration(),
			    dur = this._duration,
			    prevTime = this._time,
			    prevTotalTime = this._totalTime,
			    prevStart = this._startTime,
			    prevTimeScale = this._timeScale,
			    prevRawPrevTime = this._rawPrevTime,
			    prevPaused = this._paused,
			    prevCycle = this._cycle,
			    tween,
			    isComplete,
			    next,
			    callback,
			    internalForce,
			    cycleDuration,
			    pauseTween,
			    curTime;
			if (time >= totalDur - 0.0000001 && time >= 0) {
				//to work around occasional floating point math artifacts.
				if (!this._locked) {
					this._totalTime = totalDur;
					this._cycle = this._repeat;
				}
				if (!this._reversed) if (!this._hasPausedChild()) {
					isComplete = true;
					callback = "onComplete";
					internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
					if (this._duration === 0) if (time <= 0 && time >= -0.0000001 || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum) if (prevRawPrevTime !== time && this._first) {
						internalForce = true;
						if (prevRawPrevTime > _tinyNum) {
							callback = "onReverseComplete";
						}
					}
				}
				this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
				if (this._yoyo && (this._cycle & 1) !== 0) {
					this._time = time = 0;
				} else {
					this._time = dur;
					time = dur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7. We cannot do less then 0.0001 because the same issue can occur when the duration is extremely large like 999999999999 in which case adding 0.00000001, for example, causes it to act like nothing was added.
				}
			} else if (time < 0.0000001) {
				//to work around occasional floating point math artifacts, round super small values to 0.
				if (!this._locked) {
					this._totalTime = this._cycle = 0;
				}
				this._time = 0;
				if (prevTime !== 0 || dur === 0 && prevRawPrevTime !== _tinyNum && (prevRawPrevTime > 0 || time < 0 && prevRawPrevTime >= 0) && !this._locked) {
					//edge case for checking time < 0 && prevRawPrevTime >= 0: a zero-duration fromTo() tween inside a zero-duration timeline (yeah, very rare)
					callback = "onReverseComplete";
					isComplete = this._reversed;
				}
				if (time < 0) {
					this._active = false;
					if (this._timeline.autoRemoveChildren && this._reversed) {
						internalForce = isComplete = true;
						callback = "onReverseComplete";
					} else if (prevRawPrevTime >= 0 && this._first) {
						//when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
						internalForce = true;
					}
					this._rawPrevTime = time;
				} else {
					this._rawPrevTime = dur || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
					if (time === 0 && isComplete) {
						//if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
						tween = this._first;
						while (tween && tween._startTime === 0) {
							if (!tween._duration) {
								isComplete = false;
							}
							tween = tween._next;
						}
					}
					time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
					if (!this._initted) {
						internalForce = true;
					}
				}
			} else {
				if (dur === 0 && prevRawPrevTime < 0) {
					//without this, zero-duration repeating timelines (like with a simple callback nested at the very beginning and a repeatDelay) wouldn't render the first time through.
					internalForce = true;
				}
				this._time = this._rawPrevTime = time;
				if (!this._locked) {
					this._totalTime = time;
					if (this._repeat !== 0) {
						cycleDuration = dur + this._repeatDelay;
						this._cycle = this._totalTime / cycleDuration >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but it gets reported as 0.79999999!)
						if (this._cycle !== 0) if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
							this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
						}
						this._time = this._totalTime - this._cycle * cycleDuration;
						if (this._yoyo) if ((this._cycle & 1) !== 0) {
							this._time = dur - this._time;
						}
						if (this._time > dur) {
							this._time = dur;
							time = dur + 0.0001; //to avoid occasional floating point rounding error
						} else if (this._time < 0) {
							this._time = time = 0;
						} else {
							time = this._time;
						}
					}
				}

				if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
					time = this._time;
					if (time >= prevTime || this._repeat && prevCycle !== this._cycle) {
						tween = this._first;
						while (tween && tween._startTime <= time && !pauseTween) {
							if (!tween._duration) if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
								pauseTween = tween;
							}
							tween = tween._next;
						}
					} else {
						tween = this._last;
						while (tween && tween._startTime >= time && !pauseTween) {
							if (!tween._duration) if (tween.data === "isPause" && tween._rawPrevTime > 0) {
								pauseTween = tween;
							}
							tween = tween._prev;
						}
					}
					if (pauseTween && pauseTween._startTime < dur) {
						this._time = time = pauseTween._startTime;
						this._totalTime = time + this._cycle * (this._totalDuration + this._repeatDelay);
					}
				}
			}

			if (this._cycle !== prevCycle) if (!this._locked) {
				/*
    make sure children at the end/beginning of the timeline are rendered properly. If, for example,
    a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
    would get transated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
    could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
    we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
    ensure that zero-duration tweens at the very beginning or end of the TimelineMax work.
    */
				var backwards = this._yoyo && (prevCycle & 1) !== 0,
				    wrap = backwards === (this._yoyo && (this._cycle & 1) !== 0),
				    recTotalTime = this._totalTime,
				    recCycle = this._cycle,
				    recRawPrevTime = this._rawPrevTime,
				    recTime = this._time;

				this._totalTime = prevCycle * dur;
				if (this._cycle < prevCycle) {
					backwards = !backwards;
				} else {
					this._totalTime += dur;
				}
				this._time = prevTime; //temporarily revert _time so that render() renders the children in the correct order. Without this, tweens won't rewind correctly. We could arhictect things in a "cleaner" way by splitting out the rendering queue into a separate method but for performance reasons, we kept it all inside this method.

				this._rawPrevTime = dur === 0 ? prevRawPrevTime - 0.0001 : prevRawPrevTime;
				this._cycle = prevCycle;
				this._locked = true; //prevents changes to totalTime and skips repeat/yoyo behavior when we recursively call render()
				prevTime = backwards ? 0 : dur;
				this.render(prevTime, suppressEvents, dur === 0);
				if (!suppressEvents) if (!this._gc) {
					if (this.vars.onRepeat) {
						this._cycle = recCycle; //in case the onRepeat alters the playhead or invalidates(), we shouldn't stay locked or use the previous cycle.
						this._locked = false;
						this._callback("onRepeat");
					}
				}
				if (prevTime !== this._time) {
					//in case there's a callback like onComplete in a nested tween/timeline that changes the playhead position, like via seek(), we should just abort.
					return;
				}
				if (wrap) {
					this._cycle = prevCycle; //if there's an onRepeat, we reverted this above, so make sure it's set properly again. We also unlocked in that scenario, so reset that too.
					this._locked = true;
					prevTime = backwards ? dur + 0.0001 : -0.0001;
					this.render(prevTime, true, false);
				}
				this._locked = false;
				if (this._paused && !prevPaused) {
					//if the render() triggered callback that paused this timeline, we should abort (very rare, but possible)
					return;
				}
				this._time = recTime;
				this._totalTime = recTotalTime;
				this._cycle = recCycle;
				this._rawPrevTime = recRawPrevTime;
			}

			if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
				if (prevTotalTime !== this._totalTime) if (this._onUpdate) if (!suppressEvents) {
					//so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
					this._callback("onUpdate");
				}
				return;
			} else if (!this._initted) {
				this._initted = true;
			}

			if (!this._active) if (!this._paused && this._totalTime !== prevTotalTime && time > 0) {
				this._active = true; //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
			}

			if (prevTotalTime === 0) if (this.vars.onStart) if (this._totalTime !== 0 || !this._totalDuration) if (!suppressEvents) {
				this._callback("onStart");
			}

			curTime = this._time;
			if (curTime >= prevTime) {
				tween = this._first;
				while (tween) {
					next = tween._next; //record it here because the value could change after rendering...
					if (curTime !== this._time || this._paused && !prevPaused) {
						//in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
						break;
					} else if (tween._active || tween._startTime <= this._time && !tween._paused && !tween._gc) {
						if (pauseTween === tween) {
							this.pause();
						}
						if (!tween._reversed) {
							tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
						} else {
							tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);
						}
					}
					tween = next;
				}
			} else {
				tween = this._last;
				while (tween) {
					next = tween._prev; //record it here because the value could change after rendering...
					if (curTime !== this._time || this._paused && !prevPaused) {
						//in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
						break;
					} else if (tween._active || tween._startTime <= prevTime && !tween._paused && !tween._gc) {
						if (pauseTween === tween) {
							pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
							while (pauseTween && pauseTween.endTime() > this._time) {
								pauseTween.render(pauseTween._reversed ? pauseTween.totalDuration() - (time - pauseTween._startTime) * pauseTween._timeScale : (time - pauseTween._startTime) * pauseTween._timeScale, suppressEvents, force);
								pauseTween = pauseTween._prev;
							}
							pauseTween = null;
							this.pause();
						}
						if (!tween._reversed) {
							tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
						} else {
							tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);
						}
					}
					tween = next;
				}
			}

			if (this._onUpdate) if (!suppressEvents) {
				if (_lazyTweens.length) {
					//in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
					_lazyRender();
				}
				this._callback("onUpdate");
			}
			if (callback) if (!this._locked) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) {
				//if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
				if (isComplete) {
					if (_lazyTweens.length) {
						//in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
						_lazyRender();
					}
					if (this._timeline.autoRemoveChildren) {
						this._enabled(false, false);
					}
					this._active = false;
				}
				if (!suppressEvents && this.vars[callback]) {
					this._callback(callback);
				}
			}
		};

		p.getActive = function (nested, tweens, timelines) {
			if (nested == null) {
				nested = true;
			}
			if (tweens == null) {
				tweens = true;
			}
			if (timelines == null) {
				timelines = false;
			}
			var a = [],
			    all = this.getChildren(nested, tweens, timelines),
			    cnt = 0,
			    l = all.length,
			    i,
			    tween;
			for (i = 0; i < l; i++) {
				tween = all[i];
				if (tween.isActive()) {
					a[cnt++] = tween;
				}
			}
			return a;
		};

		p.getLabelAfter = function (time) {
			if (!time) if (time !== 0) {
				//faster than isNan()
				time = this._time;
			}
			var labels = this.getLabelsArray(),
			    l = labels.length,
			    i;
			for (i = 0; i < l; i++) {
				if (labels[i].time > time) {
					return labels[i].name;
				}
			}
			return null;
		};

		p.getLabelBefore = function (time) {
			if (time == null) {
				time = this._time;
			}
			var labels = this.getLabelsArray(),
			    i = labels.length;
			while (--i > -1) {
				if (labels[i].time < time) {
					return labels[i].name;
				}
			}
			return null;
		};

		p.getLabelsArray = function () {
			var a = [],
			    cnt = 0,
			    p;
			for (p in this._labels) {
				a[cnt++] = { time: this._labels[p], name: p };
			}
			a.sort(function (a, b) {
				return a.time - b.time;
			});
			return a;
		};

		p.invalidate = function () {
			this._locked = false; //unlock and set cycle in case invalidate() is called from inside an onRepeat
			return TimelineLite.prototype.invalidate.call(this);
		};

		//---- GETTERS / SETTERS -------------------------------------------------------------------------------------------------------

		p.progress = function (value, suppressEvents) {
			return !arguments.length ? this._time / this.duration() || 0 : this.totalTime(this.duration() * (this._yoyo && (this._cycle & 1) !== 0 ? 1 - value : value) + this._cycle * (this._duration + this._repeatDelay), suppressEvents);
		};

		p.totalProgress = function (value, suppressEvents) {
			return !arguments.length ? this._totalTime / this.totalDuration() || 0 : this.totalTime(this.totalDuration() * value, suppressEvents);
		};

		p.totalDuration = function (value) {
			if (!arguments.length) {
				if (this._dirty) {
					TimelineLite.prototype.totalDuration.call(this); //just forces refresh
					//Instead of Infinity, we use 999999999999 so that we can accommodate reverses.
					this._totalDuration = this._repeat === -1 ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat;
				}
				return this._totalDuration;
			}
			return this._repeat === -1 || !value ? this : this.timeScale(this.totalDuration() / value);
		};

		p.time = function (value, suppressEvents) {
			if (!arguments.length) {
				return this._time;
			}
			if (this._dirty) {
				this.totalDuration();
			}
			if (value > this._duration) {
				value = this._duration;
			}
			if (this._yoyo && (this._cycle & 1) !== 0) {
				value = this._duration - value + this._cycle * (this._duration + this._repeatDelay);
			} else if (this._repeat !== 0) {
				value += this._cycle * (this._duration + this._repeatDelay);
			}
			return this.totalTime(value, suppressEvents);
		};

		p.repeat = function (value) {
			if (!arguments.length) {
				return this._repeat;
			}
			this._repeat = value;
			return this._uncache(true);
		};

		p.repeatDelay = function (value) {
			if (!arguments.length) {
				return this._repeatDelay;
			}
			this._repeatDelay = value;
			return this._uncache(true);
		};

		p.yoyo = function (value) {
			if (!arguments.length) {
				return this._yoyo;
			}
			this._yoyo = value;
			return this;
		};

		p.currentLabel = function (value) {
			if (!arguments.length) {
				return this.getLabelBefore(this._time + 0.00000001);
			}
			return this.seek(value, true);
		};

		return TimelineMax;
	}, true);

	/*
  * ----------------------------------------------------------------
  * BezierPlugin
  * ----------------------------------------------------------------
  */
	(function () {

		var _RAD2DEG = 180 / Math.PI,
		    _r1 = [],
		    _r2 = [],
		    _r3 = [],
		    _corProps = {},
		    _globals = _gsScope._gsDefine.globals,
		    Segment = function Segment(a, b, c, d) {
			if (c === d) {
				//if c and d match, the final autoRotate value could lock at -90 degrees, so differentiate them slightly.
				c = d - (d - b) / 1000000;
			}
			if (a === b) {
				//if a and b match, the starting autoRotate value could lock at -90 degrees, so differentiate them slightly.
				b = a + (c - a) / 1000000;
			}
			this.a = a;
			this.b = b;
			this.c = c;
			this.d = d;
			this.da = d - a;
			this.ca = c - a;
			this.ba = b - a;
		},
		    _correlate = ",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",
		    cubicToQuadratic = function cubicToQuadratic(a, b, c, d) {
			var q1 = { a: a },
			    q2 = {},
			    q3 = {},
			    q4 = { c: d },
			    mab = (a + b) / 2,
			    mbc = (b + c) / 2,
			    mcd = (c + d) / 2,
			    mabc = (mab + mbc) / 2,
			    mbcd = (mbc + mcd) / 2,
			    m8 = (mbcd - mabc) / 8;
			q1.b = mab + (a - mab) / 4;
			q2.b = mabc + m8;
			q1.c = q2.a = (q1.b + q2.b) / 2;
			q2.c = q3.a = (mabc + mbcd) / 2;
			q3.b = mbcd - m8;
			q4.b = mcd + (d - mcd) / 4;
			q3.c = q4.a = (q3.b + q4.b) / 2;
			return [q1, q2, q3, q4];
		},
		    _calculateControlPoints = function _calculateControlPoints(a, curviness, quad, basic, correlate) {
			var l = a.length - 1,
			    ii = 0,
			    cp1 = a[0].a,
			    i,
			    p1,
			    p2,
			    p3,
			    seg,
			    m1,
			    m2,
			    mm,
			    cp2,
			    qb,
			    r1,
			    r2,
			    tl;
			for (i = 0; i < l; i++) {
				seg = a[ii];
				p1 = seg.a;
				p2 = seg.d;
				p3 = a[ii + 1].d;

				if (correlate) {
					r1 = _r1[i];
					r2 = _r2[i];
					tl = (r2 + r1) * curviness * 0.25 / (basic ? 0.5 : _r3[i] || 0.5);
					m1 = p2 - (p2 - p1) * (basic ? curviness * 0.5 : r1 !== 0 ? tl / r1 : 0);
					m2 = p2 + (p3 - p2) * (basic ? curviness * 0.5 : r2 !== 0 ? tl / r2 : 0);
					mm = p2 - (m1 + ((m2 - m1) * (r1 * 3 / (r1 + r2) + 0.5) / 4 || 0));
				} else {
					m1 = p2 - (p2 - p1) * curviness * 0.5;
					m2 = p2 + (p3 - p2) * curviness * 0.5;
					mm = p2 - (m1 + m2) / 2;
				}
				m1 += mm;
				m2 += mm;

				seg.c = cp2 = m1;
				if (i !== 0) {
					seg.b = cp1;
				} else {
					seg.b = cp1 = seg.a + (seg.c - seg.a) * 0.6; //instead of placing b on a exactly, we move it inline with c so that if the user specifies an ease like Back.easeIn or Elastic.easeIn which goes BEYOND the beginning, it will do so smoothly.
				}

				seg.da = p2 - p1;
				seg.ca = cp2 - p1;
				seg.ba = cp1 - p1;

				if (quad) {
					qb = cubicToQuadratic(p1, cp1, cp2, p2);
					a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
					ii += 4;
				} else {
					ii++;
				}

				cp1 = m2;
			}
			seg = a[ii];
			seg.b = cp1;
			seg.c = cp1 + (seg.d - cp1) * 0.4; //instead of placing c on d exactly, we move it inline with b so that if the user specifies an ease like Back.easeOut or Elastic.easeOut which goes BEYOND the end, it will do so smoothly.
			seg.da = seg.d - seg.a;
			seg.ca = seg.c - seg.a;
			seg.ba = cp1 - seg.a;
			if (quad) {
				qb = cubicToQuadratic(seg.a, cp1, seg.c, seg.d);
				a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
			}
		},
		    _parseAnchors = function _parseAnchors(values, p, correlate, prepend) {
			var a = [],
			    l,
			    i,
			    p1,
			    p2,
			    p3,
			    tmp;
			if (prepend) {
				values = [prepend].concat(values);
				i = values.length;
				while (--i > -1) {
					if (typeof (tmp = values[i][p]) === "string") if (tmp.charAt(1) === "=") {
						values[i][p] = prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)); //accommodate relative values. Do it inline instead of breaking it out into a function for speed reasons
					}
				}
			}
			l = values.length - 2;
			if (l < 0) {
				a[0] = new Segment(values[0][p], 0, 0, values[0][p]);
				return a;
			}
			for (i = 0; i < l; i++) {
				p1 = values[i][p];
				p2 = values[i + 1][p];
				a[i] = new Segment(p1, 0, 0, p2);
				if (correlate) {
					p3 = values[i + 2][p];
					_r1[i] = (_r1[i] || 0) + (p2 - p1) * (p2 - p1);
					_r2[i] = (_r2[i] || 0) + (p3 - p2) * (p3 - p2);
				}
			}
			a[i] = new Segment(values[i][p], 0, 0, values[i + 1][p]);
			return a;
		},
		    bezierThrough = function bezierThrough(values, curviness, quadratic, basic, correlate, prepend) {
			var obj = {},
			    props = [],
			    first = prepend || values[0],
			    i,
			    p,
			    a,
			    j,
			    r,
			    l,
			    seamless,
			    last;
			correlate = typeof correlate === "string" ? "," + correlate + "," : _correlate;
			if (curviness == null) {
				curviness = 1;
			}
			for (p in values[0]) {
				props.push(p);
			}
			//check to see if the last and first values are identical (well, within 0.05). If so, make seamless by appending the second element to the very end of the values array and the 2nd-to-last element to the very beginning (we'll remove those segments later)
			if (values.length > 1) {
				last = values[values.length - 1];
				seamless = true;
				i = props.length;
				while (--i > -1) {
					p = props[i];
					if (Math.abs(first[p] - last[p]) > 0.05) {
						//build in a tolerance of +/-0.05 to accommodate rounding errors.
						seamless = false;
						break;
					}
				}
				if (seamless) {
					values = values.concat(); //duplicate the array to avoid contaminating the original which the user may be reusing for other tweens
					if (prepend) {
						values.unshift(prepend);
					}
					values.push(values[1]);
					prepend = values[values.length - 3];
				}
			}
			_r1.length = _r2.length = _r3.length = 0;
			i = props.length;
			while (--i > -1) {
				p = props[i];
				_corProps[p] = correlate.indexOf("," + p + ",") !== -1;
				obj[p] = _parseAnchors(values, p, _corProps[p], prepend);
			}
			i = _r1.length;
			while (--i > -1) {
				_r1[i] = Math.sqrt(_r1[i]);
				_r2[i] = Math.sqrt(_r2[i]);
			}
			if (!basic) {
				i = props.length;
				while (--i > -1) {
					if (_corProps[p]) {
						a = obj[props[i]];
						l = a.length - 1;
						for (j = 0; j < l; j++) {
							r = a[j + 1].da / _r2[j] + a[j].da / _r1[j] || 0;
							_r3[j] = (_r3[j] || 0) + r * r;
						}
					}
				}
				i = _r3.length;
				while (--i > -1) {
					_r3[i] = Math.sqrt(_r3[i]);
				}
			}
			i = props.length;
			j = quadratic ? 4 : 1;
			while (--i > -1) {
				p = props[i];
				a = obj[p];
				_calculateControlPoints(a, curviness, quadratic, basic, _corProps[p]); //this method requires that _parseAnchors() and _setSegmentRatios() ran first so that _r1, _r2, and _r3 values are populated for all properties
				if (seamless) {
					a.splice(0, j);
					a.splice(a.length - j, j);
				}
			}
			return obj;
		},
		    _parseBezierData = function _parseBezierData(values, type, prepend) {
			type = type || "soft";
			var obj = {},
			    inc = type === "cubic" ? 3 : 2,
			    soft = type === "soft",
			    props = [],
			    a,
			    b,
			    c,
			    d,
			    cur,
			    i,
			    j,
			    l,
			    p,
			    cnt,
			    tmp;
			if (soft && prepend) {
				values = [prepend].concat(values);
			}
			if (values == null || values.length < inc + 1) {
				throw "invalid Bezier data";
			}
			for (p in values[0]) {
				props.push(p);
			}
			i = props.length;
			while (--i > -1) {
				p = props[i];
				obj[p] = cur = [];
				cnt = 0;
				l = values.length;
				for (j = 0; j < l; j++) {
					a = prepend == null ? values[j][p] : typeof (tmp = values[j][p]) === "string" && tmp.charAt(1) === "=" ? prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)) : Number(tmp);
					if (soft) if (j > 1) if (j < l - 1) {
						cur[cnt++] = (a + cur[cnt - 2]) / 2;
					}
					cur[cnt++] = a;
				}
				l = cnt - inc + 1;
				cnt = 0;
				for (j = 0; j < l; j += inc) {
					a = cur[j];
					b = cur[j + 1];
					c = cur[j + 2];
					d = inc === 2 ? 0 : cur[j + 3];
					cur[cnt++] = tmp = inc === 3 ? new Segment(a, b, c, d) : new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
				}
				cur.length = cnt;
			}
			return obj;
		},
		    _addCubicLengths = function _addCubicLengths(a, steps, resolution) {
			var inc = 1 / resolution,
			    j = a.length,
			    d,
			    d1,
			    s,
			    da,
			    ca,
			    ba,
			    p,
			    i,
			    inv,
			    bez,
			    index;
			while (--j > -1) {
				bez = a[j];
				s = bez.a;
				da = bez.d - s;
				ca = bez.c - s;
				ba = bez.b - s;
				d = d1 = 0;
				for (i = 1; i <= resolution; i++) {
					p = inc * i;
					inv = 1 - p;
					d = d1 - (d1 = (p * p * da + 3 * inv * (p * ca + inv * ba)) * p);
					index = j * resolution + i - 1;
					steps[index] = (steps[index] || 0) + d * d;
				}
			}
		},
		    _parseLengthData = function _parseLengthData(obj, resolution) {
			resolution = resolution >> 0 || 6;
			var a = [],
			    lengths = [],
			    d = 0,
			    total = 0,
			    threshold = resolution - 1,
			    segments = [],
			    curLS = [],
			    //current length segments array
			p,
			    i,
			    l,
			    index;
			for (p in obj) {
				_addCubicLengths(obj[p], a, resolution);
			}
			l = a.length;
			for (i = 0; i < l; i++) {
				d += Math.sqrt(a[i]);
				index = i % resolution;
				curLS[index] = d;
				if (index === threshold) {
					total += d;
					index = i / resolution >> 0;
					segments[index] = curLS;
					lengths[index] = total;
					d = 0;
					curLS = [];
				}
			}
			return { length: total, lengths: lengths, segments: segments };
		},
		    BezierPlugin = _gsScope._gsDefine.plugin({
			propName: "bezier",
			priority: -1,
			version: "1.3.8",
			API: 2,
			global: true,

			//gets called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
			init: function init(target, vars, tween) {
				this._target = target;
				if (vars instanceof Array) {
					vars = { values: vars };
				}
				this._func = {};
				this._mod = {};
				this._props = [];
				this._timeRes = vars.timeResolution == null ? 6 : parseInt(vars.timeResolution, 10);
				var values = vars.values || [],
				    first = {},
				    second = values[0],
				    autoRotate = vars.autoRotate || tween.vars.orientToBezier,
				    p,
				    isFunc,
				    i,
				    j,
				    prepend;

				this._autoRotate = autoRotate ? autoRotate instanceof Array ? autoRotate : [["x", "y", "rotation", autoRotate === true ? 0 : Number(autoRotate) || 0]] : null;
				for (p in second) {
					this._props.push(p);
				}

				i = this._props.length;
				while (--i > -1) {
					p = this._props[i];

					this._overwriteProps.push(p);
					isFunc = this._func[p] = typeof target[p] === "function";
					first[p] = !isFunc ? parseFloat(target[p]) : target[p.indexOf("set") || typeof target["get" + p.substr(3)] !== "function" ? p : "get" + p.substr(3)]();
					if (!prepend) if (first[p] !== values[0][p]) {
						prepend = first;
					}
				}
				this._beziers = vars.type !== "cubic" && vars.type !== "quadratic" && vars.type !== "soft" ? bezierThrough(values, isNaN(vars.curviness) ? 1 : vars.curviness, false, vars.type === "thruBasic", vars.correlate, prepend) : _parseBezierData(values, vars.type, first);
				this._segCount = this._beziers[p].length;

				if (this._timeRes) {
					var ld = _parseLengthData(this._beziers, this._timeRes);
					this._length = ld.length;
					this._lengths = ld.lengths;
					this._segments = ld.segments;
					this._l1 = this._li = this._s1 = this._si = 0;
					this._l2 = this._lengths[0];
					this._curSeg = this._segments[0];
					this._s2 = this._curSeg[0];
					this._prec = 1 / this._curSeg.length;
				}

				if (autoRotate = this._autoRotate) {
					this._initialRotations = [];
					if (!(autoRotate[0] instanceof Array)) {
						this._autoRotate = autoRotate = [autoRotate];
					}
					i = autoRotate.length;
					while (--i > -1) {
						for (j = 0; j < 3; j++) {
							p = autoRotate[i][j];
							this._func[p] = typeof target[p] === "function" ? target[p.indexOf("set") || typeof target["get" + p.substr(3)] !== "function" ? p : "get" + p.substr(3)] : false;
						}
						p = autoRotate[i][2];
						this._initialRotations[i] = (this._func[p] ? this._func[p].call(this._target) : this._target[p]) || 0;
						this._overwriteProps.push(p);
					}
				}
				this._startRatio = tween.vars.runBackwards ? 1 : 0; //we determine the starting ratio when the tween inits which is always 0 unless the tween has runBackwards:true (indicating it's a from() tween) in which case it's 1.
				return true;
			},

			//called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
			set: function set(v) {
				var segments = this._segCount,
				    func = this._func,
				    target = this._target,
				    notStart = v !== this._startRatio,
				    curIndex,
				    inv,
				    i,
				    p,
				    b,
				    t,
				    val,
				    l,
				    lengths,
				    curSeg;
				if (!this._timeRes) {
					curIndex = v < 0 ? 0 : v >= 1 ? segments - 1 : segments * v >> 0;
					t = (v - curIndex * (1 / segments)) * segments;
				} else {
					lengths = this._lengths;
					curSeg = this._curSeg;
					v *= this._length;
					i = this._li;
					//find the appropriate segment (if the currently cached one isn't correct)
					if (v > this._l2 && i < segments - 1) {
						l = segments - 1;
						while (i < l && (this._l2 = lengths[++i]) <= v) {}
						this._l1 = lengths[i - 1];
						this._li = i;
						this._curSeg = curSeg = this._segments[i];
						this._s2 = curSeg[this._s1 = this._si = 0];
					} else if (v < this._l1 && i > 0) {
						while (i > 0 && (this._l1 = lengths[--i]) >= v) {}
						if (i === 0 && v < this._l1) {
							this._l1 = 0;
						} else {
							i++;
						}
						this._l2 = lengths[i];
						this._li = i;
						this._curSeg = curSeg = this._segments[i];
						this._s1 = curSeg[(this._si = curSeg.length - 1) - 1] || 0;
						this._s2 = curSeg[this._si];
					}
					curIndex = i;
					//now find the appropriate sub-segment (we split it into the number of pieces that was defined by "precision" and measured each one)
					v -= this._l1;
					i = this._si;
					if (v > this._s2 && i < curSeg.length - 1) {
						l = curSeg.length - 1;
						while (i < l && (this._s2 = curSeg[++i]) <= v) {}
						this._s1 = curSeg[i - 1];
						this._si = i;
					} else if (v < this._s1 && i > 0) {
						while (i > 0 && (this._s1 = curSeg[--i]) >= v) {}
						if (i === 0 && v < this._s1) {
							this._s1 = 0;
						} else {
							i++;
						}
						this._s2 = curSeg[i];
						this._si = i;
					}
					t = (i + (v - this._s1) / (this._s2 - this._s1)) * this._prec || 0;
				}
				inv = 1 - t;

				i = this._props.length;
				while (--i > -1) {
					p = this._props[i];
					b = this._beziers[p][curIndex];
					val = (t * t * b.da + 3 * inv * (t * b.ca + inv * b.ba)) * t + b.a;
					if (this._mod[p]) {
						val = this._mod[p](val, target);
					}
					if (func[p]) {
						target[p](val);
					} else {
						target[p] = val;
					}
				}

				if (this._autoRotate) {
					var ar = this._autoRotate,
					    b2,
					    x1,
					    y1,
					    x2,
					    y2,
					    add,
					    conv;
					i = ar.length;
					while (--i > -1) {
						p = ar[i][2];
						add = ar[i][3] || 0;
						conv = ar[i][4] === true ? 1 : _RAD2DEG;
						b = this._beziers[ar[i][0]];
						b2 = this._beziers[ar[i][1]];

						if (b && b2) {
							//in case one of the properties got overwritten.
							b = b[curIndex];
							b2 = b2[curIndex];

							x1 = b.a + (b.b - b.a) * t;
							x2 = b.b + (b.c - b.b) * t;
							x1 += (x2 - x1) * t;
							x2 += (b.c + (b.d - b.c) * t - x2) * t;

							y1 = b2.a + (b2.b - b2.a) * t;
							y2 = b2.b + (b2.c - b2.b) * t;
							y1 += (y2 - y1) * t;
							y2 += (b2.c + (b2.d - b2.c) * t - y2) * t;

							val = notStart ? Math.atan2(y2 - y1, x2 - x1) * conv + add : this._initialRotations[i];

							if (this._mod[p]) {
								val = this._mod[p](val, target); //for modProps
							}

							if (func[p]) {
								target[p](val);
							} else {
								target[p] = val;
							}
						}
					}
				}
			}
		}),
		    p = BezierPlugin.prototype;

		BezierPlugin.bezierThrough = bezierThrough;
		BezierPlugin.cubicToQuadratic = cubicToQuadratic;
		BezierPlugin._autoCSS = true; //indicates that this plugin can be inserted into the "css" object using the autoCSS feature of TweenLite
		BezierPlugin.quadraticToCubic = function (a, b, c) {
			return new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
		};

		BezierPlugin._cssRegister = function () {
			var CSSPlugin = _globals.CSSPlugin;
			if (!CSSPlugin) {
				return;
			}
			var _internals = CSSPlugin._internals,
			    _parseToProxy = _internals._parseToProxy,
			    _setPluginRatio = _internals._setPluginRatio,
			    CSSPropTween = _internals.CSSPropTween;
			_internals._registerComplexSpecialProp("bezier", { parser: function parser(t, e, prop, cssp, pt, plugin) {
					if (e instanceof Array) {
						e = { values: e };
					}
					plugin = new BezierPlugin();
					var values = e.values,
					    l = values.length - 1,
					    pluginValues = [],
					    v = {},
					    i,
					    p,
					    data;
					if (l < 0) {
						return pt;
					}
					for (i = 0; i <= l; i++) {
						data = _parseToProxy(t, values[i], cssp, pt, plugin, l !== i);
						pluginValues[i] = data.end;
					}
					for (p in e) {
						v[p] = e[p]; //duplicate the vars object because we need to alter some things which would cause problems if the user plans to reuse the same vars object for another tween.
					}
					v.values = pluginValues;
					pt = new CSSPropTween(t, "bezier", 0, 0, data.pt, 2);
					pt.data = data;
					pt.plugin = plugin;
					pt.setRatio = _setPluginRatio;
					if (v.autoRotate === 0) {
						v.autoRotate = true;
					}
					if (v.autoRotate && !(v.autoRotate instanceof Array)) {
						i = v.autoRotate === true ? 0 : Number(v.autoRotate);
						v.autoRotate = data.end.left != null ? [["left", "top", "rotation", i, false]] : data.end.x != null ? [["x", "y", "rotation", i, false]] : false;
					}
					if (v.autoRotate) {
						if (!cssp._transform) {
							cssp._enableTransforms(false);
						}
						data.autoRotate = cssp._target._gsTransform;
						data.proxy.rotation = data.autoRotate.rotation || 0;
						cssp._overwriteProps.push("rotation");
					}
					plugin._onInitTween(data.proxy, v, cssp._tween);
					return pt;
				} });
		};

		p._mod = function (lookup) {
			var op = this._overwriteProps,
			    i = op.length,
			    val;
			while (--i > -1) {
				val = lookup[op[i]];
				if (val && typeof val === "function") {
					this._mod[op[i]] = val;
				}
			}
		};

		p._kill = function (lookup) {
			var a = this._props,
			    p,
			    i;
			for (p in this._beziers) {
				if (p in lookup) {
					delete this._beziers[p];
					delete this._func[p];
					i = a.length;
					while (--i > -1) {
						if (a[i] === p) {
							a.splice(i, 1);
						}
					}
				}
			}
			a = this._autoRotate;
			if (a) {
				i = a.length;
				while (--i > -1) {
					if (lookup[a[i][2]]) {
						a.splice(i, 1);
					}
				}
			}
			return this._super._kill.call(this, lookup);
		};
	})();

	/*
  * ----------------------------------------------------------------
  * CSSPlugin
  * ----------------------------------------------------------------
  */
	_gsScope._gsDefine("plugins.CSSPlugin", ["plugins.TweenPlugin", "TweenLite"], function (TweenPlugin, TweenLite) {

		/** @constructor **/
		var CSSPlugin = function CSSPlugin() {
			TweenPlugin.call(this, "css");
			this._overwriteProps.length = 0;
			this.setRatio = CSSPlugin.prototype.setRatio; //speed optimization (avoid prototype lookup on this "hot" method)
		},
		    _globals = _gsScope._gsDefine.globals,
		    _hasPriority,
		    //turns true whenever a CSSPropTween instance is created that has a priority other than 0. This helps us discern whether or not we should spend the time organizing the linked list or not after a CSSPlugin's _onInitTween() method is called.
		_suffixMap,
		    //we set this in _onInitTween() each time as a way to have a persistent variable we can use in other methods like _parse() without having to pass it around as a parameter and we keep _parse() decoupled from a particular CSSPlugin instance
		_cs,
		    //computed style (we store this in a shared variable to conserve memory and make minification tighter
		_overwriteProps,
		    //alias to the currently instantiating CSSPlugin's _overwriteProps array. We use this closure in order to avoid having to pass a reference around from method to method and aid in minification.
		_specialProps = {},
		    p = CSSPlugin.prototype = new TweenPlugin("css");

		p.constructor = CSSPlugin;
		CSSPlugin.version = "1.20.0";
		CSSPlugin.API = 2;
		CSSPlugin.defaultTransformPerspective = 0;
		CSSPlugin.defaultSkewType = "compensated";
		CSSPlugin.defaultSmoothOrigin = true;
		p = "px"; //we'll reuse the "p" variable to keep file size down
		CSSPlugin.suffixMap = { top: p, right: p, bottom: p, left: p, width: p, height: p, fontSize: p, padding: p, margin: p, perspective: p, lineHeight: "" };

		var _numExp = /(?:\-|\.|\b)(\d|\.|e\-)+/g,
		    _relNumExp = /(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,
		    _valuesExp = /(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,
		    //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like "1px 5px 20px rgb(255,102,51)"
		_NaNExp = /(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,
		    //also allows scientific notation and doesn't kill the leading -/+ in -= and +=
		_suffixExp = /(?:\d|\-|\+|=|#|\.)*/g,
		    _opacityExp = /opacity *= *([^)]*)/i,
		    _opacityValExp = /opacity:([^;]*)/i,
		    _alphaFilterExp = /alpha\(opacity *=.+?\)/i,
		    _rgbhslExp = /^(rgb|hsl)/,
		    _capsExp = /([A-Z])/g,
		    _camelExp = /-([a-z])/gi,
		    _urlExp = /(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,
		    //for pulling out urls from url(...) or url("...") strings (some browsers wrap urls in quotes, some don't when reporting things like backgroundImage)
		_camelFunc = function _camelFunc(s, g) {
			return g.toUpperCase();
		},
		    _horizExp = /(?:Left|Right|Width)/i,
		    _ieGetMatrixExp = /(M11|M12|M21|M22)=[\d\-\.e]+/gi,
		    _ieSetMatrixExp = /progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,
		    _commasOutsideParenExp = /,(?=[^\)]*(?:\(|$))/gi,
		    //finds any commas that are not within parenthesis
		_complexExp = /[\s,\(]/i,
		    //for testing a string to find if it has a space, comma, or open parenthesis (clues that it's a complex value)
		_DEG2RAD = Math.PI / 180,
		    _RAD2DEG = 180 / Math.PI,
		    _forcePT = {},
		    _dummyElement = { style: {} },
		    _doc = _gsScope.document || { createElement: function createElement() {
				return _dummyElement;
			} },
		    _createElement = function _createElement(type, ns) {
			return _doc.createElementNS ? _doc.createElementNS(ns || "http://www.w3.org/1999/xhtml", type) : _doc.createElement(type);
		},
		    _tempDiv = _createElement("div"),
		    _tempImg = _createElement("img"),
		    _internals = CSSPlugin._internals = { _specialProps: _specialProps },
		    //provides a hook to a few internal methods that we need to access from inside other plugins
		_agent = (_gsScope.navigator || {}).userAgent || "",
		    _autoRound,
		    _reqSafariFix,
		    //we won't apply the Safari transform fix until we actually come across a tween that affects a transform property (to maintain best performance).

		_isSafari,
		    _isFirefox,
		    //Firefox has a bug that causes 3D transformed elements to randomly disappear unless a repaint is forced after each update on each element.
		_isSafariLT6,
		    //Safari (and Android 4 which uses a flavor of Safari) has a bug that prevents changes to "top" and "left" properties from rendering properly if changed on the same frame as a transform UNLESS we set the element's WebkitBackfaceVisibility to hidden (weird, I know). Doing this for Android 3 and earlier seems to actually cause other problems, though (fun!)
		_ieVers,
		    _supportsOpacity = function () {
			//we set _isSafari, _ieVers, _isFirefox, and _supportsOpacity all in one function here to reduce file size slightly, especially in the minified version.
			var i = _agent.indexOf("Android"),
			    a = _createElement("a");
			_isSafari = _agent.indexOf("Safari") !== -1 && _agent.indexOf("Chrome") === -1 && (i === -1 || parseFloat(_agent.substr(i + 8, 2)) > 3);
			_isSafariLT6 = _isSafari && parseFloat(_agent.substr(_agent.indexOf("Version/") + 8, 2)) < 6;
			_isFirefox = _agent.indexOf("Firefox") !== -1;
			if (/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(_agent) || /Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(_agent)) {
				_ieVers = parseFloat(RegExp.$1);
			}
			if (!a) {
				return false;
			}
			a.style.cssText = "top:1px;opacity:.55;";
			return (/^0.55/.test(a.style.opacity)
			);
		}(),
		    _getIEOpacity = function _getIEOpacity(v) {
			return _opacityExp.test(typeof v === "string" ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || "") ? parseFloat(RegExp.$1) / 100 : 1;
		},
		    _log = function _log(s) {
			//for logging messages, but in a way that won't throw errors in old versions of IE.
			if (_gsScope.console) {
				console.log(s);
			}
		},
		    _target,
		    //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params
		_index,
		    //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params

		_prefixCSS = "",
		    //the non-camelCase vendor prefix like "-o-", "-moz-", "-ms-", or "-webkit-"
		_prefix = "",
		    //camelCase vendor prefix like "O", "ms", "Webkit", or "Moz".

		// @private feed in a camelCase property name like "transform" and it will check to see if it is valid as-is or if it needs a vendor prefix. It returns the corrected camelCase property name (i.e. "WebkitTransform" or "MozTransform" or "transform" or null if no such property is found, like if the browser is IE8 or before, "transform" won't be found at all)
		_checkPropPrefix = function _checkPropPrefix(p, e) {
			e = e || _tempDiv;
			var s = e.style,
			    a,
			    i;
			if (s[p] !== undefined) {
				return p;
			}
			p = p.charAt(0).toUpperCase() + p.substr(1);
			a = ["O", "Moz", "ms", "Ms", "Webkit"];
			i = 5;
			while (--i > -1 && s[a[i] + p] === undefined) {}
			if (i >= 0) {
				_prefix = i === 3 ? "ms" : a[i];
				_prefixCSS = "-" + _prefix.toLowerCase() + "-";
				return _prefix + p;
			}
			return null;
		},
		    _getComputedStyle = _doc.defaultView ? _doc.defaultView.getComputedStyle : function () {},


		/**
   * @private Returns the css style for a particular property of an element. For example, to get whatever the current "left" css value for an element with an ID of "myElement", you could do:
   * var currentLeft = CSSPlugin.getStyle( document.getElementById("myElement"), "left");
   *
   * @param {!Object} t Target element whose style property you want to query
   * @param {!string} p Property name (like "left" or "top" or "marginTop", etc.)
   * @param {Object=} cs Computed style object. This just provides a way to speed processing if you're going to get several properties on the same element in quick succession - you can reuse the result of the getComputedStyle() call.
   * @param {boolean=} calc If true, the value will not be read directly from the element's "style" property (if it exists there), but instead the getComputedStyle() result will be used. This can be useful when you want to ensure that the browser itself is interpreting the value.
   * @param {string=} dflt Default value that should be returned in the place of null, "none", "auto" or "auto auto".
   * @return {?string} The current property value
   */
		_getStyle = CSSPlugin.getStyle = function (t, p, cs, calc, dflt) {
			var rv;
			if (!_supportsOpacity) if (p === "opacity") {
				//several versions of IE don't use the standard "opacity" property - they use things like filter:alpha(opacity=50), so we parse that here.
				return _getIEOpacity(t);
			}
			if (!calc && t.style[p]) {
				rv = t.style[p];
			} else if (cs = cs || _getComputedStyle(t)) {
				rv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, "-$1").toLowerCase());
			} else if (t.currentStyle) {
				rv = t.currentStyle[p];
			}
			return dflt != null && (!rv || rv === "none" || rv === "auto" || rv === "auto auto") ? dflt : rv;
		},


		/**
   * @private Pass the target element, the property name, the numeric value, and the suffix (like "%", "em", "px", etc.) and it will spit back the equivalent pixel number.
   * @param {!Object} t Target element
   * @param {!string} p Property name (like "left", "top", "marginLeft", etc.)
   * @param {!number} v Value
   * @param {string=} sfx Suffix (like "px" or "%" or "em")
   * @param {boolean=} recurse If true, the call is a recursive one. In some browsers (like IE7/8), occasionally the value isn't accurately reported initially, but if we run the function again it will take effect.
   * @return {number} value in pixels
   */
		_convertToPixels = _internals.convertToPixels = function (t, p, v, sfx, recurse) {
			if (sfx === "px" || !sfx && p !== "lineHeight") {
				return v;
			}
			if (sfx === "auto" || !v) {
				return 0;
			}
			var horiz = _horizExp.test(p),
			    node = t,
			    style = _tempDiv.style,
			    neg = v < 0,
			    precise = v === 1,
			    pix,
			    cache,
			    time;
			if (neg) {
				v = -v;
			}
			if (precise) {
				v *= 100;
			}
			if (p === "lineHeight" && !sfx) {
				//special case of when a simple lineHeight (without a unit) is used. Set it to the value, read back the computed value, and then revert.
				cache = _getComputedStyle(t).lineHeight;
				t.style.lineHeight = v;
				pix = parseFloat(_getComputedStyle(t).lineHeight);
				t.style.lineHeight = cache;
			} else if (sfx === "%" && p.indexOf("border") !== -1) {
				pix = v / 100 * (horiz ? t.clientWidth : t.clientHeight);
			} else {
				style.cssText = "border:0 solid red;position:" + _getStyle(t, "position") + ";line-height:0;";
				if (sfx === "%" || !node.appendChild || sfx.charAt(0) === "v" || sfx === "rem") {
					node = t.parentNode || _doc.body;
					if (_getStyle(node, "display").indexOf("flex") !== -1) {
						//Edge and IE11 have a bug that causes offsetWidth to report as 0 if the container has display:flex and the child is position:relative. Switching to position: absolute solves it.
						style.position = "absolute";
					}
					cache = node._gsCache;
					time = TweenLite.ticker.frame;
					if (cache && horiz && cache.time === time) {
						//performance optimization: we record the width of elements along with the ticker frame so that we can quickly get it again on the same tick (seems relatively safe to assume it wouldn't change on the same tick)
						return cache.width * v / 100;
					}
					style[horiz ? "width" : "height"] = v + sfx;
				} else {
					style[horiz ? "borderLeftWidth" : "borderTopWidth"] = v + sfx;
				}
				node.appendChild(_tempDiv);
				pix = parseFloat(_tempDiv[horiz ? "offsetWidth" : "offsetHeight"]);
				node.removeChild(_tempDiv);
				if (horiz && sfx === "%" && CSSPlugin.cacheWidths !== false) {
					cache = node._gsCache = node._gsCache || {};
					cache.time = time;
					cache.width = pix / v * 100;
				}
				if (pix === 0 && !recurse) {
					pix = _convertToPixels(t, p, v, sfx, true);
				}
			}
			if (precise) {
				pix /= 100;
			}
			return neg ? -pix : pix;
		},
		    _calculateOffset = _internals.calculateOffset = function (t, p, cs) {
			//for figuring out "top" or "left" in px when it's "auto". We need to factor in margin with the offsetLeft/offsetTop
			if (_getStyle(t, "position", cs) !== "absolute") {
				return 0;
			}
			var dim = p === "left" ? "Left" : "Top",
			    v = _getStyle(t, "margin" + dim, cs);
			return t["offset" + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, "")) || 0);
		},


		// @private returns at object containing ALL of the style properties in camelCase and their associated values.
		_getAllStyles = function _getAllStyles(t, cs) {
			var s = {},
			    i,
			    tr,
			    p;
			if (cs = cs || _getComputedStyle(t, null)) {
				if (i = cs.length) {
					while (--i > -1) {
						p = cs[i];
						if (p.indexOf("-transform") === -1 || _transformPropCSS === p) {
							//Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
							s[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p);
						}
					}
				} else {
					//some browsers behave differently - cs.length is always 0, so we must do a for...in loop.
					for (i in cs) {
						if (i.indexOf("Transform") === -1 || _transformProp === i) {
							//Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
							s[i] = cs[i];
						}
					}
				}
			} else if (cs = t.currentStyle || t.style) {
				for (i in cs) {
					if (typeof i === "string" && s[i] === undefined) {
						s[i.replace(_camelExp, _camelFunc)] = cs[i];
					}
				}
			}
			if (!_supportsOpacity) {
				s.opacity = _getIEOpacity(t);
			}
			tr = _getTransform(t, cs, false);
			s.rotation = tr.rotation;
			s.skewX = tr.skewX;
			s.scaleX = tr.scaleX;
			s.scaleY = tr.scaleY;
			s.x = tr.x;
			s.y = tr.y;
			if (_supports3D) {
				s.z = tr.z;
				s.rotationX = tr.rotationX;
				s.rotationY = tr.rotationY;
				s.scaleZ = tr.scaleZ;
			}
			if (s.filters) {
				delete s.filters;
			}
			return s;
		},


		// @private analyzes two style objects (as returned by _getAllStyles()) and only looks for differences between them that contain tweenable values (like a number or color). It returns an object with a "difs" property which refers to an object containing only those isolated properties and values for tweening, and a "firstMPT" property which refers to the first MiniPropTween instance in a linked list that recorded all the starting values of the different properties so that we can revert to them at the end or beginning of the tween - we don't want the cascading to get messed up. The forceLookup parameter is an optional generic object with properties that should be forced into the results - this is necessary for className tweens that are overwriting others because imagine a scenario where a rollover/rollout adds/removes a class and the user swipes the mouse over the target SUPER fast, thus nothing actually changed yet and the subsequent comparison of the properties would indicate they match (especially when px rounding is taken into consideration), thus no tweening is necessary even though it SHOULD tween and remove those properties after the tween (otherwise the inline styles will contaminate things). See the className SpecialProp code for details.
		_cssDif = function _cssDif(t, s1, s2, vars, forceLookup) {
			var difs = {},
			    style = t.style,
			    val,
			    p,
			    mpt;
			for (p in s2) {
				if (p !== "cssText") if (p !== "length") if (isNaN(p)) if (s1[p] !== (val = s2[p]) || forceLookup && forceLookup[p]) if (p.indexOf("Origin") === -1) if (typeof val === "number" || typeof val === "string") {
					difs[p] = val === "auto" && (p === "left" || p === "top") ? _calculateOffset(t, p) : (val === "" || val === "auto" || val === "none") && typeof s1[p] === "string" && s1[p].replace(_NaNExp, "") !== "" ? 0 : val; //if the ending value is defaulting ("" or "auto"), we check the starting value and if it can be parsed into a number (a string which could have a suffix too, like 700px), then we swap in 0 for "" or "auto" so that things actually tween.
					if (style[p] !== undefined) {
						//for className tweens, we must remember which properties already existed inline - the ones that didn't should be removed when the tween isn't in progress because they were only introduced to facilitate the transition between classes.
						mpt = new MiniPropTween(style, p, style[p], mpt);
					}
				}
			}
			if (vars) {
				for (p in vars) {
					//copy properties (except className)
					if (p !== "className") {
						difs[p] = vars[p];
					}
				}
			}
			return { difs: difs, firstMPT: mpt };
		},
		    _dimensions = { width: ["Left", "Right"], height: ["Top", "Bottom"] },
		    _margins = ["marginLeft", "marginRight", "marginTop", "marginBottom"],


		/**
   * @private Gets the width or height of an element
   * @param {!Object} t Target element
   * @param {!string} p Property name ("width" or "height")
   * @param {Object=} cs Computed style object (if one exists). Just a speed optimization.
   * @return {number} Dimension (in pixels)
   */
		_getDimension = function _getDimension(t, p, cs) {
			if ((t.nodeName + "").toLowerCase() === "svg") {
				//Chrome no longer supports offsetWidth/offsetHeight on SVG elements.
				return (cs || _getComputedStyle(t))[p] || 0;
			} else if (t.getCTM && _isSVG(t)) {
				return t.getBBox()[p] || 0;
			}
			var v = parseFloat(p === "width" ? t.offsetWidth : t.offsetHeight),
			    a = _dimensions[p],
			    i = a.length;
			cs = cs || _getComputedStyle(t, null);
			while (--i > -1) {
				v -= parseFloat(_getStyle(t, "padding" + a[i], cs, true)) || 0;
				v -= parseFloat(_getStyle(t, "border" + a[i] + "Width", cs, true)) || 0;
			}
			return v;
		},


		// @private Parses position-related complex strings like "top left" or "50px 10px" or "70% 20%", etc. which are used for things like transformOrigin or backgroundPosition. Optionally decorates a supplied object (recObj) with the following properties: "ox" (offsetX), "oy" (offsetY), "oxp" (if true, "ox" is a percentage not a pixel value), and "oxy" (if true, "oy" is a percentage not a pixel value)
		_parsePosition = function _parsePosition(v, recObj) {
			if (v === "contain" || v === "auto" || v === "auto auto") {
				//note: Firefox uses "auto auto" as default whereas Chrome uses "auto".
				return v + " ";
			}
			if (v == null || v === "") {
				v = "0 0";
			}
			var a = v.split(" "),
			    x = v.indexOf("left") !== -1 ? "0%" : v.indexOf("right") !== -1 ? "100%" : a[0],
			    y = v.indexOf("top") !== -1 ? "0%" : v.indexOf("bottom") !== -1 ? "100%" : a[1],
			    i;
			if (a.length > 3 && !recObj) {
				//multiple positions
				a = v.split(", ").join(",").split(",");
				v = [];
				for (i = 0; i < a.length; i++) {
					v.push(_parsePosition(a[i]));
				}
				return v.join(",");
			}
			if (y == null) {
				y = x === "center" ? "50%" : "0";
			} else if (y === "center") {
				y = "50%";
			}
			if (x === "center" || isNaN(parseFloat(x)) && (x + "").indexOf("=") === -1) {
				//remember, the user could flip-flop the values and say "bottom center" or "center bottom", etc. "center" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an "=" sign in the value, it's relative.
				x = "50%";
			}
			v = x + " " + y + (a.length > 2 ? " " + a[2] : "");
			if (recObj) {
				recObj.oxp = x.indexOf("%") !== -1;
				recObj.oyp = y.indexOf("%") !== -1;
				recObj.oxr = x.charAt(1) === "=";
				recObj.oyr = y.charAt(1) === "=";
				recObj.ox = parseFloat(x.replace(_NaNExp, ""));
				recObj.oy = parseFloat(y.replace(_NaNExp, ""));
				recObj.v = v;
			}
			return recObj || v;
		},


		/**
   * @private Takes an ending value (typically a string, but can be a number) and a starting value and returns the change between the two, looking for relative value indicators like += and -= and it also ignores suffixes (but make sure the ending value starts with a number or +=/-= and that the starting value is a NUMBER!)
   * @param {(number|string)} e End value which is typically a string, but could be a number
   * @param {(number|string)} b Beginning value which is typically a string but could be a number
   * @return {number} Amount of change between the beginning and ending values (relative values that have a "+=" or "-=" are recognized)
   */
		_parseChange = function _parseChange(e, b) {
			if (typeof e === "function") {
				e = e(_index, _target);
			}
			return typeof e === "string" && e.charAt(1) === "=" ? parseInt(e.charAt(0) + "1", 10) * parseFloat(e.substr(2)) : parseFloat(e) - parseFloat(b) || 0;
		},


		/**
   * @private Takes a value and a default number, checks if the value is relative, null, or numeric and spits back a normalized number accordingly. Primarily used in the _parseTransform() function.
   * @param {Object} v Value to be parsed
   * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
   * @return {number} Parsed value
   */
		_parseVal = function _parseVal(v, d) {
			if (typeof v === "function") {
				v = v(_index, _target);
			}
			return v == null ? d : typeof v === "string" && v.charAt(1) === "=" ? parseInt(v.charAt(0) + "1", 10) * parseFloat(v.substr(2)) + d : parseFloat(v) || 0;
		},


		/**
   * @private Translates strings like "40deg" or "40" or 40rad" or "+=40deg" or "270_short" or "-90_cw" or "+=45_ccw" to a numeric radian angle. Of course a starting/default value must be fed in too so that relative values can be calculated properly.
   * @param {Object} v Value to be parsed
   * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
   * @param {string=} p property name for directionalEnd (optional - only used when the parsed value is directional ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation). Property name would be "rotation", "rotationX", or "rotationY"
   * @param {Object=} directionalEnd An object that will store the raw end values for directional angles ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation.
   * @return {number} parsed angle in radians
   */
		_parseAngle = function _parseAngle(v, d, p, directionalEnd) {
			var min = 0.000001,
			    cap,
			    split,
			    dif,
			    result,
			    isRelative;
			if (typeof v === "function") {
				v = v(_index, _target);
			}
			if (v == null) {
				result = d;
			} else if (typeof v === "number") {
				result = v;
			} else {
				cap = 360;
				split = v.split("_");
				isRelative = v.charAt(1) === "=";
				dif = (isRelative ? parseInt(v.charAt(0) + "1", 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * (v.indexOf("rad") === -1 ? 1 : _RAD2DEG) - (isRelative ? 0 : d);
				if (split.length) {
					if (directionalEnd) {
						directionalEnd[p] = d + dif;
					}
					if (v.indexOf("short") !== -1) {
						dif = dif % cap;
						if (dif !== dif % (cap / 2)) {
							dif = dif < 0 ? dif + cap : dif - cap;
						}
					}
					if (v.indexOf("_cw") !== -1 && dif < 0) {
						dif = (dif + cap * 9999999999) % cap - (dif / cap | 0) * cap;
					} else if (v.indexOf("ccw") !== -1 && dif > 0) {
						dif = (dif - cap * 9999999999) % cap - (dif / cap | 0) * cap;
					}
				}
				result = d + dif;
			}
			if (result < min && result > -min) {
				result = 0;
			}
			return result;
		},
		    _colorLookup = { aqua: [0, 255, 255],
			lime: [0, 255, 0],
			silver: [192, 192, 192],
			black: [0, 0, 0],
			maroon: [128, 0, 0],
			teal: [0, 128, 128],
			blue: [0, 0, 255],
			navy: [0, 0, 128],
			white: [255, 255, 255],
			fuchsia: [255, 0, 255],
			olive: [128, 128, 0],
			yellow: [255, 255, 0],
			orange: [255, 165, 0],
			gray: [128, 128, 128],
			purple: [128, 0, 128],
			green: [0, 128, 0],
			red: [255, 0, 0],
			pink: [255, 192, 203],
			cyan: [0, 255, 255],
			transparent: [255, 255, 255, 0] },
		    _hue = function _hue(h, m1, m2) {
			h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;
			return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < 0.5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * 255 + 0.5 | 0;
		},


		/**
   * @private Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%)) into an array with 3 elements for red, green, and blue or if toHSL parameter is true, it will populate the array with hue, saturation, and lightness values. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases it will be populated with numbers).
   * @param {(string|number)} v The value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.
   * @param {(boolean)} toHSL If true, an hsl() or hsla() value will be returned instead of rgb() or rgba()
   * @return {Array.<number>} An array containing red, green, and blue (and optionally alpha) in that order, or if the toHSL parameter was true, the array will contain hue, saturation and lightness (and optionally alpha) in that order. Always numbers unless there's a relative prefix found in an hsl() or hsla() string and toHSL is true.
   */
		_parseColor = CSSPlugin.parseColor = function (v, toHSL) {
			var a, r, g, b, h, s, l, max, min, d, wasHSL;
			if (!v) {
				a = _colorLookup.black;
			} else if (typeof v === "number") {
				a = [v >> 16, v >> 8 & 255, v & 255];
			} else {
				if (v.charAt(v.length - 1) === ",") {
					//sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
					v = v.substr(0, v.length - 1);
				}
				if (_colorLookup[v]) {
					a = _colorLookup[v];
				} else if (v.charAt(0) === "#") {
					if (v.length === 4) {
						//for shorthand like #9F0
						r = v.charAt(1);
						g = v.charAt(2);
						b = v.charAt(3);
						v = "#" + r + r + g + g + b + b;
					}
					v = parseInt(v.substr(1), 16);
					a = [v >> 16, v >> 8 & 255, v & 255];
				} else if (v.substr(0, 3) === "hsl") {
					a = wasHSL = v.match(_numExp);
					if (!toHSL) {
						h = Number(a[0]) % 360 / 360;
						s = Number(a[1]) / 100;
						l = Number(a[2]) / 100;
						g = l <= 0.5 ? l * (s + 1) : l + s - l * s;
						r = l * 2 - g;
						if (a.length > 3) {
							a[3] = Number(v[3]);
						}
						a[0] = _hue(h + 1 / 3, r, g);
						a[1] = _hue(h, r, g);
						a[2] = _hue(h - 1 / 3, r, g);
					} else if (v.indexOf("=") !== -1) {
						//if relative values are found, just return the raw strings with the relative prefixes in place.
						return v.match(_relNumExp);
					}
				} else {
					a = v.match(_numExp) || _colorLookup.transparent;
				}
				a[0] = Number(a[0]);
				a[1] = Number(a[1]);
				a[2] = Number(a[2]);
				if (a.length > 3) {
					a[3] = Number(a[3]);
				}
			}
			if (toHSL && !wasHSL) {
				r = a[0] / 255;
				g = a[1] / 255;
				b = a[2] / 255;
				max = Math.max(r, g, b);
				min = Math.min(r, g, b);
				l = (max + min) / 2;
				if (max === min) {
					h = s = 0;
				} else {
					d = max - min;
					s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
					h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
					h *= 60;
				}
				a[0] = h + 0.5 | 0;
				a[1] = s * 100 + 0.5 | 0;
				a[2] = l * 100 + 0.5 | 0;
			}
			return a;
		},
		    _formatColors = function _formatColors(s, toHSL) {
			var colors = s.match(_colorExp) || [],
			    charIndex = 0,
			    parsed = "",
			    i,
			    color,
			    temp;
			if (!colors.length) {
				return s;
			}
			for (i = 0; i < colors.length; i++) {
				color = colors[i];
				temp = s.substr(charIndex, s.indexOf(color, charIndex) - charIndex);
				charIndex += temp.length + color.length;
				color = _parseColor(color, toHSL);
				if (color.length === 3) {
					color.push(1);
				}
				parsed += temp + (toHSL ? "hsla(" + color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : "rgba(" + color.join(",")) + ")";
			}
			return parsed + s.substr(charIndex);
		},
		    _colorExp = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b"; //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.

		for (p in _colorLookup) {
			_colorExp += "|" + p + "\\b";
		}
		_colorExp = new RegExp(_colorExp + ")", "gi");

		CSSPlugin.colorStringFilter = function (a) {
			var combined = a[0] + " " + a[1],
			    toHSL;
			if (_colorExp.test(combined)) {
				toHSL = combined.indexOf("hsl(") !== -1 || combined.indexOf("hsla(") !== -1;
				a[0] = _formatColors(a[0], toHSL);
				a[1] = _formatColors(a[1], toHSL);
			}
			_colorExp.lastIndex = 0;
		};

		if (!TweenLite.defaultStringFilter) {
			TweenLite.defaultStringFilter = CSSPlugin.colorStringFilter;
		}

		/**
   * @private Returns a formatter function that handles taking a string (or number in some cases) and returning a consistently formatted one in terms of delimiters, quantity of values, etc. For example, we may get boxShadow values defined as "0px red" or "0px 0px 10px rgb(255,0,0)" or "0px 0px 20px 20px #F00" and we need to ensure that what we get back is described with 4 numbers and a color. This allows us to feed it into the _parseComplex() method and split the values up appropriately. The neat thing about this _getFormatter() function is that the dflt defines a pattern as well as a default, so for example, _getFormatter("0px 0px 0px 0px #777", true) not only sets the default as 0px for all distances and #777 for the color, but also sets the pattern such that 4 numbers and a color will always get returned.
   * @param {!string} dflt The default value and pattern to follow. So "0px 0px 0px 0px #777" will ensure that 4 numbers and a color will always get returned.
   * @param {boolean=} clr If true, the values should be searched for color-related data. For example, boxShadow values typically contain a color whereas borderRadius don't.
   * @param {boolean=} collapsible If true, the value is a top/left/right/bottom style one that acts like margin or padding, where if only one value is received, it's used for all 4; if 2 are received, the first is duplicated for 3rd (bottom) and the 2nd is duplicated for the 4th spot (left), etc.
   * @return {Function} formatter function
   */
		var _getFormatter = function _getFormatter(dflt, clr, collapsible, multi) {
			if (dflt == null) {
				return function (v) {
					return v;
				};
			}
			var dColor = clr ? (dflt.match(_colorExp) || [""])[0] : "",
			    dVals = dflt.split(dColor).join("").match(_valuesExp) || [],
			    pfx = dflt.substr(0, dflt.indexOf(dVals[0])),
			    sfx = dflt.charAt(dflt.length - 1) === ")" ? ")" : "",
			    delim = dflt.indexOf(" ") !== -1 ? " " : ",",
			    numVals = dVals.length,
			    dSfx = numVals > 0 ? dVals[0].replace(_numExp, "") : "",
			    _formatter2;
			if (!numVals) {
				return function (v) {
					return v;
				};
			}
			if (clr) {
				_formatter2 = function formatter(v) {
					var color, vals, i, a;
					if (typeof v === "number") {
						v += dSfx;
					} else if (multi && _commasOutsideParenExp.test(v)) {
						a = v.replace(_commasOutsideParenExp, "|").split("|");
						for (i = 0; i < a.length; i++) {
							a[i] = _formatter2(a[i]);
						}
						return a.join(",");
					}
					color = (v.match(_colorExp) || [dColor])[0];
					vals = v.split(color).join("").match(_valuesExp) || [];
					i = vals.length;
					if (numVals > i--) {
						while (++i < numVals) {
							vals[i] = collapsible ? vals[(i - 1) / 2 | 0] : dVals[i];
						}
					}
					return pfx + vals.join(delim) + delim + color + sfx + (v.indexOf("inset") !== -1 ? " inset" : "");
				};
				return _formatter2;
			}
			_formatter2 = function _formatter(v) {
				var vals, a, i;
				if (typeof v === "number") {
					v += dSfx;
				} else if (multi && _commasOutsideParenExp.test(v)) {
					a = v.replace(_commasOutsideParenExp, "|").split("|");
					for (i = 0; i < a.length; i++) {
						a[i] = _formatter2(a[i]);
					}
					return a.join(",");
				}
				vals = v.match(_valuesExp) || [];
				i = vals.length;
				if (numVals > i--) {
					while (++i < numVals) {
						vals[i] = collapsible ? vals[(i - 1) / 2 | 0] : dVals[i];
					}
				}
				return pfx + vals.join(delim) + sfx;
			};
			return _formatter2;
		},


		/**
   * @private returns a formatter function that's used for edge-related values like marginTop, marginLeft, paddingBottom, paddingRight, etc. Just pass a comma-delimited list of property names related to the edges.
   * @param {!string} props a comma-delimited list of property names in order from top to left, like "marginTop,marginRight,marginBottom,marginLeft"
   * @return {Function} a formatter function
   */
		_getEdgeParser = function _getEdgeParser(props) {
			props = props.split(",");
			return function (t, e, p, cssp, pt, plugin, vars) {
				var a = (e + "").split(" "),
				    i;
				vars = {};
				for (i = 0; i < 4; i++) {
					vars[props[i]] = a[i] = a[i] || a[(i - 1) / 2 >> 0];
				}
				return cssp.parse(t, vars, pt, plugin);
			};
		},


		// @private used when other plugins must tween values first, like BezierPlugin or ThrowPropsPlugin, etc. That plugin's setRatio() gets called first so that the values are updated, and then we loop through the MiniPropTweens which handle copying the values into their appropriate slots so that they can then be applied correctly in the main CSSPlugin setRatio() method. Remember, we typically create a proxy object that has a bunch of uniquely-named properties that we feed to the sub-plugin and it does its magic normally, and then we must interpret those values and apply them to the css because often numbers must get combined/concatenated, suffixes added, etc. to work with css, like boxShadow could have 4 values plus a color.
		_setPluginRatio = _internals._setPluginRatio = function (v) {
			this.plugin.setRatio(v);
			var d = this.data,
			    proxy = d.proxy,
			    mpt = d.firstMPT,
			    min = 0.000001,
			    val,
			    pt,
			    i,
			    str,
			    p;
			while (mpt) {
				val = proxy[mpt.v];
				if (mpt.r) {
					val = Math.round(val);
				} else if (val < min && val > -min) {
					val = 0;
				}
				mpt.t[mpt.p] = val;
				mpt = mpt._next;
			}
			if (d.autoRotate) {
				d.autoRotate.rotation = d.mod ? d.mod(proxy.rotation, this.t) : proxy.rotation; //special case for ModifyPlugin to hook into an auto-rotating bezier
			}
			//at the end, we must set the CSSPropTween's "e" (end) value dynamically here because that's what is used in the final setRatio() method. Same for "b" at the beginning.
			if (v === 1 || v === 0) {
				mpt = d.firstMPT;
				p = v === 1 ? "e" : "b";
				while (mpt) {
					pt = mpt.t;
					if (!pt.type) {
						pt[p] = pt.s + pt.xs0;
					} else if (pt.type === 1) {
						str = pt.xs0 + pt.s + pt.xs1;
						for (i = 1; i < pt.l; i++) {
							str += pt["xn" + i] + pt["xs" + (i + 1)];
						}
						pt[p] = str;
					}
					mpt = mpt._next;
				}
			}
		},


		/**
   * @private @constructor Used by a few SpecialProps to hold important values for proxies. For example, _parseToProxy() creates a MiniPropTween instance for each property that must get tweened on the proxy, and we record the original property name as well as the unique one we create for the proxy, plus whether or not the value needs to be rounded plus the original value.
   * @param {!Object} t target object whose property we're tweening (often a CSSPropTween)
   * @param {!string} p property name
   * @param {(number|string|object)} v value
   * @param {MiniPropTween=} next next MiniPropTween in the linked list
   * @param {boolean=} r if true, the tweened value should be rounded to the nearest integer
   */
		MiniPropTween = function MiniPropTween(t, p, v, next, r) {
			this.t = t;
			this.p = p;
			this.v = v;
			this.r = r;
			if (next) {
				next._prev = this;
				this._next = next;
			}
		},


		/**
   * @private Most other plugins (like BezierPlugin and ThrowPropsPlugin and others) can only tween numeric values, but CSSPlugin must accommodate special values that have a bunch of extra data (like a suffix or strings between numeric values, etc.). For example, boxShadow has values like "10px 10px 20px 30px rgb(255,0,0)" which would utterly confuse other plugins. This method allows us to split that data apart and grab only the numeric data and attach it to uniquely-named properties of a generic proxy object ({}) so that we can feed that to virtually any plugin to have the numbers tweened. However, we must also keep track of which properties from the proxy go with which CSSPropTween values and instances. So we create a linked list of MiniPropTweens. Each one records a target (the original CSSPropTween), property (like "s" or "xn1" or "xn2") that we're tweening and the unique property name that was used for the proxy (like "boxShadow_xn1" and "boxShadow_xn2") and whether or not they need to be rounded. That way, in the _setPluginRatio() method we can simply copy the values over from the proxy to the CSSPropTween instance(s). Then, when the main CSSPlugin setRatio() method runs and applies the CSSPropTween values accordingly, they're updated nicely. So the external plugin tweens the numbers, _setPluginRatio() copies them over, and setRatio() acts normally, applying css-specific values to the element.
   * This method returns an object that has the following properties:
   *  - proxy: a generic object containing the starting values for all the properties that will be tweened by the external plugin.  This is what we feed to the external _onInitTween() as the target
   *  - end: a generic object containing the ending values for all the properties that will be tweened by the external plugin. This is what we feed to the external plugin's _onInitTween() as the destination values
   *  - firstMPT: the first MiniPropTween in the linked list
   *  - pt: the first CSSPropTween in the linked list that was created when parsing. If shallow is true, this linked list will NOT attach to the one passed into the _parseToProxy() as the "pt" (4th) parameter.
   * @param {!Object} t target object to be tweened
   * @param {!(Object|string)} vars the object containing the information about the tweening values (typically the end/destination values) that should be parsed
   * @param {!CSSPlugin} cssp The CSSPlugin instance
   * @param {CSSPropTween=} pt the next CSSPropTween in the linked list
   * @param {TweenPlugin=} plugin the external TweenPlugin instance that will be handling tweening the numeric values
   * @param {boolean=} shallow if true, the resulting linked list from the parse will NOT be attached to the CSSPropTween that was passed in as the "pt" (4th) parameter.
   * @return An object containing the following properties: proxy, end, firstMPT, and pt (see above for descriptions)
   */
		_parseToProxy = _internals._parseToProxy = function (t, vars, cssp, pt, plugin, shallow) {
			var bpt = pt,
			    start = {},
			    end = {},
			    transform = cssp._transform,
			    oldForce = _forcePT,
			    i,
			    p,
			    xp,
			    mpt,
			    firstPT;
			cssp._transform = null;
			_forcePT = vars;
			pt = firstPT = cssp.parse(t, vars, pt, plugin);
			_forcePT = oldForce;
			//break off from the linked list so the new ones are isolated.
			if (shallow) {
				cssp._transform = transform;
				if (bpt) {
					bpt._prev = null;
					if (bpt._prev) {
						bpt._prev._next = null;
					}
				}
			}
			while (pt && pt !== bpt) {
				if (pt.type <= 1) {
					p = pt.p;
					end[p] = pt.s + pt.c;
					start[p] = pt.s;
					if (!shallow) {
						mpt = new MiniPropTween(pt, "s", p, mpt, pt.r);
						pt.c = 0;
					}
					if (pt.type === 1) {
						i = pt.l;
						while (--i > 0) {
							xp = "xn" + i;
							p = pt.p + "_" + xp;
							end[p] = pt.data[xp];
							start[p] = pt[xp];
							if (!shallow) {
								mpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]);
							}
						}
					}
				}
				pt = pt._next;
			}
			return { proxy: start, end: end, firstMPT: mpt, pt: firstPT };
		},


		/**
   * @constructor Each property that is tweened has at least one CSSPropTween associated with it. These instances store important information like the target, property, starting value, amount of change, etc. They can also optionally have a number of "extra" strings and numeric values named xs1, xn1, xs2, xn2, xs3, xn3, etc. where "s" indicates string and "n" indicates number. These can be pieced together in a complex-value tween (type:1) that has alternating types of data like a string, number, string, number, etc. For example, boxShadow could be "5px 5px 8px rgb(102, 102, 51)". In that value, there are 6 numbers that may need to tween and then pieced back together into a string again with spaces, suffixes, etc. xs0 is special in that it stores the suffix for standard (type:0) tweens, -OR- the first string (prefix) in a complex-value (type:1) CSSPropTween -OR- it can be the non-tweening value in a type:-1 CSSPropTween. We do this to conserve memory.
   * CSSPropTweens have the following optional properties as well (not defined through the constructor):
   *  - l: Length in terms of the number of extra properties that the CSSPropTween has (default: 0). For example, for a boxShadow we may need to tween 5 numbers in which case l would be 5; Keep in mind that the start/end values for the first number that's tweened are always stored in the s and c properties to conserve memory. All additional values thereafter are stored in xn1, xn2, etc.
   *  - xfirst: The first instance of any sub-CSSPropTweens that are tweening properties of this instance. For example, we may split up a boxShadow tween so that there's a main CSSPropTween of type:1 that has various xs* and xn* values associated with the h-shadow, v-shadow, blur, color, etc. Then we spawn a CSSPropTween for each of those that has a higher priority and runs BEFORE the main CSSPropTween so that the values are all set by the time it needs to re-assemble them. The xfirst gives us an easy way to identify the first one in that chain which typically ends at the main one (because they're all prepende to the linked list)
   *  - plugin: The TweenPlugin instance that will handle the tweening of any complex values. For example, sometimes we don't want to use normal subtweens (like xfirst refers to) to tween the values - we might want ThrowPropsPlugin or BezierPlugin some other plugin to do the actual tweening, so we create a plugin instance and store a reference here. We need this reference so that if we get a request to round values or disable a tween, we can pass along that request.
   *  - data: Arbitrary data that needs to be stored with the CSSPropTween. Typically if we're going to have a plugin handle the tweening of a complex-value tween, we create a generic object that stores the END values that we're tweening to and the CSSPropTween's xs1, xs2, etc. have the starting values. We store that object as data. That way, we can simply pass that object to the plugin and use the CSSPropTween as the target.
   *  - setRatio: Only used for type:2 tweens that require custom functionality. In this case, we call the CSSPropTween's setRatio() method and pass the ratio each time the tween updates. This isn't quite as efficient as doing things directly in the CSSPlugin's setRatio() method, but it's very convenient and flexible.
   * @param {!Object} t Target object whose property will be tweened. Often a DOM element, but not always. It could be anything.
   * @param {string} p Property to tween (name). For example, to tween element.width, p would be "width".
   * @param {number} s Starting numeric value
   * @param {number} c Change in numeric value over the course of the entire tween. For example, if element.width starts at 5 and should end at 100, c would be 95.
   * @param {CSSPropTween=} next The next CSSPropTween in the linked list. If one is defined, we will define its _prev as the new instance, and the new instance's _next will be pointed at it.
   * @param {number=} type The type of CSSPropTween where -1 = a non-tweening value, 0 = a standard simple tween, 1 = a complex value (like one that has multiple numbers in a comma- or space-delimited string like border:"1px solid red"), and 2 = one that uses a custom setRatio function that does all of the work of applying the values on each update.
   * @param {string=} n Name of the property that should be used for overwriting purposes which is typically the same as p but not always. For example, we may need to create a subtween for the 2nd part of a "clip:rect(...)" tween in which case "p" might be xs1 but "n" is still "clip"
   * @param {boolean=} r If true, the value(s) should be rounded
   * @param {number=} pr Priority in the linked list order. Higher priority CSSPropTweens will be updated before lower priority ones. The default priority is 0.
   * @param {string=} b Beginning value. We store this to ensure that it is EXACTLY what it was when the tween began without any risk of interpretation issues.
   * @param {string=} e Ending value. We store this to ensure that it is EXACTLY what the user defined at the end of the tween without any risk of interpretation issues.
   */
		CSSPropTween = _internals.CSSPropTween = function (t, p, s, c, next, type, n, r, pr, b, e) {
			this.t = t; //target
			this.p = p; //property
			this.s = s; //starting value
			this.c = c; //change value
			this.n = n || p; //name that this CSSPropTween should be associated to (usually the same as p, but not always - n is what overwriting looks at)
			if (!(t instanceof CSSPropTween)) {
				_overwriteProps.push(this.n);
			}
			this.r = r; //round (boolean)
			this.type = type || 0; //0 = normal tween, -1 = non-tweening (in which case xs0 will be applied to the target's property, like tp.t[tp.p] = tp.xs0), 1 = complex-value SpecialProp, 2 = custom setRatio() that does all the work
			if (pr) {
				this.pr = pr;
				_hasPriority = true;
			}
			this.b = b === undefined ? s : b;
			this.e = e === undefined ? s + c : e;
			if (next) {
				this._next = next;
				next._prev = this;
			}
		},
		    _addNonTweeningNumericPT = function _addNonTweeningNumericPT(target, prop, start, end, next, overwriteProp) {
			//cleans up some code redundancies and helps minification. Just a fast way to add a NUMERIC non-tweening CSSPropTween
			var pt = new CSSPropTween(target, prop, start, end - start, next, -1, overwriteProp);
			pt.b = start;
			pt.e = pt.xs0 = end;
			return pt;
		},


		/**
   * Takes a target, the beginning value and ending value (as strings) and parses them into a CSSPropTween (possibly with child CSSPropTweens) that accommodates multiple numbers, colors, comma-delimited values, etc. For example:
   * sp.parseComplex(element, "boxShadow", "5px 10px 20px rgb(255,102,51)", "0px 0px 0px red", true, "0px 0px 0px rgb(0,0,0,0)", pt);
   * It will walk through the beginning and ending values (which should be in the same format with the same number and type of values) and figure out which parts are numbers, what strings separate the numeric/tweenable values, and then create the CSSPropTweens accordingly. If a plugin is defined, no child CSSPropTweens will be created. Instead, the ending values will be stored in the "data" property of the returned CSSPropTween like: {s:-5, xn1:-10, xn2:-20, xn3:255, xn4:0, xn5:0} so that it can be fed to any other plugin and it'll be plain numeric tweens but the recomposition of the complex value will be handled inside CSSPlugin's setRatio().
   * If a setRatio is defined, the type of the CSSPropTween will be set to 2 and recomposition of the values will be the responsibility of that method.
   *
   * @param {!Object} t Target whose property will be tweened
   * @param {!string} p Property that will be tweened (its name, like "left" or "backgroundColor" or "boxShadow")
   * @param {string} b Beginning value
   * @param {string} e Ending value
   * @param {boolean} clrs If true, the value could contain a color value like "rgb(255,0,0)" or "#F00" or "red". The default is false, so no colors will be recognized (a performance optimization)
   * @param {(string|number|Object)} dflt The default beginning value that should be used if no valid beginning value is defined or if the number of values inside the complex beginning and ending values don't match
   * @param {?CSSPropTween} pt CSSPropTween instance that is the current head of the linked list (we'll prepend to this).
   * @param {number=} pr Priority in the linked list order. Higher priority properties will be updated before lower priority ones. The default priority is 0.
   * @param {TweenPlugin=} plugin If a plugin should handle the tweening of extra properties, pass the plugin instance here. If one is defined, then NO subtweens will be created for any extra properties (the properties will be created - just not additional CSSPropTween instances to tween them) because the plugin is expected to do so. However, the end values WILL be populated in the "data" property, like {s:100, xn1:50, xn2:300}
   * @param {function(number)=} setRatio If values should be set in a custom function instead of being pieced together in a type:1 (complex-value) CSSPropTween, define that custom function here.
   * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parseComplex() call.
   */
		_parseComplex = CSSPlugin.parseComplex = function (t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {
			//DEBUG: _log("parseComplex: "+p+", b: "+b+", e: "+e);
			b = b || dflt || "";
			if (typeof e === "function") {
				e = e(_index, _target);
			}
			pt = new CSSPropTween(t, p, 0, 0, pt, setRatio ? 2 : 1, null, false, pr, b, e);
			e += ""; //ensures it's a string
			if (clrs && _colorExp.test(e + b)) {
				//if colors are found, normalize the formatting to rgba() or hsla().
				e = [b, e];
				CSSPlugin.colorStringFilter(e);
				b = e[0];
				e = e[1];
			}
			var ba = b.split(", ").join(",").split(" "),
			    //beginning array
			ea = e.split(", ").join(",").split(" "),
			    //ending array
			l = ba.length,
			    autoRound = _autoRound !== false,
			    i,
			    xi,
			    ni,
			    bv,
			    ev,
			    bnums,
			    enums,
			    bn,
			    hasAlpha,
			    temp,
			    cv,
			    str,
			    useHSL;
			if (e.indexOf(",") !== -1 || b.indexOf(",") !== -1) {
				ba = ba.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
				ea = ea.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
				l = ba.length;
			}
			if (l !== ea.length) {
				//DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
				ba = (dflt || "").split(" ");
				l = ba.length;
			}
			pt.plugin = plugin;
			pt.setRatio = setRatio;
			_colorExp.lastIndex = 0;
			for (i = 0; i < l; i++) {
				bv = ba[i];
				ev = ea[i];
				bn = parseFloat(bv);
				//if the value begins with a number (most common). It's fine if it has a suffix like px
				if (bn || bn === 0) {
					pt.appendXtra("", bn, _parseChange(ev, bn), ev.replace(_relNumExp, ""), autoRound && ev.indexOf("px") !== -1, true);

					//if the value is a color
				} else if (clrs && _colorExp.test(bv)) {
					str = ev.indexOf(")") + 1;
					str = ")" + (str ? ev.substr(str) : ""); //if there's a comma or ) at the end, retain it.
					useHSL = ev.indexOf("hsl") !== -1 && _supportsOpacity;
					temp = ev; //original string value so we can look for any prefix later.
					bv = _parseColor(bv, useHSL);
					ev = _parseColor(ev, useHSL);
					hasAlpha = bv.length + ev.length > 6;
					if (hasAlpha && !_supportsOpacity && ev[3] === 0) {
						//older versions of IE don't support rgba(), so if the destination alpha is 0, just use "transparent" for the end color
						pt["xs" + pt.l] += pt.l ? " transparent" : "transparent";
						pt.e = pt.e.split(ea[i]).join("transparent");
					} else {
						if (!_supportsOpacity) {
							//old versions of IE don't support rgba().
							hasAlpha = false;
						}
						if (useHSL) {
							pt.appendXtra(temp.substr(0, temp.indexOf("hsl")) + (hasAlpha ? "hsla(" : "hsl("), bv[0], _parseChange(ev[0], bv[0]), ",", false, true).appendXtra("", bv[1], _parseChange(ev[1], bv[1]), "%,", false).appendXtra("", bv[2], _parseChange(ev[2], bv[2]), hasAlpha ? "%," : "%" + str, false);
						} else {
							pt.appendXtra(temp.substr(0, temp.indexOf("rgb")) + (hasAlpha ? "rgba(" : "rgb("), bv[0], ev[0] - bv[0], ",", true, true).appendXtra("", bv[1], ev[1] - bv[1], ",", true).appendXtra("", bv[2], ev[2] - bv[2], hasAlpha ? "," : str, true);
						}

						if (hasAlpha) {
							bv = bv.length < 4 ? 1 : bv[3];
							pt.appendXtra("", bv, (ev.length < 4 ? 1 : ev[3]) - bv, str, false);
						}
					}
					_colorExp.lastIndex = 0; //otherwise the test() on the RegExp could move the lastIndex and taint future results.
				} else {
					bnums = bv.match(_numExp); //gets each group of numbers in the beginning value string and drops them into an array

					//if no number is found, treat it as a non-tweening value and just append the string to the current xs.
					if (!bnums) {
						pt["xs" + pt.l] += pt.l || pt["xs" + pt.l] ? " " + ev : ev;

						//loop through all the numbers that are found and construct the extra values on the pt.
					} else {
						enums = ev.match(_relNumExp); //get each group of numbers in the end value string and drop them into an array. We allow relative values too, like +=50 or -=.5
						if (!enums || enums.length !== bnums.length) {
							//DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
							return pt;
						}
						ni = 0;
						for (xi = 0; xi < bnums.length; xi++) {
							cv = bnums[xi];
							temp = bv.indexOf(cv, ni);
							pt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), "", autoRound && bv.substr(temp + cv.length, 2) === "px", xi === 0);
							ni = temp + cv.length;
						}
						pt["xs" + pt.l] += bv.substr(ni);
					}
				}
			}
			//if there are relative values ("+=" or "-=" prefix), we need to adjust the ending value to eliminate the prefixes and combine the values properly.
			if (e.indexOf("=") !== -1) if (pt.data) {
				str = pt.xs0 + pt.data.s;
				for (i = 1; i < pt.l; i++) {
					str += pt["xs" + i] + pt.data["xn" + i];
				}
				pt.e = str + pt["xs" + i];
			}
			if (!pt.l) {
				pt.type = -1;
				pt.xs0 = pt.e;
			}
			return pt.xfirst || pt;
		},
		    i = 9;

		p = CSSPropTween.prototype;
		p.l = p.pr = 0; //length (number of extra properties like xn1, xn2, xn3, etc.
		while (--i > 0) {
			p["xn" + i] = 0;
			p["xs" + i] = "";
		}
		p.xs0 = "";
		p._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;

		/**
   * Appends and extra tweening value to a CSSPropTween and automatically manages any prefix and suffix strings. The first extra value is stored in the s and c of the main CSSPropTween instance, but thereafter any extras are stored in the xn1, xn2, xn3, etc. The prefixes and suffixes are stored in the xs0, xs1, xs2, etc. properties. For example, if I walk through a clip value like "rect(10px, 5px, 0px, 20px)", the values would be stored like this:
   * xs0:"rect(", s:10, xs1:"px, ", xn1:5, xs2:"px, ", xn2:0, xs3:"px, ", xn3:20, xn4:"px)"
   * And they'd all get joined together when the CSSPlugin renders (in the setRatio() method).
   * @param {string=} pfx Prefix (if any)
   * @param {!number} s Starting value
   * @param {!number} c Change in numeric value over the course of the entire tween. For example, if the start is 5 and the end is 100, the change would be 95.
   * @param {string=} sfx Suffix (if any)
   * @param {boolean=} r Round (if true).
   * @param {boolean=} pad If true, this extra value should be separated by the previous one by a space. If there is no previous extra and pad is true, it will automatically drop the space.
   * @return {CSSPropTween} returns itself so that multiple methods can be chained together.
   */
		p.appendXtra = function (pfx, s, c, sfx, r, pad) {
			var pt = this,
			    l = pt.l;
			pt["xs" + l] += pad && (l || pt["xs" + l]) ? " " + pfx : pfx || "";
			if (!c) if (l !== 0 && !pt.plugin) {
				//typically we'll combine non-changing values right into the xs to optimize performance, but we don't combine them when there's a plugin that will be tweening the values because it may depend on the values being split apart, like for a bezier, if a value doesn't change between the first and second iteration but then it does on the 3rd, we'll run into trouble because there's no xn slot for that value!
				pt["xs" + l] += s + (sfx || "");
				return pt;
			}
			pt.l++;
			pt.type = pt.setRatio ? 2 : 1;
			pt["xs" + pt.l] = sfx || "";
			if (l > 0) {
				pt.data["xn" + l] = s + c;
				pt.rxp["xn" + l] = r; //round extra property (we need to tap into this in the _parseToProxy() method)
				pt["xn" + l] = s;
				if (!pt.plugin) {
					pt.xfirst = new CSSPropTween(pt, "xn" + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr);
					pt.xfirst.xs0 = 0; //just to ensure that the property stays numeric which helps modern browsers speed up processing. Remember, in the setRatio() method, we do pt.t[pt.p] = val + pt.xs0 so if pt.xs0 is "" (the default), it'll cast the end value as a string. When a property is a number sometimes and a string sometimes, it prevents the compiler from locking in the data type, slowing things down slightly.
				}
				return pt;
			}
			pt.data = { s: s + c };
			pt.rxp = {};
			pt.s = s;
			pt.c = c;
			pt.r = r;
			return pt;
		};

		/**
   * @constructor A SpecialProp is basically a css property that needs to be treated in a non-standard way, like if it may contain a complex value like boxShadow:"5px 10px 15px rgb(255, 102, 51)" or if it is associated with another plugin like ThrowPropsPlugin or BezierPlugin. Every SpecialProp is associated with a particular property name like "boxShadow" or "throwProps" or "bezier" and it will intercept those values in the vars object that's passed to the CSSPlugin and handle them accordingly.
   * @param {!string} p Property name (like "boxShadow" or "throwProps")
   * @param {Object=} options An object containing any of the following configuration options:
   *                      - defaultValue: the default value
   *                      - parser: A function that should be called when the associated property name is found in the vars. This function should return a CSSPropTween instance and it should ensure that it is properly inserted into the linked list. It will receive 4 paramters: 1) The target, 2) The value defined in the vars, 3) The CSSPlugin instance (whose _firstPT should be used for the linked list), and 4) A computed style object if one was calculated (this is a speed optimization that allows retrieval of starting values quicker)
   *                      - formatter: a function that formats any value received for this special property (for example, boxShadow could take "5px 5px red" and format it to "5px 5px 0px 0px red" so that both the beginning and ending values have a common order and quantity of values.)
   *                      - prefix: if true, we'll determine whether or not this property requires a vendor prefix (like Webkit or Moz or ms or O)
   *                      - color: set this to true if the value for this SpecialProp may contain color-related values like rgb(), rgba(), etc.
   *                      - priority: priority in the linked list order. Higher priority SpecialProps will be updated before lower priority ones. The default priority is 0.
   *                      - multi: if true, the formatter should accommodate a comma-delimited list of values, like boxShadow could have multiple boxShadows listed out.
   *                      - collapsible: if true, the formatter should treat the value like it's a top/right/bottom/left value that could be collapsed, like "5px" would apply to all, "5px, 10px" would use 5px for top/bottom and 10px for right/left, etc.
   *                      - keyword: a special keyword that can [optionally] be found inside the value (like "inset" for boxShadow). This allows us to validate beginning/ending values to make sure they match (if the keyword is found in one, it'll be added to the other for consistency by default).
   */
		var SpecialProp = function SpecialProp(p, options) {
			options = options || {};
			this.p = options.prefix ? _checkPropPrefix(p) || p : p;
			_specialProps[p] = _specialProps[this.p] = this;
			this.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);
			if (options.parser) {
				this.parse = options.parser;
			}
			this.clrs = options.color;
			this.multi = options.multi;
			this.keyword = options.keyword;
			this.dflt = options.defaultValue;
			this.pr = options.priority || 0;
		},


		//shortcut for creating a new SpecialProp that can accept multiple properties as a comma-delimited list (helps minification). dflt can be an array for multiple values (we don't do a comma-delimited list because the default value may contain commas, like rect(0px,0px,0px,0px)). We attach this method to the SpecialProp class/object instead of using a private _createSpecialProp() method so that we can tap into it externally if necessary, like from another plugin.
		_registerComplexSpecialProp = _internals._registerComplexSpecialProp = function (p, options, defaults) {
			if ((typeof options === "undefined" ? "undefined" : _typeof(options)) !== "object") {
				options = { parser: defaults }; //to make backwards compatible with older versions of BezierPlugin and ThrowPropsPlugin
			}
			var a = p.split(","),
			    d = options.defaultValue,
			    i,
			    temp;
			defaults = defaults || [d];
			for (i = 0; i < a.length; i++) {
				options.prefix = i === 0 && options.prefix;
				options.defaultValue = defaults[i] || d;
				temp = new SpecialProp(a[i], options);
			}
		},


		//creates a placeholder special prop for a plugin so that the property gets caught the first time a tween of it is attempted, and at that time it makes the plugin register itself, thus taking over for all future tweens of that property. This allows us to not mandate that things load in a particular order and it also allows us to log() an error that informs the user when they attempt to tween an external plugin-related property without loading its .js file.
		_registerPluginProp = _internals._registerPluginProp = function (p) {
			if (!_specialProps[p]) {
				var pluginName = p.charAt(0).toUpperCase() + p.substr(1) + "Plugin";
				_registerComplexSpecialProp(p, { parser: function parser(t, e, p, cssp, pt, plugin, vars) {
						var pluginClass = _globals.com.greensock.plugins[pluginName];
						if (!pluginClass) {
							_log("Error: " + pluginName + " js file not loaded.");
							return pt;
						}
						pluginClass._cssRegister();
						return _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars);
					} });
			}
		};

		p = SpecialProp.prototype;

		/**
   * Alias for _parseComplex() that automatically plugs in certain values for this SpecialProp, like its property name, whether or not colors should be sensed, the default value, and priority. It also looks for any keyword that the SpecialProp defines (like "inset" for boxShadow) and ensures that the beginning and ending values have the same number of values for SpecialProps where multi is true (like boxShadow and textShadow can have a comma-delimited list)
   * @param {!Object} t target element
   * @param {(string|number|object)} b beginning value
   * @param {(string|number|object)} e ending (destination) value
   * @param {CSSPropTween=} pt next CSSPropTween in the linked list
   * @param {TweenPlugin=} plugin If another plugin will be tweening the complex value, that TweenPlugin instance goes here.
   * @param {function=} setRatio If a custom setRatio() method should be used to handle this complex value, that goes here.
   * @return {CSSPropTween=} First CSSPropTween in the linked list
   */
		p.parseComplex = function (t, b, e, pt, plugin, setRatio) {
			var kwd = this.keyword,
			    i,
			    ba,
			    ea,
			    l,
			    bi,
			    ei;
			//if this SpecialProp's value can contain a comma-delimited list of values (like boxShadow or textShadow), we must parse them in a special way, and look for a keyword (like "inset" for boxShadow) and ensure that the beginning and ending BOTH have it if the end defines it as such. We also must ensure that there are an equal number of values specified (we can't tween 1 boxShadow to 3 for example)
			if (this.multi) if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {
				ba = b.replace(_commasOutsideParenExp, "|").split("|");
				ea = e.replace(_commasOutsideParenExp, "|").split("|");
			} else if (kwd) {
				ba = [b];
				ea = [e];
			}
			if (ea) {
				l = ea.length > ba.length ? ea.length : ba.length;
				for (i = 0; i < l; i++) {
					b = ba[i] = ba[i] || this.dflt;
					e = ea[i] = ea[i] || this.dflt;
					if (kwd) {
						bi = b.indexOf(kwd);
						ei = e.indexOf(kwd);
						if (bi !== ei) {
							if (ei === -1) {
								//if the keyword isn't in the end value, remove it from the beginning one.
								ba[i] = ba[i].split(kwd).join("");
							} else if (bi === -1) {
								//if the keyword isn't in the beginning, add it.
								ba[i] += " " + kwd;
							}
						}
					}
				}
				b = ba.join(", ");
				e = ea.join(", ");
			}
			return _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio);
		};

		/**
   * Accepts a target and end value and spits back a CSSPropTween that has been inserted into the CSSPlugin's linked list and conforms with all the conventions we use internally, like type:-1, 0, 1, or 2, setting up any extra property tweens, priority, etc. For example, if we have a boxShadow SpecialProp and call:
   * this._firstPT = sp.parse(element, "5px 10px 20px rgb(2550,102,51)", "boxShadow", this);
   * It should figure out the starting value of the element's boxShadow, compare it to the provided end value and create all the necessary CSSPropTweens of the appropriate types to tween the boxShadow. The CSSPropTween that gets spit back should already be inserted into the linked list (the 4th parameter is the current head, so prepend to that).
   * @param {!Object} t Target object whose property is being tweened
   * @param {Object} e End value as provided in the vars object (typically a string, but not always - like a throwProps would be an object).
   * @param {!string} p Property name
   * @param {!CSSPlugin} cssp The CSSPlugin instance that should be associated with this tween.
   * @param {?CSSPropTween} pt The CSSPropTween that is the current head of the linked list (we'll prepend to it)
   * @param {TweenPlugin=} plugin If a plugin will be used to tween the parsed value, this is the plugin instance.
   * @param {Object=} vars Original vars object that contains the data for parsing.
   * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parse() call.
   */
		p.parse = function (t, e, p, cssp, pt, plugin, vars) {
			return this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);
		};

		/**
   * Registers a special property that should be intercepted from any "css" objects defined in tweens. This allows you to handle them however you want without CSSPlugin doing it for you. The 2nd parameter should be a function that accepts 3 parameters:
   *  1) Target object whose property should be tweened (typically a DOM element)
   *  2) The end/destination value (could be a string, number, object, or whatever you want)
   *  3) The tween instance (you probably don't need to worry about this, but it can be useful for looking up information like the duration)
   *
   * Then, your function should return a function which will be called each time the tween gets rendered, passing a numeric "ratio" parameter to your function that indicates the change factor (usually between 0 and 1). For example:
   *
   * CSSPlugin.registerSpecialProp("myCustomProp", function(target, value, tween) {
   *      var start = target.style.width;
   *      return function(ratio) {
   *              target.style.width = (start + value * ratio) + "px";
   *              console.log("set width to " + target.style.width);
   *          }
   * }, 0);
   *
   * Then, when I do this tween, it will trigger my special property:
   *
   * TweenLite.to(element, 1, {css:{myCustomProp:100}});
   *
   * In the example, of course, we're just changing the width, but you can do anything you want.
   *
   * @param {!string} name Property name (or comma-delimited list of property names) that should be intercepted and handled by your function. For example, if I define "myCustomProp", then it would handle that portion of the following tween: TweenLite.to(element, 1, {css:{myCustomProp:100}})
   * @param {!function(Object, Object, Object, string):function(number)} onInitTween The function that will be called when a tween of this special property is performed. The function will receive 4 parameters: 1) Target object that should be tweened, 2) Value that was passed to the tween, 3) The tween instance itself (rarely used), and 4) The property name that's being tweened. Your function should return a function that should be called on every update of the tween. That function will receive a single parameter that is a "change factor" value (typically between 0 and 1) indicating the amount of change as a ratio. You can use this to determine how to set the values appropriately in your function.
   * @param {number=} priority Priority that helps the engine determine the order in which to set the properties (default: 0). Higher priority properties will be updated before lower priority ones.
   */
		CSSPlugin.registerSpecialProp = function (name, onInitTween, priority) {
			_registerComplexSpecialProp(name, { parser: function parser(t, e, p, cssp, pt, plugin, vars) {
					var rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);
					rv.plugin = plugin;
					rv.setRatio = onInitTween(t, e, cssp._tween, p);
					return rv;
				}, priority: priority });
		};

		//transform-related methods and properties
		CSSPlugin.useSVGTransformAttr = true; //Safari and Firefox both have some rendering bugs when applying CSS transforms to SVG elements, so default to using the "transform" attribute instead (users can override this).
		var _transformProps = "scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),
		    _transformProp = _checkPropPrefix("transform"),
		    //the Javascript (camelCase) transform property, like msTransform, WebkitTransform, MozTransform, or OTransform.
		_transformPropCSS = _prefixCSS + "transform",
		    _transformOriginProp = _checkPropPrefix("transformOrigin"),
		    _supports3D = _checkPropPrefix("perspective") !== null,
		    Transform = _internals.Transform = function () {
			this.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;
			this.force3D = CSSPlugin.defaultForce3D === false || !_supports3D ? false : CSSPlugin.defaultForce3D || "auto";
		},
		    _SVGElement = _gsScope.SVGElement,
		    _useSVGTransformAttr,

		//Some browsers (like Firefox and IE) don't honor transform-origin properly in SVG elements, so we need to manually adjust the matrix accordingly. We feature detect here rather than always doing the conversion for certain browsers because they may fix the problem at some point in the future.

		_createSVG = function _createSVG(type, container, attributes) {
			var element = _doc.createElementNS("http://www.w3.org/2000/svg", type),
			    reg = /([a-z])([A-Z])/g,
			    p;
			for (p in attributes) {
				element.setAttributeNS(null, p.replace(reg, "$1-$2").toLowerCase(), attributes[p]);
			}
			container.appendChild(element);
			return element;
		},
		    _docElement = _doc.documentElement || {},
		    _forceSVGTransformAttr = function () {
			//IE and Android stock don't support CSS transforms on SVG elements, so we must write them to the "transform" attribute. We populate this variable in the _parseTransform() method, and only if/when we come across an SVG element
			var force = _ieVers || /Android/i.test(_agent) && !_gsScope.chrome,
			    svg,
			    rect,
			    width;
			if (_doc.createElementNS && !force) {
				//IE8 and earlier doesn't support SVG anyway
				svg = _createSVG("svg", _docElement);
				rect = _createSVG("rect", svg, { width: 100, height: 50, x: 100 });
				width = rect.getBoundingClientRect().width;
				rect.style[_transformOriginProp] = "50% 50%";
				rect.style[_transformProp] = "scaleX(0.5)";
				force = width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D); //note: Firefox fails the test even though it does support CSS transforms in 3D. Since we can't push 3D stuff into the transform attribute, we force Firefox to pass the test here (as long as it does truly support 3D).
				_docElement.removeChild(svg);
			}
			return force;
		}(),
		    _parseSVGOrigin = function _parseSVGOrigin(e, local, decoratee, absolute, smoothOrigin, skipRecord) {
			var tm = e._gsTransform,
			    m = _getMatrix(e, true),
			    v,
			    x,
			    y,
			    xOrigin,
			    yOrigin,
			    a,
			    b,
			    c,
			    d,
			    tx,
			    ty,
			    determinant,
			    xOriginOld,
			    yOriginOld;
			if (tm) {
				xOriginOld = tm.xOrigin; //record the original values before we alter them.
				yOriginOld = tm.yOrigin;
			}
			if (!absolute || (v = absolute.split(" ")).length < 2) {
				b = e.getBBox();
				if (b.x === 0 && b.y === 0 && b.width + b.height === 0) {
					//some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.
					b = { x: parseFloat(e.hasAttribute("x") ? e.getAttribute("x") : e.hasAttribute("cx") ? e.getAttribute("cx") : 0) || 0, y: parseFloat(e.hasAttribute("y") ? e.getAttribute("y") : e.hasAttribute("cy") ? e.getAttribute("cy") : 0) || 0, width: 0, height: 0 };
				}
				local = _parsePosition(local).split(" ");
				v = [(local[0].indexOf("%") !== -1 ? parseFloat(local[0]) / 100 * b.width : parseFloat(local[0])) + b.x, (local[1].indexOf("%") !== -1 ? parseFloat(local[1]) / 100 * b.height : parseFloat(local[1])) + b.y];
			}
			decoratee.xOrigin = xOrigin = parseFloat(v[0]);
			decoratee.yOrigin = yOrigin = parseFloat(v[1]);
			if (absolute && m !== _identity2DMatrix) {
				//if svgOrigin is being set, we must invert the matrix and determine where the absolute point is, factoring in the current transforms. Otherwise, the svgOrigin would be based on the element's non-transformed position on the canvas.
				a = m[0];
				b = m[1];
				c = m[2];
				d = m[3];
				tx = m[4];
				ty = m[5];
				determinant = a * d - b * c;
				if (determinant) {
					//if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
					x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
					y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
					xOrigin = decoratee.xOrigin = v[0] = x;
					yOrigin = decoratee.yOrigin = v[1] = y;
				}
			}
			if (tm) {
				//avoid jump when transformOrigin is changed - adjust the x/y values accordingly
				if (skipRecord) {
					decoratee.xOffset = tm.xOffset;
					decoratee.yOffset = tm.yOffset;
					tm = decoratee;
				}
				if (smoothOrigin || smoothOrigin !== false && CSSPlugin.defaultSmoothOrigin !== false) {
					x = xOrigin - xOriginOld;
					y = yOrigin - yOriginOld;
					//originally, we simply adjusted the x and y values, but that would cause problems if, for example, you created a rotational tween part-way through an x/y tween. Managing the offset in a separate variable gives us ultimate flexibility.
					//tm.x -= x - (x * m[0] + y * m[2]);
					//tm.y -= y - (x * m[1] + y * m[3]);
					tm.xOffset += x * m[0] + y * m[2] - x;
					tm.yOffset += x * m[1] + y * m[3] - y;
				} else {
					tm.xOffset = tm.yOffset = 0;
				}
			}
			if (!skipRecord) {
				e.setAttribute("data-svg-origin", v.join(" "));
			}
		},
		    _getBBoxHack = function _getBBoxHack(swapIfPossible) {
			//works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
			var svg = _createElement("svg", this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
			    oldParent = this.parentNode,
			    oldSibling = this.nextSibling,
			    oldCSS = this.style.cssText,
			    bbox;
			_docElement.appendChild(svg);
			svg.appendChild(this);
			this.style.display = "block";
			if (swapIfPossible) {
				try {
					bbox = this.getBBox();
					this._originalGetBBox = this.getBBox;
					this.getBBox = _getBBoxHack;
				} catch (e) {}
			} else if (this._originalGetBBox) {
				bbox = this._originalGetBBox();
			}
			if (oldSibling) {
				oldParent.insertBefore(this, oldSibling);
			} else {
				oldParent.appendChild(this);
			}
			_docElement.removeChild(svg);
			this.style.cssText = oldCSS;
			return bbox;
		},
		    _getBBox = function _getBBox(e) {
			try {
				return e.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
			} catch (error) {
				return _getBBoxHack.call(e, true);
			}
		},
		    _isSVG = function _isSVG(e) {
			//reports if the element is an SVG on which getBBox() actually works
			return !!(_SVGElement && e.getCTM && _getBBox(e) && (!e.parentNode || e.ownerSVGElement));
		},
		    _identity2DMatrix = [1, 0, 0, 1, 0, 0],
		    _getMatrix = function _getMatrix(e, force2D) {
			var tm = e._gsTransform || new Transform(),
			    rnd = 100000,
			    style = e.style,
			    isDefault,
			    s,
			    m,
			    n,
			    dec,
			    none;
			if (_transformProp) {
				s = _getStyle(e, _transformPropCSS, null, true);
			} else if (e.currentStyle) {
				//for older versions of IE, we need to interpret the filter portion that is in the format: progid:DXImageTransform.Microsoft.Matrix(M11=6.123233995736766e-17, M12=-1, M21=1, M22=6.123233995736766e-17, sizingMethod='auto expand') Notice that we need to swap b and c compared to a normal matrix.
				s = e.currentStyle.filter.match(_ieGetMatrixExp);
				s = s && s.length === 4 ? [s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), tm.x || 0, tm.y || 0].join(",") : "";
			}
			isDefault = !s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)";
			if (_transformProp && ((none = _getComputedStyle(e).display === "none") || !e.parentNode)) {
				if (none) {
					//browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
					n = style.display;
					style.display = "block";
				}
				if (!e.parentNode) {
					dec = 1; //flag
					_docElement.appendChild(e);
				}
				s = _getStyle(e, _transformPropCSS, null, true);
				isDefault = !s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)";
				if (n) {
					style.display = n;
				} else if (none) {
					_removeProp(style, "display");
				}
				if (dec) {
					_docElement.removeChild(e);
				}
			}
			if (tm.svg || e.getCTM && _isSVG(e)) {
				if (isDefault && (style[_transformProp] + "").indexOf("matrix") !== -1) {
					//some browsers (like Chrome 40) don't correctly report transforms that are applied inline on an SVG element (they don't get included in the computed style), so we double-check here and accept matrix values
					s = style[_transformProp];
					isDefault = 0;
				}
				m = e.getAttribute("transform");
				if (isDefault && m) {
					if (m.indexOf("matrix") !== -1) {
						//just in case there's a "transform" value specified as an attribute instead of CSS style. Accept either a matrix() or simple translate() value though.
						s = m;
						isDefault = 0;
					} else if (m.indexOf("translate") !== -1) {
						s = "matrix(1,0,0,1," + m.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",") + ")";
						isDefault = 0;
					}
				}
			}
			if (isDefault) {
				return _identity2DMatrix;
			}
			//split the matrix values out into an array (m for matrix)
			m = (s || "").match(_numExp) || [];
			i = m.length;
			while (--i > -1) {
				n = Number(m[i]);
				m[i] = (dec = n - (n |= 0)) ? (dec * rnd + (dec < 0 ? -0.5 : 0.5) | 0) / rnd + n : n; //convert strings to Numbers and round to 5 decimal places to avoid issues with tiny numbers. Roughly 20x faster than Number.toFixed(). We also must make sure to round before dividing so that values like 0.9999999999 become 1 to avoid glitches in browser rendering and interpretation of flipped/rotated 3D matrices. And don't just multiply the number by rnd, floor it, and then divide by rnd because the bitwise operations max out at a 32-bit signed integer, thus it could get clipped at a relatively low value (like 22,000.00000 for example).
			}
			return force2D && m.length > 6 ? [m[0], m[1], m[4], m[5], m[12], m[13]] : m;
		},


		/**
   * Parses the transform values for an element, returning an object with x, y, z, scaleX, scaleY, scaleZ, rotation, rotationX, rotationY, skewX, and skewY properties. Note: by default (for performance reasons), all skewing is combined into skewX and rotation but skewY still has a place in the transform object so that we can record how much of the skew is attributed to skewX vs skewY. Remember, a skewY of 10 looks the same as a rotation of 10 and skewX of -10.
   * @param {!Object} t target element
   * @param {Object=} cs computed style object (optional)
   * @param {boolean=} rec if true, the transform values will be recorded to the target element's _gsTransform object, like target._gsTransform = {x:0, y:0, z:0, scaleX:1...}
   * @param {boolean=} parse if true, we'll ignore any _gsTransform values that already exist on the element, and force a reparsing of the css (calculated style)
   * @return {object} object containing all of the transform properties/values like {x:0, y:0, z:0, scaleX:1...}
   */
		_getTransform = _internals.getTransform = function (t, cs, rec, parse) {
			if (t._gsTransform && rec && !parse) {
				return t._gsTransform; //if the element already has a _gsTransform, use that. Note: some browsers don't accurately return the calculated style for the transform (particularly for SVG), so it's almost always safest to just use the values we've already applied rather than re-parsing things.
			}
			var tm = rec ? t._gsTransform || new Transform() : new Transform(),
			    invX = tm.scaleX < 0,
			    //in order to interpret things properly, we need to know if the user applied a negative scaleX previously so that we can adjust the rotation and skewX accordingly. Otherwise, if we always interpret a flipped matrix as affecting scaleY and the user only wants to tween the scaleX on multiple sequential tweens, it would keep the negative scaleY without that being the user's intent.
			min = 0.00002,
			    rnd = 100000,
			    zOrigin = _supports3D ? parseFloat(_getStyle(t, _transformOriginProp, cs, false, "0 0 0").split(" ")[2]) || tm.zOrigin || 0 : 0,
			    defaultTransformPerspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0,
			    m,
			    i,
			    scaleX,
			    scaleY,
			    rotation,
			    skewX;

			tm.svg = !!(t.getCTM && _isSVG(t));
			if (tm.svg) {
				_parseSVGOrigin(t, _getStyle(t, _transformOriginProp, cs, false, "50% 50%") + "", tm, t.getAttribute("data-svg-origin"));
				_useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr;
			}
			m = _getMatrix(t);
			if (m !== _identity2DMatrix) {

				if (m.length === 16) {
					//we'll only look at these position-related 6 variables first because if x/y/z all match, it's relatively safe to assume we don't need to re-parse everything which risks losing important rotational information (like rotationX:180 plus rotationY:180 would look the same as rotation:180 - there's no way to know for sure which direction was taken based solely on the matrix3d() values)
					var a11 = m[0],
					    a21 = m[1],
					    a31 = m[2],
					    a41 = m[3],
					    a12 = m[4],
					    a22 = m[5],
					    a32 = m[6],
					    a42 = m[7],
					    a13 = m[8],
					    a23 = m[9],
					    a33 = m[10],
					    a14 = m[12],
					    a24 = m[13],
					    a34 = m[14],
					    a43 = m[11],
					    angle = Math.atan2(a32, a33),
					    t1,
					    t2,
					    t3,
					    t4,
					    cos,
					    sin;
					//we manually compensate for non-zero z component of transformOrigin to work around bugs in Safari
					if (tm.zOrigin) {
						a34 = -tm.zOrigin;
						a14 = a13 * a34 - m[12];
						a24 = a23 * a34 - m[13];
						a34 = a33 * a34 + tm.zOrigin - m[14];
					}
					//note for possible future consolidation: rotationX: Math.atan2(a32, a33), rotationY: Math.atan2(-a31, Math.sqrt(a33 * a33 + a32 * a32)), rotation: Math.atan2(a21, a11), skew: Math.atan2(a12, a22). However, it doesn't seem to be quite as reliable as the full-on backwards rotation procedure.
					tm.rotationX = angle * _RAD2DEG;
					//rotationX
					if (angle) {
						cos = Math.cos(-angle);
						sin = Math.sin(-angle);
						t1 = a12 * cos + a13 * sin;
						t2 = a22 * cos + a23 * sin;
						t3 = a32 * cos + a33 * sin;
						a13 = a12 * -sin + a13 * cos;
						a23 = a22 * -sin + a23 * cos;
						a33 = a32 * -sin + a33 * cos;
						a43 = a42 * -sin + a43 * cos;
						a12 = t1;
						a22 = t2;
						a32 = t3;
					}
					//rotationY
					angle = Math.atan2(-a31, a33);
					tm.rotationY = angle * _RAD2DEG;
					if (angle) {
						cos = Math.cos(-angle);
						sin = Math.sin(-angle);
						t1 = a11 * cos - a13 * sin;
						t2 = a21 * cos - a23 * sin;
						t3 = a31 * cos - a33 * sin;
						a23 = a21 * sin + a23 * cos;
						a33 = a31 * sin + a33 * cos;
						a43 = a41 * sin + a43 * cos;
						a11 = t1;
						a21 = t2;
						a31 = t3;
					}
					//rotationZ
					angle = Math.atan2(a21, a11);
					tm.rotation = angle * _RAD2DEG;
					if (angle) {
						cos = Math.cos(angle);
						sin = Math.sin(angle);
						t1 = a11 * cos + a21 * sin;
						t2 = a12 * cos + a22 * sin;
						t3 = a13 * cos + a23 * sin;
						a21 = a21 * cos - a11 * sin;
						a22 = a22 * cos - a12 * sin;
						a23 = a23 * cos - a13 * sin;
						a11 = t1;
						a12 = t2;
						a13 = t3;
					}

					if (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) {
						//when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
						tm.rotationX = tm.rotation = 0;
						tm.rotationY = 180 - tm.rotationY;
					}

					//skewX
					angle = Math.atan2(a12, a22);

					//scales
					tm.scaleX = (Math.sqrt(a11 * a11 + a21 * a21 + a31 * a31) * rnd + 0.5 | 0) / rnd;
					tm.scaleY = (Math.sqrt(a22 * a22 + a32 * a32) * rnd + 0.5 | 0) / rnd;
					tm.scaleZ = (Math.sqrt(a13 * a13 + a23 * a23 + a33 * a33) * rnd + 0.5 | 0) / rnd;
					a11 /= tm.scaleX;
					a12 /= tm.scaleY;
					a21 /= tm.scaleX;
					a22 /= tm.scaleY;
					if (Math.abs(angle) > min) {
						tm.skewX = angle * _RAD2DEG;
						a12 = 0; //unskews
						if (tm.skewType !== "simple") {
							tm.scaleY *= 1 / Math.cos(angle); //by default, we compensate the scale based on the skew so that the element maintains a similar proportion when skewed, so we have to alter the scaleY here accordingly to match the default (non-adjusted) skewing that CSS does (stretching more and more as it skews).
						}
					} else {
						tm.skewX = 0;
					}

					/* //for testing purposes
     var transform = "matrix3d(",
     	comma = ",",
     	zero = "0";
     a13 /= tm.scaleZ;
     a23 /= tm.scaleZ;
     a31 /= tm.scaleX;
     a32 /= tm.scaleY;
     a33 /= tm.scaleZ;
     transform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);
     transform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);
     transform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);
     transform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;
     transform += a14 + comma + a24 + comma + a34 + comma + (tm.perspective ? (1 + (-a34 / tm.perspective)) : 1) + ")";
     console.log(transform);
     document.querySelector(".test").style[_transformProp] = transform;
     */

					tm.perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
					tm.x = a14;
					tm.y = a24;
					tm.z = a34;
					if (tm.svg) {
						tm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);
						tm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22);
					}
				} else if (!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || !tm.rotationX && !tm.rotationY) {
					//sometimes a 6-element matrix is returned even when we performed 3D transforms, like if rotationX and rotationY are 180. In cases like this, we still need to honor the 3D transforms. If we just rely on the 2D info, it could affect how the data is interpreted, like scaleY might get set to -1 or rotation could get offset by 180 degrees. For example, do a TweenLite.to(element, 1, {css:{rotationX:180, rotationY:180}}) and then later, TweenLite.to(element, 1, {css:{rotationX:0}}) and without this conditional logic in place, it'd jump to a state of being unrotated when the 2nd tween starts. Then again, we need to honor the fact that the user COULD alter the transforms outside of CSSPlugin, like by manually applying new css, so we try to sense that by looking at x and y because if those changed, we know the changes were made outside CSSPlugin and we force a reinterpretation of the matrix values. Also, in Webkit browsers, if the element's "display" is "none", its calculated style value will always return empty, so if we've already recorded the values in the _gsTransform object, we'll just rely on those.
					var k = m.length >= 6,
					    a = k ? m[0] : 1,
					    b = m[1] || 0,
					    c = m[2] || 0,
					    d = k ? m[3] : 1;
					tm.x = m[4] || 0;
					tm.y = m[5] || 0;
					scaleX = Math.sqrt(a * a + b * b);
					scaleY = Math.sqrt(d * d + c * c);
					rotation = a || b ? Math.atan2(b, a) * _RAD2DEG : tm.rotation || 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).
					skewX = c || d ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;
					tm.scaleX = scaleX;
					tm.scaleY = scaleY;
					tm.rotation = rotation;
					tm.skewX = skewX;
					if (_supports3D) {
						tm.rotationX = tm.rotationY = tm.z = 0;
						tm.perspective = defaultTransformPerspective;
						tm.scaleZ = 1;
					}
					if (tm.svg) {
						tm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);
						tm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d);
					}
				}
				if (Math.abs(tm.skewX) > 90 && Math.abs(tm.skewX) < 270) {
					if (invX) {
						tm.scaleX *= -1;
						tm.skewX += tm.rotation <= 0 ? 180 : -180;
						tm.rotation += tm.rotation <= 0 ? 180 : -180;
					} else {
						tm.scaleY *= -1;
						tm.skewX += tm.skewX <= 0 ? 180 : -180;
					}
				}
				tm.zOrigin = zOrigin;
				//some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the "e-" towards the end) and would render the object slightly off. So we round to 0 in these cases. The conditional logic here is faster than calling Math.abs(). Also, browsers tend to render a SLIGHTLY rotated object in a fuzzy way, so we need to snap to exactly 0 when appropriate.
				for (i in tm) {
					if (tm[i] < min) if (tm[i] > -min) {
						tm[i] = 0;
					}
				}
			}
			//DEBUG: _log("parsed rotation of " + t.getAttribute("id")+": "+(tm.rotationX)+", "+(tm.rotationY)+", "+(tm.rotation)+", scale: "+tm.scaleX+", "+tm.scaleY+", "+tm.scaleZ+", position: "+tm.x+", "+tm.y+", "+tm.z+", perspective: "+tm.perspective+ ", origin: "+ tm.xOrigin+ ","+ tm.yOrigin);
			if (rec) {
				t._gsTransform = tm; //record to the object's _gsTransform which we use so that tweens can control individual properties independently (we need all the properties to accurately recompose the matrix in the setRatio() method)
				if (tm.svg) {
					//if we're supposed to apply transforms to the SVG element's "transform" attribute, make sure there aren't any CSS transforms applied or they'll override the attribute ones. Also clear the transform attribute if we're using CSS, just to be clean.
					if (_useSVGTransformAttr && t.style[_transformProp]) {
						TweenLite.delayedCall(0.001, function () {
							//if we apply this right away (before anything has rendered), we risk there being no transforms for a brief moment and it also interferes with adjusting the transformOrigin in a tween with immediateRender:true (it'd try reading the matrix and it wouldn't have the appropriate data in place because we just removed it).
							_removeProp(t.style, _transformProp);
						});
					} else if (!_useSVGTransformAttr && t.getAttribute("transform")) {
						TweenLite.delayedCall(0.001, function () {
							t.removeAttribute("transform");
						});
					}
				}
			}
			return tm;
		},


		//for setting 2D transforms in IE6, IE7, and IE8 (must use a "filter" to emulate the behavior of modern day browser transforms)
		_setIETransformRatio = function _setIETransformRatio(v) {
			var t = this.data,
			    //refers to the element's _gsTransform object
			ang = -t.rotation * _DEG2RAD,
			    skew = ang + t.skewX * _DEG2RAD,
			    rnd = 100000,
			    a = (Math.cos(ang) * t.scaleX * rnd | 0) / rnd,
			    b = (Math.sin(ang) * t.scaleX * rnd | 0) / rnd,
			    c = (Math.sin(skew) * -t.scaleY * rnd | 0) / rnd,
			    d = (Math.cos(skew) * t.scaleY * rnd | 0) / rnd,
			    style = this.t.style,
			    cs = this.t.currentStyle,
			    filters,
			    val;
			if (!cs) {
				return;
			}
			val = b; //just for swapping the variables an inverting them (reused "val" to avoid creating another variable in memory). IE's filter matrix uses a non-standard matrix configuration (angle goes the opposite way, and b and c are reversed and inverted)
			b = -c;
			c = -val;
			filters = cs.filter;
			style.filter = ""; //remove filters so that we can accurately measure offsetWidth/offsetHeight
			var w = this.t.offsetWidth,
			    h = this.t.offsetHeight,
			    clip = cs.position !== "absolute",
			    m = "progid:DXImageTransform.Microsoft.Matrix(M11=" + a + ", M12=" + b + ", M21=" + c + ", M22=" + d,
			    ox = t.x + w * t.xPercent / 100,
			    oy = t.y + h * t.yPercent / 100,
			    dx,
			    dy;

			//if transformOrigin is being used, adjust the offset x and y
			if (t.ox != null) {
				dx = (t.oxp ? w * t.ox * 0.01 : t.ox) - w / 2;
				dy = (t.oyp ? h * t.oy * 0.01 : t.oy) - h / 2;
				ox += dx - (dx * a + dy * b);
				oy += dy - (dx * c + dy * d);
			}

			if (!clip) {
				m += ", sizingMethod='auto expand')";
			} else {
				dx = w / 2;
				dy = h / 2;
				//translate to ensure that transformations occur around the correct origin (default is center).
				m += ", Dx=" + (dx - (dx * a + dy * b) + ox) + ", Dy=" + (dy - (dx * c + dy * d) + oy) + ")";
			}
			if (filters.indexOf("DXImageTransform.Microsoft.Matrix(") !== -1) {
				style.filter = filters.replace(_ieSetMatrixExp, m);
			} else {
				style.filter = m + " " + filters; //we must always put the transform/matrix FIRST (before alpha(opacity=xx)) to avoid an IE bug that slices part of the object when rotation is applied with alpha.
			}

			//at the end or beginning of the tween, if the matrix is normal (1, 0, 0, 1) and opacity is 100 (or doesn't exist), remove the filter to improve browser performance.
			if (v === 0 || v === 1) if (a === 1) if (b === 0) if (c === 0) if (d === 1) if (!clip || m.indexOf("Dx=0, Dy=0") !== -1) if (!_opacityExp.test(filters) || parseFloat(RegExp.$1) === 100) if (filters.indexOf("gradient(" && filters.indexOf("Alpha")) === -1) {
				style.removeAttribute("filter");
			}

			//we must set the margins AFTER applying the filter in order to avoid some bugs in IE8 that could (in rare scenarios) cause them to be ignored intermittently (vibration).
			if (!clip) {
				var mult = _ieVers < 8 ? 1 : -1,
				    //in Internet Explorer 7 and before, the box model is broken, causing the browser to treat the width/height of the actual rotated filtered image as the width/height of the box itself, but Microsoft corrected that in IE8. We must use a negative offset in IE8 on the right/bottom
				marg,
				    prop,
				    dif;
				dx = t.ieOffsetX || 0;
				dy = t.ieOffsetY || 0;
				t.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);
				t.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);
				for (i = 0; i < 4; i++) {
					prop = _margins[i];
					marg = cs[prop];
					//we need to get the current margin in case it is being tweened separately (we want to respect that tween's changes)
					val = marg.indexOf("px") !== -1 ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, "")) || 0;
					if (val !== t[prop]) {
						dif = i < 2 ? -t.ieOffsetX : -t.ieOffsetY; //if another tween is controlling a margin, we cannot only apply the difference in the ieOffsets, so we essentially zero-out the dx and dy here in that case. We record the margin(s) later so that we can keep comparing them, making this code very flexible.
					} else {
						dif = i < 2 ? dx - t.ieOffsetX : dy - t.ieOffsetY;
					}
					style[prop] = (t[prop] = Math.round(val - dif * (i === 0 || i === 2 ? 1 : mult))) + "px";
				}
			}
		},


		/* translates a super small decimal to a string WITHOUT scientific notation
  _safeDecimal = function(n) {
  	var s = (n < 0 ? -n : n) + "",
  		a = s.split("e-");
  	return (n < 0 ? "-0." : "0.") + new Array(parseInt(a[1], 10) || 0).join("0") + a[0].split(".").join("");
  },
  */

		_setTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function (v) {
			var t = this.data,
			    //refers to the element's _gsTransform object
			style = this.t.style,
			    angle = t.rotation,
			    rotationX = t.rotationX,
			    rotationY = t.rotationY,
			    sx = t.scaleX,
			    sy = t.scaleY,
			    sz = t.scaleZ,
			    x = t.x,
			    y = t.y,
			    z = t.z,
			    isSVG = t.svg,
			    perspective = t.perspective,
			    force3D = t.force3D,
			    skewY = t.skewY,
			    skewX = t.skewX,
			    t1,
			    a11,
			    a12,
			    a13,
			    a21,
			    a22,
			    a23,
			    a31,
			    a32,
			    a33,
			    a41,
			    a42,
			    a43,
			    zOrigin,
			    min,
			    cos,
			    sin,
			    t2,
			    transform,
			    comma,
			    zero,
			    skew,
			    rnd;
			if (skewY) {
				//for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
				skewX += skewY;
				angle += skewY;
			}

			//check to see if we should render as 2D (and SVGs must use 2D when _useSVGTransformAttr is true)
			if (((v === 1 || v === 0) && force3D === "auto" && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime) || !force3D) && !z && !perspective && !rotationY && !rotationX && sz === 1 || _useSVGTransformAttr && isSVG || !_supports3D) {
				//on the final render (which could be 0 for a from tween), if there are no 3D aspects, render in 2D to free up memory and improve performance especially on mobile devices. Check the tween's totalTime/totalDuration too in order to make sure it doesn't happen between repeats if it's a repeating tween.

				//2D
				if (angle || skewX || isSVG) {
					angle *= _DEG2RAD;
					skew = skewX * _DEG2RAD;
					rnd = 100000;
					a11 = Math.cos(angle) * sx;
					a21 = Math.sin(angle) * sx;
					a12 = Math.sin(angle - skew) * -sy;
					a22 = Math.cos(angle - skew) * sy;
					if (skew && t.skewType === "simple") {
						//by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to "simple" to use the uncompensated skewing that CSS does
						t1 = Math.tan(skew - skewY * _DEG2RAD);
						t1 = Math.sqrt(1 + t1 * t1);
						a12 *= t1;
						a22 *= t1;
						if (skewY) {
							t1 = Math.tan(skewY * _DEG2RAD);
							t1 = Math.sqrt(1 + t1 * t1);
							a11 *= t1;
							a21 *= t1;
						}
					}
					if (isSVG) {
						x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
						y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
						if (_useSVGTransformAttr && (t.xPercent || t.yPercent)) {
							//The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the matrix to simulate it.
							min = this.t.getBBox();
							x += t.xPercent * 0.01 * min.width;
							y += t.yPercent * 0.01 * min.height;
						}
						min = 0.000001;
						if (x < min) if (x > -min) {
							x = 0;
						}
						if (y < min) if (y > -min) {
							y = 0;
						}
					}
					transform = (a11 * rnd | 0) / rnd + "," + (a21 * rnd | 0) / rnd + "," + (a12 * rnd | 0) / rnd + "," + (a22 * rnd | 0) / rnd + "," + x + "," + y + ")";
					if (isSVG && _useSVGTransformAttr) {
						this.t.setAttribute("transform", "matrix(" + transform);
					} else {
						//some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the "e-" towards the end) and would render the object slightly off. So we round to 5 decimal places.
						style[_transformProp] = (t.xPercent || t.yPercent ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + transform;
					}
				} else {
					style[_transformProp] = (t.xPercent || t.yPercent ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + sx + ",0,0," + sy + "," + x + "," + y + ")";
				}
				return;
			}
			if (_isFirefox) {
				//Firefox has a bug (at least in v25) that causes it to render the transparent part of 32-bit PNG images as black when displayed inside an iframe and the 3D scale is very small and doesn't change sufficiently enough between renders (like if you use a Power4.easeInOut to scale from 0 to 1 where the beginning values only change a tiny amount to begin the tween before accelerating). In this case, we force the scale to be 0.00002 instead which is visually the same but works around the Firefox issue.
				min = 0.0001;
				if (sx < min && sx > -min) {
					sx = sz = 0.00002;
				}
				if (sy < min && sy > -min) {
					sy = sz = 0.00002;
				}
				if (perspective && !t.z && !t.rotationX && !t.rotationY) {
					//Firefox has a bug that causes elements to have an odd super-thin, broken/dotted black border on elements that have a perspective set but aren't utilizing 3D space (no rotationX, rotationY, or z).
					perspective = 0;
				}
			}
			if (angle || skewX) {
				angle *= _DEG2RAD;
				cos = a11 = Math.cos(angle);
				sin = a21 = Math.sin(angle);
				if (skewX) {
					angle -= skewX * _DEG2RAD;
					cos = Math.cos(angle);
					sin = Math.sin(angle);
					if (t.skewType === "simple") {
						//by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to "simple" to use the uncompensated skewing that CSS does
						t1 = Math.tan((skewX - skewY) * _DEG2RAD);
						t1 = Math.sqrt(1 + t1 * t1);
						cos *= t1;
						sin *= t1;
						if (t.skewY) {
							t1 = Math.tan(skewY * _DEG2RAD);
							t1 = Math.sqrt(1 + t1 * t1);
							a11 *= t1;
							a21 *= t1;
						}
					}
				}
				a12 = -sin;
				a22 = cos;
			} else if (!rotationY && !rotationX && sz === 1 && !perspective && !isSVG) {
				//if we're only translating and/or 2D scaling, this is faster...
				style[_transformProp] = (t.xPercent || t.yPercent ? "translate(" + t.xPercent + "%," + t.yPercent + "%) translate3d(" : "translate3d(") + x + "px," + y + "px," + z + "px)" + (sx !== 1 || sy !== 1 ? " scale(" + sx + "," + sy + ")" : "");
				return;
			} else {
				a11 = a22 = 1;
				a12 = a21 = 0;
			}
			// KEY  INDEX   AFFECTS a[row][column]
			// a11  0       rotation, rotationY, scaleX
			// a21  1       rotation, rotationY, scaleX
			// a31  2       rotationY, scaleX
			// a41  3       rotationY, scaleX
			// a12  4       rotation, skewX, rotationX, scaleY
			// a22  5       rotation, skewX, rotationX, scaleY
			// a32  6       rotationX, scaleY
			// a42  7       rotationX, scaleY
			// a13  8       rotationY, rotationX, scaleZ
			// a23  9       rotationY, rotationX, scaleZ
			// a33  10      rotationY, rotationX, scaleZ
			// a43  11      rotationY, rotationX, perspective, scaleZ
			// a14  12      x, zOrigin, svgOrigin
			// a24  13      y, zOrigin, svgOrigin
			// a34  14      z, zOrigin
			// a44  15
			// rotation: Math.atan2(a21, a11)
			// rotationY: Math.atan2(a13, a33) (or Math.atan2(a13, a11))
			// rotationX: Math.atan2(a32, a33)
			a33 = 1;
			a13 = a23 = a31 = a32 = a41 = a42 = 0;
			a43 = perspective ? -1 / perspective : 0;
			zOrigin = t.zOrigin;
			min = 0.000001; //threshold below which browsers use scientific notation which won't work.
			comma = ",";
			zero = "0";
			angle = rotationY * _DEG2RAD;
			if (angle) {
				cos = Math.cos(angle);
				sin = Math.sin(angle);
				a31 = -sin;
				a41 = a43 * -sin;
				a13 = a11 * sin;
				a23 = a21 * sin;
				a33 = cos;
				a43 *= cos;
				a11 *= cos;
				a21 *= cos;
			}
			angle = rotationX * _DEG2RAD;
			if (angle) {
				cos = Math.cos(angle);
				sin = Math.sin(angle);
				t1 = a12 * cos + a13 * sin;
				t2 = a22 * cos + a23 * sin;
				a32 = a33 * sin;
				a42 = a43 * sin;
				a13 = a12 * -sin + a13 * cos;
				a23 = a22 * -sin + a23 * cos;
				a33 = a33 * cos;
				a43 = a43 * cos;
				a12 = t1;
				a22 = t2;
			}
			if (sz !== 1) {
				a13 *= sz;
				a23 *= sz;
				a33 *= sz;
				a43 *= sz;
			}
			if (sy !== 1) {
				a12 *= sy;
				a22 *= sy;
				a32 *= sy;
				a42 *= sy;
			}
			if (sx !== 1) {
				a11 *= sx;
				a21 *= sx;
				a31 *= sx;
				a41 *= sx;
			}

			if (zOrigin || isSVG) {
				if (zOrigin) {
					x += a13 * -zOrigin;
					y += a23 * -zOrigin;
					z += a33 * -zOrigin + zOrigin;
				}
				if (isSVG) {
					//due to bugs in some browsers, we need to manage the transform-origin of SVG manually
					x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
					y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
				}
				if (x < min && x > -min) {
					x = zero;
				}
				if (y < min && y > -min) {
					y = zero;
				}
				if (z < min && z > -min) {
					z = 0; //don't use string because we calculate perspective later and need the number.
				}
			}

			//optimized way of concatenating all the values into a string. If we do it all in one shot, it's slower because of the way browsers have to create temp strings and the way it affects memory. If we do it piece-by-piece with +=, it's a bit slower too. We found that doing it in these sized chunks works best overall:
			transform = t.xPercent || t.yPercent ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix3d(" : "matrix3d(";
			transform += (a11 < min && a11 > -min ? zero : a11) + comma + (a21 < min && a21 > -min ? zero : a21) + comma + (a31 < min && a31 > -min ? zero : a31);
			transform += comma + (a41 < min && a41 > -min ? zero : a41) + comma + (a12 < min && a12 > -min ? zero : a12) + comma + (a22 < min && a22 > -min ? zero : a22);
			if (rotationX || rotationY || sz !== 1) {
				//performance optimization (often there's no rotationX or rotationY, so we can skip these calculations)
				transform += comma + (a32 < min && a32 > -min ? zero : a32) + comma + (a42 < min && a42 > -min ? zero : a42) + comma + (a13 < min && a13 > -min ? zero : a13);
				transform += comma + (a23 < min && a23 > -min ? zero : a23) + comma + (a33 < min && a33 > -min ? zero : a33) + comma + (a43 < min && a43 > -min ? zero : a43) + comma;
			} else {
				transform += ",0,0,0,0,1,0,";
			}
			transform += x + comma + y + comma + z + comma + (perspective ? 1 + -z / perspective : 1) + ")";

			style[_transformProp] = transform;
		};

		p = Transform.prototype;
		p.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;
		p.scaleX = p.scaleY = p.scaleZ = 1;

		_registerComplexSpecialProp("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin", { parser: function parser(t, e, parsingProp, cssp, pt, plugin, vars) {
				if (cssp._lastParsedTransform === vars) {
					return pt;
				} //only need to parse the transform once, and only if the browser supports it.
				cssp._lastParsedTransform = vars;
				var scaleFunc = vars.scale && typeof vars.scale === "function" ? vars.scale : 0,
				    //if there's a function-based "scale" value, swap in the resulting numeric value temporarily. Otherwise, if it's called for both scaleX and scaleY independently, they may not match (like if the function uses Math.random()).
				swapFunc;
				if (typeof vars[parsingProp] === "function") {
					//whatever property triggers the initial parsing might be a function-based value in which case it already got called in parse(), thus we don't want to call it again in here. The most efficient way to avoid this is to temporarily swap the value directly into the vars object, and then after we do all our parsing in this function, we'll swap it back again.
					swapFunc = vars[parsingProp];
					vars[parsingProp] = e;
				}
				if (scaleFunc) {
					vars.scale = scaleFunc(_index, t);
				}
				var originalGSTransform = t._gsTransform,
				    style = t.style,
				    min = 0.000001,
				    i = _transformProps.length,
				    v = vars,
				    endRotations = {},
				    transformOriginString = "transformOrigin",
				    m1 = _getTransform(t, _cs, true, v.parseTransform),
				    orig = v.transform && (typeof v.transform === "function" ? v.transform(_index, _target) : v.transform),
				    m2,
				    copy,
				    has3D,
				    hasChange,
				    dr,
				    x,
				    y,
				    matrix,
				    p;
				m1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;
				cssp._transform = m1;
				if (orig && typeof orig === "string" && _transformProp) {
					//for values like transform:"rotate(60deg) scale(0.5, 0.8)"
					copy = _tempDiv.style; //don't use the original target because it might be SVG in which case some browsers don't report computed style correctly.
					copy[_transformProp] = orig;
					copy.display = "block"; //if display is "none", the browser often refuses to report the transform properties correctly.
					copy.position = "absolute";
					_doc.body.appendChild(_tempDiv);
					m2 = _getTransform(_tempDiv, null, false);
					if (m1.skewType === "simple") {
						//the default _getTransform() reports the skewX/scaleY as if skewType is "compensated", thus we need to adjust that here if skewType is "simple".
						m2.scaleY *= Math.cos(m2.skewX * _DEG2RAD);
					}
					if (m1.svg) {
						//if it's an SVG element, x/y part of the matrix will be affected by whatever we use as the origin and the offsets, so compensate here...
						x = m1.xOrigin;
						y = m1.yOrigin;
						m2.x -= m1.xOffset;
						m2.y -= m1.yOffset;
						if (v.transformOrigin || v.svgOrigin) {
							//if this tween is altering the origin, we must factor that in here. The actual work of recording the transformOrigin values and setting up the PropTween is done later (still inside this function) so we cannot leave the changes intact here - we only want to update the x/y accordingly.
							orig = {};
							_parseSVGOrigin(t, _parsePosition(v.transformOrigin), orig, v.svgOrigin, v.smoothOrigin, true);
							x = orig.xOrigin;
							y = orig.yOrigin;
							m2.x -= orig.xOffset - m1.xOffset;
							m2.y -= orig.yOffset - m1.yOffset;
						}
						if (x || y) {
							matrix = _getMatrix(_tempDiv, true);
							m2.x -= x - (x * matrix[0] + y * matrix[2]);
							m2.y -= y - (x * matrix[1] + y * matrix[3]);
						}
					}
					_doc.body.removeChild(_tempDiv);
					if (!m2.perspective) {
						m2.perspective = m1.perspective; //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
					}
					if (v.xPercent != null) {
						m2.xPercent = _parseVal(v.xPercent, m1.xPercent);
					}
					if (v.yPercent != null) {
						m2.yPercent = _parseVal(v.yPercent, m1.yPercent);
					}
				} else if ((typeof v === "undefined" ? "undefined" : _typeof(v)) === "object") {
					//for values like scaleX, scaleY, rotation, x, y, skewX, and skewY or transform:{...} (object)
					m2 = { scaleX: _parseVal(v.scaleX != null ? v.scaleX : v.scale, m1.scaleX),
						scaleY: _parseVal(v.scaleY != null ? v.scaleY : v.scale, m1.scaleY),
						scaleZ: _parseVal(v.scaleZ, m1.scaleZ),
						x: _parseVal(v.x, m1.x),
						y: _parseVal(v.y, m1.y),
						z: _parseVal(v.z, m1.z),
						xPercent: _parseVal(v.xPercent, m1.xPercent),
						yPercent: _parseVal(v.yPercent, m1.yPercent),
						perspective: _parseVal(v.transformPerspective, m1.perspective) };
					dr = v.directionalRotation;
					if (dr != null) {
						if ((typeof dr === "undefined" ? "undefined" : _typeof(dr)) === "object") {
							for (copy in dr) {
								v[copy] = dr[copy];
							}
						} else {
							v.rotation = dr;
						}
					}
					if (typeof v.x === "string" && v.x.indexOf("%") !== -1) {
						m2.x = 0;
						m2.xPercent = _parseVal(v.x, m1.xPercent);
					}
					if (typeof v.y === "string" && v.y.indexOf("%") !== -1) {
						m2.y = 0;
						m2.yPercent = _parseVal(v.y, m1.yPercent);
					}

					m2.rotation = _parseAngle("rotation" in v ? v.rotation : "shortRotation" in v ? v.shortRotation + "_short" : "rotationZ" in v ? v.rotationZ : m1.rotation, m1.rotation, "rotation", endRotations);
					if (_supports3D) {
						m2.rotationX = _parseAngle("rotationX" in v ? v.rotationX : "shortRotationX" in v ? v.shortRotationX + "_short" : m1.rotationX || 0, m1.rotationX, "rotationX", endRotations);
						m2.rotationY = _parseAngle("rotationY" in v ? v.rotationY : "shortRotationY" in v ? v.shortRotationY + "_short" : m1.rotationY || 0, m1.rotationY, "rotationY", endRotations);
					}
					m2.skewX = _parseAngle(v.skewX, m1.skewX);
					m2.skewY = _parseAngle(v.skewY, m1.skewY);
				}
				if (_supports3D && v.force3D != null) {
					m1.force3D = v.force3D;
					hasChange = true;
				}

				has3D = m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective;
				if (!has3D && v.scale != null) {
					m2.scaleZ = 1; //no need to tween scaleZ.
				}

				while (--i > -1) {
					p = _transformProps[i];
					orig = m2[p] - m1[p];
					if (orig > min || orig < -min || v[p] != null || _forcePT[p] != null) {
						hasChange = true;
						pt = new CSSPropTween(m1, p, m1[p], orig, pt);
						if (p in endRotations) {
							pt.e = endRotations[p]; //directional rotations typically have compensated values during the tween, but we need to make sure they end at exactly what the user requested
						}
						pt.xs0 = 0; //ensures the value stays numeric in setRatio()
						pt.plugin = plugin;
						cssp._overwriteProps.push(pt.n);
					}
				}

				orig = v.transformOrigin;
				if (m1.svg && (orig || v.svgOrigin)) {
					x = m1.xOffset; //when we change the origin, in order to prevent things from jumping we adjust the x/y so we must record those here so that we can create PropTweens for them and flip them at the same time as the origin
					y = m1.yOffset;
					_parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);
					pt = _addNonTweeningNumericPT(m1, "xOrigin", (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString); //note: if there wasn't a transformOrigin defined yet, just start with the destination one; it's wasteful otherwise, and it causes problems with fromTo() tweens. For example, TweenLite.to("#wheel", 3, {rotation:180, transformOrigin:"50% 50%", delay:1}); TweenLite.fromTo("#wheel", 3, {scale:0.5, transformOrigin:"50% 50%"}, {scale:1, delay:2}); would cause a jump when the from values revert at the beginning of the 2nd tween.
					pt = _addNonTweeningNumericPT(m1, "yOrigin", (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);
					if (x !== m1.xOffset || y !== m1.yOffset) {
						pt = _addNonTweeningNumericPT(m1, "xOffset", originalGSTransform ? x : m1.xOffset, m1.xOffset, pt, transformOriginString);
						pt = _addNonTweeningNumericPT(m1, "yOffset", originalGSTransform ? y : m1.yOffset, m1.yOffset, pt, transformOriginString);
					}
					orig = "0px 0px"; //certain browsers (like firefox) completely botch transform-origin, so we must remove it to prevent it from contaminating transforms. We manage it ourselves with xOrigin and yOrigin
				}
				if (orig || _supports3D && has3D && m1.zOrigin) {
					//if anything 3D is happening and there's a transformOrigin with a z component that's non-zero, we must ensure that the transformOrigin's z-component is set to 0 so that we can manually do those calculations to get around Safari bugs. Even if the user didn't specifically define a "transformOrigin" in this particular tween (maybe they did it via css directly).
					if (_transformProp) {
						hasChange = true;
						p = _transformOriginProp;
						orig = (orig || _getStyle(t, p, _cs, false, "50% 50%")) + ""; //cast as string to avoid errors
						pt = new CSSPropTween(style, p, 0, 0, pt, -1, transformOriginString);
						pt.b = style[p];
						pt.plugin = plugin;
						if (_supports3D) {
							copy = m1.zOrigin;
							orig = orig.split(" ");
							m1.zOrigin = (orig.length > 2 && !(copy !== 0 && orig[2] === "0px") ? parseFloat(orig[2]) : copy) || 0; //Safari doesn't handle the z part of transformOrigin correctly, so we'll manually handle it in the _set3DTransformRatio() method.
							pt.xs0 = pt.e = orig[0] + " " + (orig[1] || "50%") + " 0px"; //we must define a z value of 0px specifically otherwise iOS 5 Safari will stick with the old one (if one was defined)!
							pt = new CSSPropTween(m1, "zOrigin", 0, 0, pt, -1, pt.n); //we must create a CSSPropTween for the _gsTransform.zOrigin so that it gets reset properly at the beginning if the tween runs backward (as opposed to just setting m1.zOrigin here)
							pt.b = copy;
							pt.xs0 = pt.e = m1.zOrigin;
						} else {
							pt.xs0 = pt.e = orig;
						}

						//for older versions of IE (6-8), we need to manually calculate things inside the setRatio() function. We record origin x and y (ox and oy) and whether or not the values are percentages (oxp and oyp).
					} else {
						_parsePosition(orig + "", m1);
					}
				}
				if (hasChange) {
					cssp._transformType = !(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3) ? 3 : 2; //quicker than calling cssp._enableTransforms();
				}
				if (swapFunc) {
					vars[parsingProp] = swapFunc;
				}
				if (scaleFunc) {
					vars.scale = scaleFunc;
				}
				return pt;
			}, prefix: true });

		_registerComplexSpecialProp("boxShadow", { defaultValue: "0px 0px 0px 0px #999", prefix: true, color: true, multi: true, keyword: "inset" });

		_registerComplexSpecialProp("borderRadius", { defaultValue: "0px", parser: function parser(t, e, p, cssp, pt, plugin) {
				e = this.format(e);
				var props = ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"],
				    style = t.style,
				    ea1,
				    i,
				    es2,
				    bs2,
				    bs,
				    es,
				    bn,
				    en,
				    w,
				    h,
				    esfx,
				    bsfx,
				    rel,
				    hn,
				    vn,
				    em;
				w = parseFloat(t.offsetWidth);
				h = parseFloat(t.offsetHeight);
				ea1 = e.split(" ");
				for (i = 0; i < props.length; i++) {
					//if we're dealing with percentages, we must convert things separately for the horizontal and vertical axis!
					if (this.p.indexOf("border")) {
						//older browsers used a prefix
						props[i] = _checkPropPrefix(props[i]);
					}
					bs = bs2 = _getStyle(t, props[i], _cs, false, "0px");
					if (bs.indexOf(" ") !== -1) {
						bs2 = bs.split(" ");
						bs = bs2[0];
						bs2 = bs2[1];
					}
					es = es2 = ea1[i];
					bn = parseFloat(bs);
					bsfx = bs.substr((bn + "").length);
					rel = es.charAt(1) === "=";
					if (rel) {
						en = parseInt(es.charAt(0) + "1", 10);
						es = es.substr(2);
						en *= parseFloat(es);
						esfx = es.substr((en + "").length - (en < 0 ? 1 : 0)) || "";
					} else {
						en = parseFloat(es);
						esfx = es.substr((en + "").length);
					}
					if (esfx === "") {
						esfx = _suffixMap[p] || bsfx;
					}
					if (esfx !== bsfx) {
						hn = _convertToPixels(t, "borderLeft", bn, bsfx); //horizontal number (we use a bogus "borderLeft" property just because the _convertToPixels() method searches for the keywords "Left", "Right", "Top", and "Bottom" to determine of it's a horizontal or vertical property, and we need "border" in the name so that it knows it should measure relative to the element itself, not its parent.
						vn = _convertToPixels(t, "borderTop", bn, bsfx); //vertical number
						if (esfx === "%") {
							bs = hn / w * 100 + "%";
							bs2 = vn / h * 100 + "%";
						} else if (esfx === "em") {
							em = _convertToPixels(t, "borderLeft", 1, "em");
							bs = hn / em + "em";
							bs2 = vn / em + "em";
						} else {
							bs = hn + "px";
							bs2 = vn + "px";
						}
						if (rel) {
							es = parseFloat(bs) + en + esfx;
							es2 = parseFloat(bs2) + en + esfx;
						}
					}
					pt = _parseComplex(style, props[i], bs + " " + bs2, es + " " + es2, false, "0px", pt);
				}
				return pt;
			}, prefix: true, formatter: _getFormatter("0px 0px 0px 0px", false, true) });
		_registerComplexSpecialProp("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius", { defaultValue: "0px", parser: function parser(t, e, p, cssp, pt, plugin) {
				return _parseComplex(t.style, p, this.format(_getStyle(t, p, _cs, false, "0px 0px")), this.format(e), false, "0px", pt);
			}, prefix: true, formatter: _getFormatter("0px 0px", false, true) });
		_registerComplexSpecialProp("backgroundPosition", { defaultValue: "0 0", parser: function parser(t, e, p, cssp, pt, plugin) {
				var bp = "background-position",
				    cs = _cs || _getComputedStyle(t, null),
				    bs = this.format((cs ? _ieVers ? cs.getPropertyValue(bp + "-x") + " " + cs.getPropertyValue(bp + "-y") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + " " + t.currentStyle.backgroundPositionY) || "0 0"),
				    //Internet Explorer doesn't report background-position correctly - we must query background-position-x and background-position-y and combine them (even in IE10). Before IE9, we must do the same with the currentStyle object and use camelCase
				es = this.format(e),
				    ba,
				    ea,
				    i,
				    pct,
				    overlap,
				    src;
				if (bs.indexOf("%") !== -1 !== (es.indexOf("%") !== -1) && es.split(",").length < 2) {
					src = _getStyle(t, "backgroundImage").replace(_urlExp, "");
					if (src && src !== "none") {
						ba = bs.split(" ");
						ea = es.split(" ");
						_tempImg.setAttribute("src", src); //set the temp IMG's src to the background-image so that we can measure its width/height
						i = 2;
						while (--i > -1) {
							bs = ba[i];
							pct = bs.indexOf("%") !== -1;
							if (pct !== (ea[i].indexOf("%") !== -1)) {
								overlap = i === 0 ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;
								ba[i] = pct ? parseFloat(bs) / 100 * overlap + "px" : parseFloat(bs) / overlap * 100 + "%";
							}
						}
						bs = ba.join(" ");
					}
				}
				return this.parseComplex(t.style, bs, es, pt, plugin);
			}, formatter: _parsePosition });
		_registerComplexSpecialProp("backgroundSize", { defaultValue: "0 0", formatter: function formatter(v) {
				v += ""; //ensure it's a string
				return _parsePosition(v.indexOf(" ") === -1 ? v + " " + v : v); //if set to something like "100% 100%", Safari typically reports the computed style as just "100%" (no 2nd value), but we should ensure that there are two values, so copy the first one. Otherwise, it'd be interpreted as "100% 0" (wrong).
			} });
		_registerComplexSpecialProp("perspective", { defaultValue: "0px", prefix: true });
		_registerComplexSpecialProp("perspectiveOrigin", { defaultValue: "50% 50%", prefix: true });
		_registerComplexSpecialProp("transformStyle", { prefix: true });
		_registerComplexSpecialProp("backfaceVisibility", { prefix: true });
		_registerComplexSpecialProp("userSelect", { prefix: true });
		_registerComplexSpecialProp("margin", { parser: _getEdgeParser("marginTop,marginRight,marginBottom,marginLeft") });
		_registerComplexSpecialProp("padding", { parser: _getEdgeParser("paddingTop,paddingRight,paddingBottom,paddingLeft") });
		_registerComplexSpecialProp("clip", { defaultValue: "rect(0px,0px,0px,0px)", parser: function parser(t, e, p, cssp, pt, plugin) {
				var b, cs, delim;
				if (_ieVers < 9) {
					//IE8 and earlier don't report a "clip" value in the currentStyle - instead, the values are split apart into clipTop, clipRight, clipBottom, and clipLeft. Also, in IE7 and earlier, the values inside rect() are space-delimited, not comma-delimited.
					cs = t.currentStyle;
					delim = _ieVers < 8 ? " " : ",";
					b = "rect(" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + ")";
					e = this.format(e).split(",").join(delim);
				} else {
					b = this.format(_getStyle(t, this.p, _cs, false, this.dflt));
					e = this.format(e);
				}
				return this.parseComplex(t.style, b, e, pt, plugin);
			} });
		_registerComplexSpecialProp("textShadow", { defaultValue: "0px 0px 0px #999", color: true, multi: true });
		_registerComplexSpecialProp("autoRound,strictUnits", { parser: function parser(t, e, p, cssp, pt) {
				return pt;
			} }); //just so that we can ignore these properties (not tween them)
		_registerComplexSpecialProp("border", { defaultValue: "0px solid #000", parser: function parser(t, e, p, cssp, pt, plugin) {
				var bw = _getStyle(t, "borderTopWidth", _cs, false, "0px"),
				    end = this.format(e).split(" "),
				    esfx = end[0].replace(_suffixExp, "");
				if (esfx !== "px") {
					//if we're animating to a non-px value, we need to convert the beginning width to that unit.
					bw = parseFloat(bw) / _convertToPixels(t, "borderTopWidth", 1, esfx) + esfx;
				}
				return this.parseComplex(t.style, this.format(bw + " " + _getStyle(t, "borderTopStyle", _cs, false, "solid") + " " + _getStyle(t, "borderTopColor", _cs, false, "#000")), end.join(" "), pt, plugin);
			}, color: true, formatter: function formatter(v) {
				var a = v.split(" ");
				return a[0] + " " + (a[1] || "solid") + " " + (v.match(_colorExp) || ["#000"])[0];
			} });
		_registerComplexSpecialProp("borderWidth", { parser: _getEdgeParser("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth") }); //Firefox doesn't pick up on borderWidth set in style sheets (only inline).
		_registerComplexSpecialProp("float,cssFloat,styleFloat", { parser: function parser(t, e, p, cssp, pt, plugin) {
				var s = t.style,
				    prop = "cssFloat" in s ? "cssFloat" : "styleFloat";
				return new CSSPropTween(s, prop, 0, 0, pt, -1, p, false, 0, s[prop], e);
			} });

		//opacity-related
		var _setIEOpacityRatio = function _setIEOpacityRatio(v) {
			var t = this.t,
			    //refers to the element's style property
			filters = t.filter || _getStyle(this.data, "filter") || "",
			    val = this.s + this.c * v | 0,
			    skip;
			if (val === 100) {
				//for older versions of IE that need to use a filter to apply opacity, we should remove the filter if opacity hits 1 in order to improve performance, but make sure there isn't a transform (matrix) or gradient in the filters.
				if (filters.indexOf("atrix(") === -1 && filters.indexOf("radient(") === -1 && filters.indexOf("oader(") === -1) {
					t.removeAttribute("filter");
					skip = !_getStyle(this.data, "filter"); //if a class is applied that has an alpha filter, it will take effect (we don't want that), so re-apply our alpha filter in that case. We must first remove it and then check.
				} else {
					t.filter = filters.replace(_alphaFilterExp, "");
					skip = true;
				}
			}
			if (!skip) {
				if (this.xn1) {
					t.filter = filters = filters || "alpha(opacity=" + val + ")"; //works around bug in IE7/8 that prevents changes to "visibility" from being applied properly if the filter is changed to a different alpha on the same frame.
				}
				if (filters.indexOf("pacity") === -1) {
					//only used if browser doesn't support the standard opacity style property (IE 7 and 8). We omit the "O" to avoid case-sensitivity issues
					if (val !== 0 || !this.xn1) {
						//bugs in IE7/8 won't render the filter properly if opacity is ADDED on the same frame/render as "visibility" changes (this.xn1 is 1 if this tween is an "autoAlpha" tween)
						t.filter = filters + " alpha(opacity=" + val + ")"; //we round the value because otherwise, bugs in IE7/8 can prevent "visibility" changes from being applied properly.
					}
				} else {
					t.filter = filters.replace(_opacityExp, "opacity=" + val);
				}
			}
		};
		_registerComplexSpecialProp("opacity,alpha,autoAlpha", { defaultValue: "1", parser: function parser(t, e, p, cssp, pt, plugin) {
				var b = parseFloat(_getStyle(t, "opacity", _cs, false, "1")),
				    style = t.style,
				    isAutoAlpha = p === "autoAlpha";
				if (typeof e === "string" && e.charAt(1) === "=") {
					e = (e.charAt(0) === "-" ? -1 : 1) * parseFloat(e.substr(2)) + b;
				}
				if (isAutoAlpha && b === 1 && _getStyle(t, "visibility", _cs) === "hidden" && e !== 0) {
					//if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
					b = 0;
				}
				if (_supportsOpacity) {
					pt = new CSSPropTween(style, "opacity", b, e - b, pt);
				} else {
					pt = new CSSPropTween(style, "opacity", b * 100, (e - b) * 100, pt);
					pt.xn1 = isAutoAlpha ? 1 : 0; //we need to record whether or not this is an autoAlpha so that in the setRatio(), we know to duplicate the setting of the alpha in order to work around a bug in IE7 and IE8 that prevents changes to "visibility" from taking effect if the filter is changed to a different alpha(opacity) at the same time. Setting it to the SAME value first, then the new value works around the IE7/8 bug.
					style.zoom = 1; //helps correct an IE issue.
					pt.type = 2;
					pt.b = "alpha(opacity=" + pt.s + ")";
					pt.e = "alpha(opacity=" + (pt.s + pt.c) + ")";
					pt.data = t;
					pt.plugin = plugin;
					pt.setRatio = _setIEOpacityRatio;
				}
				if (isAutoAlpha) {
					//we have to create the "visibility" PropTween after the opacity one in the linked list so that they run in the order that works properly in IE8 and earlier
					pt = new CSSPropTween(style, "visibility", 0, 0, pt, -1, null, false, 0, b !== 0 ? "inherit" : "hidden", e === 0 ? "hidden" : "inherit");
					pt.xs0 = "inherit";
					cssp._overwriteProps.push(pt.n);
					cssp._overwriteProps.push(p);
				}
				return pt;
			} });

		var _removeProp = function _removeProp(s, p) {
			if (p) {
				if (s.removeProperty) {
					if (p.substr(0, 2) === "ms" || p.substr(0, 6) === "webkit") {
						//Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
						p = "-" + p;
					}
					s.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
				} else {
					//note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
					s.removeAttribute(p);
				}
			}
		},
		    _setClassNameRatio = function _setClassNameRatio(v) {
			this.t._gsClassPT = this;
			if (v === 1 || v === 0) {
				this.t.setAttribute("class", v === 0 ? this.b : this.e);
				var mpt = this.data,
				    //first MiniPropTween
				s = this.t.style;
				while (mpt) {
					if (!mpt.v) {
						_removeProp(s, mpt.p);
					} else {
						s[mpt.p] = mpt.v;
					}
					mpt = mpt._next;
				}
				if (v === 1 && this.t._gsClassPT === this) {
					this.t._gsClassPT = null;
				}
			} else if (this.t.getAttribute("class") !== this.e) {
				this.t.setAttribute("class", this.e);
			}
		};
		_registerComplexSpecialProp("className", { parser: function parser(t, e, p, cssp, pt, plugin, vars) {
				var b = t.getAttribute("class") || "",
				    //don't use t.className because it doesn't work consistently on SVG elements; getAttribute("class") and setAttribute("class", value") is more reliable.
				cssText = t.style.cssText,
				    difData,
				    bs,
				    cnpt,
				    cnptLookup,
				    mpt;
				pt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2);
				pt.setRatio = _setClassNameRatio;
				pt.pr = -11;
				_hasPriority = true;
				pt.b = b;
				bs = _getAllStyles(t, _cs);
				//if there's a className tween already operating on the target, force it to its end so that the necessary inline styles are removed and the class name is applied before we determine the end state (we don't want inline styles interfering that were there just for class-specific values)
				cnpt = t._gsClassPT;
				if (cnpt) {
					cnptLookup = {};
					mpt = cnpt.data; //first MiniPropTween which stores the inline styles - we need to force these so that the inline styles don't contaminate things. Otherwise, there's a small chance that a tween could start and the inline values match the destination values and they never get cleaned.
					while (mpt) {
						cnptLookup[mpt.p] = 1;
						mpt = mpt._next;
					}
					cnpt.setRatio(1);
				}
				t._gsClassPT = pt;
				pt.e = e.charAt(1) !== "=" ? e : b.replace(new RegExp("(?:\\s|^)" + e.substr(2) + "(?![\\w-])"), "") + (e.charAt(0) === "+" ? " " + e.substr(2) : "");
				t.setAttribute("class", pt.e);
				difData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);
				t.setAttribute("class", b);
				pt.data = difData.firstMPT;
				t.style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
				pt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin); //we record the CSSPropTween as the xfirst so that we can handle overwriting propertly (if "className" gets overwritten, we must kill all the properties associated with the className part of the tween, so we can loop through from xfirst to the pt itself)
				return pt;
			} });

		var _setClearPropsRatio = function _setClearPropsRatio(v) {
			if (v === 1 || v === 0) if (this.data._totalTime === this.data._totalDuration && this.data.data !== "isFromStart") {
				//this.data refers to the tween. Only clear at the END of the tween (remember, from() tweens make the ratio go from 1 to 0, so we can't just check that and if the tween is the zero-duration one that's created internally to render the starting values in a from() tween, ignore that because otherwise, for example, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in).
				var s = this.t.style,
				    transformParse = _specialProps.transform.parse,
				    a,
				    p,
				    i,
				    clearTransform,
				    transform;
				if (this.e === "all") {
					s.cssText = "";
					clearTransform = true;
				} else {
					a = this.e.split(" ").join("").split(",");
					i = a.length;
					while (--i > -1) {
						p = a[i];
						if (_specialProps[p]) {
							if (_specialProps[p].parse === transformParse) {
								clearTransform = true;
							} else {
								p = p === "transformOrigin" ? _transformOriginProp : _specialProps[p].p; //ensures that special properties use the proper browser-specific property name, like "scaleX" might be "-webkit-transform" or "boxShadow" might be "-moz-box-shadow"
							}
						}
						_removeProp(s, p);
					}
				}
				if (clearTransform) {
					_removeProp(s, _transformProp);
					transform = this.t._gsTransform;
					if (transform) {
						if (transform.svg) {
							this.t.removeAttribute("data-svg-origin");
							this.t.removeAttribute("transform");
						}
						delete this.t._gsTransform;
					}
				}
			}
		};
		_registerComplexSpecialProp("clearProps", { parser: function parser(t, e, p, cssp, pt) {
				pt = new CSSPropTween(t, p, 0, 0, pt, 2);
				pt.setRatio = _setClearPropsRatio;
				pt.e = e;
				pt.pr = -10;
				pt.data = cssp._tween;
				_hasPriority = true;
				return pt;
			} });

		p = "bezier,throwProps,physicsProps,physics2D".split(",");
		i = p.length;
		while (i--) {
			_registerPluginProp(p[i]);
		}

		p = CSSPlugin.prototype;
		p._firstPT = p._lastParsedTransform = p._transform = null;

		//gets called when the tween renders for the first time. This kicks everything off, recording start/end values, etc.
		p._onInitTween = function (target, vars, tween, index) {
			if (!target.nodeType) {
				//css is only for dom elements
				return false;
			}
			this._target = _target = target;
			this._tween = tween;
			this._vars = vars;
			_index = index;
			_autoRound = vars.autoRound;
			_hasPriority = false;
			_suffixMap = vars.suffixMap || CSSPlugin.suffixMap;
			_cs = _getComputedStyle(target, "");
			_overwriteProps = this._overwriteProps;
			var style = target.style,
			    v,
			    pt,
			    pt2,
			    first,
			    last,
			    next,
			    zIndex,
			    tpt,
			    threeD;
			if (_reqSafariFix) if (style.zIndex === "") {
				v = _getStyle(target, "zIndex", _cs);
				if (v === "auto" || v === "") {
					//corrects a bug in [non-Android] Safari that prevents it from repainting elements in their new positions if they don't have a zIndex set. We also can't just apply this inside _parseTransform() because anything that's moved in any way (like using "left" or "top" instead of transforms like "x" and "y") can be affected, so it is best to ensure that anything that's tweening has a z-index. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly. Plus zIndex is less memory-intensive.
					this._addLazySet(style, "zIndex", 0);
				}
			}

			if (typeof vars === "string") {
				first = style.cssText;
				v = _getAllStyles(target, _cs);
				style.cssText = first + ";" + vars;
				v = _cssDif(target, v, _getAllStyles(target)).difs;
				if (!_supportsOpacity && _opacityValExp.test(vars)) {
					v.opacity = parseFloat(RegExp.$1);
				}
				vars = v;
				style.cssText = first;
			}

			if (vars.className) {
				//className tweens will combine any differences they find in the css with the vars that are passed in, so {className:"myClass", scale:0.5, left:20} would work.
				this._firstPT = pt = _specialProps.className.parse(target, vars.className, "className", this, null, null, vars);
			} else {
				this._firstPT = pt = this.parse(target, vars, null);
			}

			if (this._transformType) {
				threeD = this._transformType === 3;
				if (!_transformProp) {
					style.zoom = 1; //helps correct an IE issue.
				} else if (_isSafari) {
					_reqSafariFix = true;
					//if zIndex isn't set, iOS Safari doesn't repaint things correctly sometimes (seemingly at random).
					if (style.zIndex === "") {
						zIndex = _getStyle(target, "zIndex", _cs);
						if (zIndex === "auto" || zIndex === "") {
							this._addLazySet(style, "zIndex", 0);
						}
					}
					//Setting WebkitBackfaceVisibility corrects 3 bugs:
					// 1) [non-Android] Safari skips rendering changes to "top" and "left" that are made on the same frame/render as a transform update.
					// 2) iOS Safari sometimes neglects to repaint elements in their new positions. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly.
					// 3) Safari sometimes displayed odd artifacts when tweening the transform (or WebkitTransform) property, like ghosts of the edges of the element remained. Definitely a browser bug.
					//Note: we allow the user to override the auto-setting by defining WebkitBackfaceVisibility in the vars of the tween.
					if (_isSafariLT6) {
						this._addLazySet(style, "WebkitBackfaceVisibility", this._vars.WebkitBackfaceVisibility || (threeD ? "visible" : "hidden"));
					}
				}
				pt2 = pt;
				while (pt2 && pt2._next) {
					pt2 = pt2._next;
				}
				tpt = new CSSPropTween(target, "transform", 0, 0, null, 2);
				this._linkCSSP(tpt, null, pt2);
				tpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;
				tpt.data = this._transform || _getTransform(target, _cs, true);
				tpt.tween = tween;
				tpt.pr = -1; //ensures that the transforms get applied after the components are updated.
				_overwriteProps.pop(); //we don't want to force the overwrite of all "transform" tweens of the target - we only care about individual transform properties like scaleX, rotation, etc. The CSSPropTween constructor automatically adds the property to _overwriteProps which is why we need to pop() here.
			}

			if (_hasPriority) {
				//reorders the linked list in order of pr (priority)
				while (pt) {
					next = pt._next;
					pt2 = first;
					while (pt2 && pt2.pr > pt.pr) {
						pt2 = pt2._next;
					}
					if (pt._prev = pt2 ? pt2._prev : last) {
						pt._prev._next = pt;
					} else {
						first = pt;
					}
					if (pt._next = pt2) {
						pt2._prev = pt;
					} else {
						last = pt;
					}
					pt = next;
				}
				this._firstPT = first;
			}
			return true;
		};

		p.parse = function (target, vars, pt, plugin) {
			var style = target.style,
			    p,
			    sp,
			    bn,
			    en,
			    bs,
			    es,
			    bsfx,
			    esfx,
			    isStr,
			    rel;
			for (p in vars) {
				es = vars[p]; //ending value string
				if (typeof es === "function") {
					es = es(_index, _target);
				}
				sp = _specialProps[p]; //SpecialProp lookup.
				if (sp) {
					pt = sp.parse(target, es, p, this, pt, plugin, vars);
				} else if (p.substr(0, 2) === "--") {
					//for tweening CSS variables (which always start with "--"). To maximize performance and simplicity, we bypass CSSPlugin altogether and just add a normal property tween to the tween instance itself.
					this._tween._propLookup[p] = this._addTween.call(this._tween, target.style, "setProperty", _getComputedStyle(target).getPropertyValue(p) + "", es + "", p, false, p);
					continue;
				} else {
					bs = _getStyle(target, p, _cs) + "";
					isStr = typeof es === "string";
					if (p === "color" || p === "fill" || p === "stroke" || p.indexOf("Color") !== -1 || isStr && _rgbhslExp.test(es)) {
						//Opera uses background: to define color sometimes in addition to backgroundColor:
						if (!isStr) {
							es = _parseColor(es);
							es = (es.length > 3 ? "rgba(" : "rgb(") + es.join(",") + ")";
						}
						pt = _parseComplex(style, p, bs, es, true, "transparent", pt, 0, plugin);
					} else if (isStr && _complexExp.test(es)) {
						pt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin);
					} else {
						bn = parseFloat(bs);
						bsfx = bn || bn === 0 ? bs.substr((bn + "").length) : ""; //remember, bs could be non-numeric like "normal" for fontWeight, so we should default to a blank suffix in that case.

						if (bs === "" || bs === "auto") {
							if (p === "width" || p === "height") {
								bn = _getDimension(target, p, _cs);
								bsfx = "px";
							} else if (p === "left" || p === "top") {
								bn = _calculateOffset(target, p, _cs);
								bsfx = "px";
							} else {
								bn = p !== "opacity" ? 0 : 1;
								bsfx = "";
							}
						}

						rel = isStr && es.charAt(1) === "=";
						if (rel) {
							en = parseInt(es.charAt(0) + "1", 10);
							es = es.substr(2);
							en *= parseFloat(es);
							esfx = es.replace(_suffixExp, "");
						} else {
							en = parseFloat(es);
							esfx = isStr ? es.replace(_suffixExp, "") : "";
						}

						if (esfx === "") {
							esfx = p in _suffixMap ? _suffixMap[p] : bsfx; //populate the end suffix, prioritizing the map, then if none is found, use the beginning suffix.
						}

						es = en || en === 0 ? (rel ? en + bn : en) + esfx : vars[p]; //ensures that any += or -= prefixes are taken care of. Record the end value before normalizing the suffix because we always want to end the tween on exactly what they intended even if it doesn't match the beginning value's suffix.
						//if the beginning/ending suffixes don't match, normalize them...
						if (bsfx !== esfx) if (esfx !== "" || p === "lineHeight") if (en || en === 0) if (bn) {
							//note: if the beginning value (bn) is 0, we don't need to convert units!
							bn = _convertToPixels(target, p, bn, bsfx);
							if (esfx === "%") {
								bn /= _convertToPixels(target, p, 100, "%") / 100;
								if (vars.strictUnits !== true) {
									//some browsers report only "px" values instead of allowing "%" with getComputedStyle(), so we assume that if we're tweening to a %, we should start there too unless strictUnits:true is defined. This approach is particularly useful for responsive designs that use from() tweens.
									bs = bn + "%";
								}
							} else if (esfx === "em" || esfx === "rem" || esfx === "vw" || esfx === "vh") {
								bn /= _convertToPixels(target, p, 1, esfx);

								//otherwise convert to pixels.
							} else if (esfx !== "px") {
								en = _convertToPixels(target, p, en, esfx);
								esfx = "px"; //we don't use bsfx after this, so we don't need to set it to px too.
							}
							if (rel) if (en || en === 0) {
								es = en + bn + esfx; //the changes we made affect relative calculations, so adjust the end value here.
							}
						}

						if (rel) {
							en += bn;
						}

						if ((bn || bn === 0) && (en || en === 0)) {
							//faster than isNaN(). Also, previously we required en !== bn but that doesn't really gain much performance and it prevents _parseToProxy() from working properly if beginning and ending values match but need to get tweened by an external plugin anyway. For example, a bezier tween where the target starts at left:0 and has these points: [{left:50},{left:0}] wouldn't work properly because when parsing the last point, it'd match the first (current) one and a non-tweening CSSPropTween would be recorded when we actually need a normal tween (type:0) so that things get updated during the tween properly.
							pt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, _autoRound !== false && (esfx === "px" || p === "zIndex"), 0, bs, es);
							pt.xs0 = esfx;
							//DEBUG: _log("tween "+p+" from "+pt.b+" ("+bn+esfx+") to "+pt.e+" with suffix: "+pt.xs0);
						} else if (style[p] === undefined || !es && (es + "" === "NaN" || es == null)) {
							_log("invalid " + p + " tween value: " + vars[p]);
						} else {
							pt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, bs, es);
							pt.xs0 = es === "none" && (p === "display" || p.indexOf("Style") !== -1) ? bs : es; //intermediate value should typically be set immediately (end value) except for "display" or things like borderTopStyle, borderBottomStyle, etc. which should use the beginning value during the tween.
							//DEBUG: _log("non-tweening value "+p+": "+pt.xs0);
						}
					}
				}
				if (plugin) if (pt && !pt.plugin) {
					pt.plugin = plugin;
				}
			}
			return pt;
		};

		//gets called every time the tween updates, passing the new ratio (typically a value between 0 and 1, but not always (for example, if an Elastic.easeOut is used, the value can jump above 1 mid-tween). It will always start and 0 and end at 1.
		p.setRatio = function (v) {
			var pt = this._firstPT,
			    min = 0.000001,
			    val,
			    str,
			    i;
			//at the end of the tween, we set the values to exactly what we received in order to make sure non-tweening values (like "position" or "float" or whatever) are set and so that if the beginning/ending suffixes (units) didn't match and we normalized to px, the value that the user passed in is used here. We check to see if the tween is at its beginning in case it's a from() tween in which case the ratio will actually go from 1 to 0 over the course of the tween (backwards).
			if (v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)) {
				while (pt) {
					if (pt.type !== 2) {
						if (pt.r && pt.type !== -1) {
							val = Math.round(pt.s + pt.c);
							if (!pt.type) {
								pt.t[pt.p] = val + pt.xs0;
							} else if (pt.type === 1) {
								//complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
								i = pt.l;
								str = pt.xs0 + val + pt.xs1;
								for (i = 1; i < pt.l; i++) {
									str += pt["xn" + i] + pt["xs" + (i + 1)];
								}
								pt.t[pt.p] = str;
							}
						} else {
							pt.t[pt.p] = pt.e;
						}
					} else {
						pt.setRatio(v);
					}
					pt = pt._next;
				}
			} else if (v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -0.000001) {
				while (pt) {
					val = pt.c * v + pt.s;
					if (pt.r) {
						val = Math.round(val);
					} else if (val < min) if (val > -min) {
						val = 0;
					}
					if (!pt.type) {
						pt.t[pt.p] = val + pt.xs0;
					} else if (pt.type === 1) {
						//complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
						i = pt.l;
						if (i === 2) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;
						} else if (i === 3) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;
						} else if (i === 4) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;
						} else if (i === 5) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;
						} else {
							str = pt.xs0 + val + pt.xs1;
							for (i = 1; i < pt.l; i++) {
								str += pt["xn" + i] + pt["xs" + (i + 1)];
							}
							pt.t[pt.p] = str;
						}
					} else if (pt.type === -1) {
						//non-tweening value
						pt.t[pt.p] = pt.xs0;
					} else if (pt.setRatio) {
						//custom setRatio() for things like SpecialProps, external plugins, etc.
						pt.setRatio(v);
					}
					pt = pt._next;
				}

				//if the tween is reversed all the way back to the beginning, we need to restore the original values which may have different units (like % instead of px or em or whatever).
			} else {
				while (pt) {
					if (pt.type !== 2) {
						pt.t[pt.p] = pt.b;
					} else {
						pt.setRatio(v);
					}
					pt = pt._next;
				}
			}
		};

		/**
   * @private
   * Forces rendering of the target's transforms (rotation, scale, etc.) whenever the CSSPlugin's setRatio() is called.
   * Basically, this tells the CSSPlugin to create a CSSPropTween (type 2) after instantiation that runs last in the linked
   * list and calls the appropriate (3D or 2D) rendering function. We separate this into its own method so that we can call
   * it from other plugins like BezierPlugin if, for example, it needs to apply an autoRotation and this CSSPlugin
   * doesn't have any transform-related properties of its own. You can call this method as many times as you
   * want and it won't create duplicate CSSPropTweens.
   *
   * @param {boolean} threeD if true, it should apply 3D tweens (otherwise, just 2D ones are fine and typically faster)
   */
		p._enableTransforms = function (threeD) {
			this._transform = this._transform || _getTransform(this._target, _cs, true); //ensures that the element has a _gsTransform property with the appropriate values.
			this._transformType = !(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3) ? 3 : 2;
		};

		var lazySet = function lazySet(v) {
			this.t[this.p] = this.e;
			this.data._linkCSSP(this, this._next, null, true); //we purposefully keep this._next even though it'd make sense to null it, but this is a performance optimization, as this happens during the while (pt) {} loop in setRatio() at the bottom of which it sets pt = pt._next, so if we null it, the linked list will be broken in that loop.
		};
		/** @private Gives us a way to set a value on the first render (and only the first render). **/
		p._addLazySet = function (t, p, v) {
			var pt = this._firstPT = new CSSPropTween(t, p, 0, 0, this._firstPT, 2);
			pt.e = v;
			pt.setRatio = lazySet;
			pt.data = this;
		};

		/** @private **/
		p._linkCSSP = function (pt, next, prev, remove) {
			if (pt) {
				if (next) {
					next._prev = pt;
				}
				if (pt._next) {
					pt._next._prev = pt._prev;
				}
				if (pt._prev) {
					pt._prev._next = pt._next;
				} else if (this._firstPT === pt) {
					this._firstPT = pt._next;
					remove = true; //just to prevent resetting this._firstPT 5 lines down in case pt._next is null. (optimized for speed)
				}
				if (prev) {
					prev._next = pt;
				} else if (!remove && this._firstPT === null) {
					this._firstPT = pt;
				}
				pt._next = next;
				pt._prev = prev;
			}
			return pt;
		};

		p._mod = function (lookup) {
			var pt = this._firstPT;
			while (pt) {
				if (typeof lookup[pt.p] === "function" && lookup[pt.p] === Math.round) {
					//only gets called by RoundPropsPlugin (ModifyPlugin manages all the rendering internally for CSSPlugin properties that need modification). Remember, we handle rounding a bit differently in this plugin for performance reasons, leveraging "r" as an indicator that the value should be rounded internally..
					pt.r = 1;
				}
				pt = pt._next;
			}
		};

		//we need to make sure that if alpha or autoAlpha is killed, opacity is too. And autoAlpha affects the "visibility" property.
		p._kill = function (lookup) {
			var copy = lookup,
			    pt,
			    p,
			    xfirst;
			if (lookup.autoAlpha || lookup.alpha) {
				copy = {};
				for (p in lookup) {
					//copy the lookup so that we're not changing the original which may be passed elsewhere.
					copy[p] = lookup[p];
				}
				copy.opacity = 1;
				if (copy.autoAlpha) {
					copy.visibility = 1;
				}
			}
			if (lookup.className && (pt = this._classNamePT)) {
				//for className tweens, we need to kill any associated CSSPropTweens too; a linked list starts at the className's "xfirst".
				xfirst = pt.xfirst;
				if (xfirst && xfirst._prev) {
					this._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev); //break off the prev
				} else if (xfirst === this._firstPT) {
					this._firstPT = pt._next;
				}
				if (pt._next) {
					this._linkCSSP(pt._next, pt._next._next, xfirst._prev);
				}
				this._classNamePT = null;
			}
			pt = this._firstPT;
			while (pt) {
				if (pt.plugin && pt.plugin !== p && pt.plugin._kill) {
					//for plugins that are registered with CSSPlugin, we should notify them of the kill.
					pt.plugin._kill(lookup);
					p = pt.plugin;
				}
				pt = pt._next;
			}
			return TweenPlugin.prototype._kill.call(this, copy);
		};

		//used by cascadeTo() for gathering all the style properties of each child element into an array for comparison.
		var _getChildStyles = function _getChildStyles(e, props, targets) {
			var children, i, child, type;
			if (e.slice) {
				i = e.length;
				while (--i > -1) {
					_getChildStyles(e[i], props, targets);
				}
				return;
			}
			children = e.childNodes;
			i = children.length;
			while (--i > -1) {
				child = children[i];
				type = child.type;
				if (child.style) {
					props.push(_getAllStyles(child));
					if (targets) {
						targets.push(child);
					}
				}
				if ((type === 1 || type === 9 || type === 11) && child.childNodes.length) {
					_getChildStyles(child, props, targets);
				}
			}
		};

		/**
   * Typically only useful for className tweens that may affect child elements, this method creates a TweenLite
   * and then compares the style properties of all the target's child elements at the tween's start and end, and
   * if any are different, it also creates tweens for those and returns an array containing ALL of the resulting
   * tweens (so that you can easily add() them to a TimelineLite, for example). The reason this functionality is
   * wrapped into a separate static method of CSSPlugin instead of being integrated into all regular className tweens
   * is because it creates entirely new tweens that may have completely different targets than the original tween,
   * so if they were all lumped into the original tween instance, it would be inconsistent with the rest of the API
   * and it would create other problems. For example:
   *  - If I create a tween of elementA, that tween instance may suddenly change its target to include 50 other elements (unintuitive if I specifically defined the target I wanted)
   *  - We can't just create new independent tweens because otherwise, what happens if the original/parent tween is reversed or pause or dropped into a TimelineLite for tight control? You'd expect that tween's behavior to affect all the others.
   *  - Analyzing every style property of every child before and after the tween is an expensive operation when there are many children, so this behavior shouldn't be imposed on all className tweens by default, especially since it's probably rare that this extra functionality is needed.
   *
   * @param {Object} target object to be tweened
   * @param {number} Duration in seconds (or frames for frames-based tweens)
   * @param {Object} Object containing the end values, like {className:"newClass", ease:Linear.easeNone}
   * @return {Array} An array of TweenLite instances
   */
		CSSPlugin.cascadeTo = function (target, duration, vars) {
			var tween = TweenLite.to(target, duration, vars),
			    results = [tween],
			    b = [],
			    e = [],
			    targets = [],
			    _reservedProps = TweenLite._internals.reservedProps,
			    i,
			    difs,
			    p,
			    from;
			target = tween._targets || tween.target;
			_getChildStyles(target, b, targets);
			tween.render(duration, true, true);
			_getChildStyles(target, e);
			tween.render(0, true, true);
			tween._enabled(true);
			i = targets.length;
			while (--i > -1) {
				difs = _cssDif(targets[i], b[i], e[i]);
				if (difs.firstMPT) {
					difs = difs.difs;
					for (p in vars) {
						if (_reservedProps[p]) {
							difs[p] = vars[p];
						}
					}
					from = {};
					for (p in difs) {
						from[p] = b[i][p];
					}
					results.push(TweenLite.fromTo(targets[i], duration, from, difs));
				}
			}
			return results;
		};

		TweenPlugin.activate([CSSPlugin]);
		return CSSPlugin;
	}, true);

	/*
  * ----------------------------------------------------------------
  * RoundPropsPlugin
  * ----------------------------------------------------------------
  */
	(function () {

		var RoundPropsPlugin = _gsScope._gsDefine.plugin({
			propName: "roundProps",
			version: "1.6.0",
			priority: -1,
			API: 2,

			//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
			init: function init(target, value, tween) {
				this._tween = tween;
				return true;
			}

		}),
		    _roundLinkedList = function _roundLinkedList(node) {
			while (node) {
				if (!node.f && !node.blob) {
					node.m = Math.round;
				}
				node = node._next;
			}
		},
		    p = RoundPropsPlugin.prototype;

		p._onInitAllProps = function () {
			var tween = this._tween,
			    rp = tween.vars.roundProps.join ? tween.vars.roundProps : tween.vars.roundProps.split(","),
			    i = rp.length,
			    lookup = {},
			    rpt = tween._propLookup.roundProps,
			    prop,
			    pt,
			    next;
			while (--i > -1) {
				lookup[rp[i]] = Math.round;
			}
			i = rp.length;
			while (--i > -1) {
				prop = rp[i];
				pt = tween._firstPT;
				while (pt) {
					next = pt._next; //record here, because it may get removed
					if (pt.pg) {
						pt.t._mod(lookup);
					} else if (pt.n === prop) {
						if (pt.f === 2 && pt.t) {
							//a blob (text containing multiple numeric values)
							_roundLinkedList(pt.t._firstPT);
						} else {
							this._add(pt.t, prop, pt.s, pt.c);
							//remove from linked list
							if (next) {
								next._prev = pt._prev;
							}
							if (pt._prev) {
								pt._prev._next = next;
							} else if (tween._firstPT === pt) {
								tween._firstPT = next;
							}
							pt._next = pt._prev = null;
							tween._propLookup[prop] = rpt;
						}
					}
					pt = next;
				}
			}
			return false;
		};

		p._add = function (target, p, s, c) {
			this._addTween(target, p, s, s + c, p, Math.round);
			this._overwriteProps.push(p);
		};
	})();

	/*
  * ----------------------------------------------------------------
  * AttrPlugin
  * ----------------------------------------------------------------
  */

	(function () {

		_gsScope._gsDefine.plugin({
			propName: "attr",
			API: 2,
			version: "0.6.1",

			//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
			init: function init(target, value, tween, index) {
				var p, end;
				if (typeof target.setAttribute !== "function") {
					return false;
				}
				for (p in value) {
					end = value[p];
					if (typeof end === "function") {
						end = end(index, target);
					}
					this._addTween(target, "setAttribute", target.getAttribute(p) + "", end + "", p, false, p);
					this._overwriteProps.push(p);
				}
				return true;
			}

		});
	})();

	/*
  * ----------------------------------------------------------------
  * DirectionalRotationPlugin
  * ----------------------------------------------------------------
  */
	_gsScope._gsDefine.plugin({
		propName: "directionalRotation",
		version: "0.3.1",
		API: 2,

		//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
		init: function init(target, value, tween, index) {
			if ((typeof value === "undefined" ? "undefined" : _typeof(value)) !== "object") {
				value = { rotation: value };
			}
			this.finals = {};
			var cap = value.useRadians === true ? Math.PI * 2 : 360,
			    min = 0.000001,
			    p,
			    v,
			    start,
			    end,
			    dif,
			    split;
			for (p in value) {
				if (p !== "useRadians") {
					end = value[p];
					if (typeof end === "function") {
						end = end(index, target);
					}
					split = (end + "").split("_");
					v = split[0];
					start = parseFloat(typeof target[p] !== "function" ? target[p] : target[p.indexOf("set") || typeof target["get" + p.substr(3)] !== "function" ? p : "get" + p.substr(3)]());
					end = this.finals[p] = typeof v === "string" && v.charAt(1) === "=" ? start + parseInt(v.charAt(0) + "1", 10) * Number(v.substr(2)) : Number(v) || 0;
					dif = end - start;
					if (split.length) {
						v = split.join("_");
						if (v.indexOf("short") !== -1) {
							dif = dif % cap;
							if (dif !== dif % (cap / 2)) {
								dif = dif < 0 ? dif + cap : dif - cap;
							}
						}
						if (v.indexOf("_cw") !== -1 && dif < 0) {
							dif = (dif + cap * 9999999999) % cap - (dif / cap | 0) * cap;
						} else if (v.indexOf("ccw") !== -1 && dif > 0) {
							dif = (dif - cap * 9999999999) % cap - (dif / cap | 0) * cap;
						}
					}
					if (dif > min || dif < -min) {
						this._addTween(target, p, start, start + dif, p);
						this._overwriteProps.push(p);
					}
				}
			}
			return true;
		},

		//called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
		set: function set(ratio) {
			var pt;
			if (ratio !== 1) {
				this._super.setRatio.call(this, ratio);
			} else {
				pt = this._firstPT;
				while (pt) {
					if (pt.f) {
						pt.t[pt.p](this.finals[pt.p]);
					} else {
						pt.t[pt.p] = this.finals[pt.p];
					}
					pt = pt._next;
				}
			}
		}

	})._autoCSS = true;

	/*
  * ----------------------------------------------------------------
  * EasePack
  * ----------------------------------------------------------------
  */
	_gsScope._gsDefine("easing.Back", ["easing.Ease"], function (Ease) {

		var w = _gsScope.GreenSockGlobals || _gsScope,
		    gs = w.com.greensock,
		    _2PI = Math.PI * 2,
		    _HALF_PI = Math.PI / 2,
		    _class = gs._class,
		    _create = function _create(n, f) {
			var C = _class("easing." + n, function () {}, true),
			    p = C.prototype = new Ease();
			p.constructor = C;
			p.getRatio = f;
			return C;
		},
		    _easeReg = Ease.register || function () {},
		    //put an empty function in place just as a safety measure in case someone loads an OLD version of TweenLite.js where Ease.register doesn't exist.
		_wrap = function _wrap(name, EaseOut, EaseIn, EaseInOut, aliases) {
			var C = _class("easing." + name, {
				easeOut: new EaseOut(),
				easeIn: new EaseIn(),
				easeInOut: new EaseInOut()
			}, true);
			_easeReg(C, name);
			return C;
		},
		    EasePoint = function EasePoint(time, value, next) {
			this.t = time;
			this.v = value;
			if (next) {
				this.next = next;
				next.prev = this;
				this.c = next.v - value;
				this.gap = next.t - time;
			}
		},


		//Back
		_createBack = function _createBack(n, f) {
			var C = _class("easing." + n, function (overshoot) {
				this._p1 = overshoot || overshoot === 0 ? overshoot : 1.70158;
				this._p2 = this._p1 * 1.525;
			}, true),
			    p = C.prototype = new Ease();
			p.constructor = C;
			p.getRatio = f;
			p.config = function (overshoot) {
				return new C(overshoot);
			};
			return C;
		},
		    Back = _wrap("Back", _createBack("BackOut", function (p) {
			return (p = p - 1) * p * ((this._p1 + 1) * p + this._p1) + 1;
		}), _createBack("BackIn", function (p) {
			return p * p * ((this._p1 + 1) * p - this._p1);
		}), _createBack("BackInOut", function (p) {
			return (p *= 2) < 1 ? 0.5 * p * p * ((this._p2 + 1) * p - this._p2) : 0.5 * ((p -= 2) * p * ((this._p2 + 1) * p + this._p2) + 2);
		})),


		//SlowMo
		SlowMo = _class("easing.SlowMo", function (linearRatio, power, yoyoMode) {
			power = power || power === 0 ? power : 0.7;
			if (linearRatio == null) {
				linearRatio = 0.7;
			} else if (linearRatio > 1) {
				linearRatio = 1;
			}
			this._p = linearRatio !== 1 ? power : 0;
			this._p1 = (1 - linearRatio) / 2;
			this._p2 = linearRatio;
			this._p3 = this._p1 + this._p2;
			this._calcEnd = yoyoMode === true;
		}, true),
		    p = SlowMo.prototype = new Ease(),
		    SteppedEase,
		    RoughEase,
		    _createElastic;

		p.constructor = SlowMo;
		p.getRatio = function (p) {
			var r = p + (0.5 - p) * this._p;
			if (p < this._p1) {
				return this._calcEnd ? 1 - (p = 1 - p / this._p1) * p : r - (p = 1 - p / this._p1) * p * p * p * r;
			} else if (p > this._p3) {
				return this._calcEnd ? 1 - (p = (p - this._p3) / this._p1) * p : r + (p - r) * (p = (p - this._p3) / this._p1) * p * p * p;
			}
			return this._calcEnd ? 1 : r;
		};
		SlowMo.ease = new SlowMo(0.7, 0.7);

		p.config = SlowMo.config = function (linearRatio, power, yoyoMode) {
			return new SlowMo(linearRatio, power, yoyoMode);
		};

		//SteppedEase
		SteppedEase = _class("easing.SteppedEase", function (steps, immediateStart) {
			steps = steps || 1;
			this._p1 = 1 / steps;
			this._p2 = steps + (immediateStart ? 0 : 1);
			this._p3 = immediateStart ? 1 : 0;
		}, true);
		p = SteppedEase.prototype = new Ease();
		p.constructor = SteppedEase;
		p.getRatio = function (p) {
			if (p < 0) {
				p = 0;
			} else if (p >= 1) {
				p = 0.999999999;
			}
			return ((this._p2 * p | 0) + this._p3) * this._p1;
		};
		p.config = SteppedEase.config = function (steps, immediateStart) {
			return new SteppedEase(steps, immediateStart);
		};

		//RoughEase
		RoughEase = _class("easing.RoughEase", function (vars) {
			vars = vars || {};
			var taper = vars.taper || "none",
			    a = [],
			    cnt = 0,
			    points = (vars.points || 20) | 0,
			    i = points,
			    randomize = vars.randomize !== false,
			    clamp = vars.clamp === true,
			    template = vars.template instanceof Ease ? vars.template : null,
			    strength = typeof vars.strength === "number" ? vars.strength * 0.4 : 0.4,
			    x,
			    y,
			    bump,
			    invX,
			    obj,
			    pnt;
			while (--i > -1) {
				x = randomize ? Math.random() : 1 / points * i;
				y = template ? template.getRatio(x) : x;
				if (taper === "none") {
					bump = strength;
				} else if (taper === "out") {
					invX = 1 - x;
					bump = invX * invX * strength;
				} else if (taper === "in") {
					bump = x * x * strength;
				} else if (x < 0.5) {
					//"both" (start)
					invX = x * 2;
					bump = invX * invX * 0.5 * strength;
				} else {
					//"both" (end)
					invX = (1 - x) * 2;
					bump = invX * invX * 0.5 * strength;
				}
				if (randomize) {
					y += Math.random() * bump - bump * 0.5;
				} else if (i % 2) {
					y += bump * 0.5;
				} else {
					y -= bump * 0.5;
				}
				if (clamp) {
					if (y > 1) {
						y = 1;
					} else if (y < 0) {
						y = 0;
					}
				}
				a[cnt++] = { x: x, y: y };
			}
			a.sort(function (a, b) {
				return a.x - b.x;
			});

			pnt = new EasePoint(1, 1, null);
			i = points;
			while (--i > -1) {
				obj = a[i];
				pnt = new EasePoint(obj.x, obj.y, pnt);
			}

			this._prev = new EasePoint(0, 0, pnt.t !== 0 ? pnt : pnt.next);
		}, true);
		p = RoughEase.prototype = new Ease();
		p.constructor = RoughEase;
		p.getRatio = function (p) {
			var pnt = this._prev;
			if (p > pnt.t) {
				while (pnt.next && p >= pnt.t) {
					pnt = pnt.next;
				}
				pnt = pnt.prev;
			} else {
				while (pnt.prev && p <= pnt.t) {
					pnt = pnt.prev;
				}
			}
			this._prev = pnt;
			return pnt.v + (p - pnt.t) / pnt.gap * pnt.c;
		};
		p.config = function (vars) {
			return new RoughEase(vars);
		};
		RoughEase.ease = new RoughEase();

		//Bounce
		_wrap("Bounce", _create("BounceOut", function (p) {
			if (p < 1 / 2.75) {
				return 7.5625 * p * p;
			} else if (p < 2 / 2.75) {
				return 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;
			} else if (p < 2.5 / 2.75) {
				return 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;
			}
			return 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;
		}), _create("BounceIn", function (p) {
			if ((p = 1 - p) < 1 / 2.75) {
				return 1 - 7.5625 * p * p;
			} else if (p < 2 / 2.75) {
				return 1 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);
			} else if (p < 2.5 / 2.75) {
				return 1 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);
			}
			return 1 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);
		}), _create("BounceInOut", function (p) {
			var invert = p < 0.5;
			if (invert) {
				p = 1 - p * 2;
			} else {
				p = p * 2 - 1;
			}
			if (p < 1 / 2.75) {
				p = 7.5625 * p * p;
			} else if (p < 2 / 2.75) {
				p = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;
			} else if (p < 2.5 / 2.75) {
				p = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;
			} else {
				p = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;
			}
			return invert ? (1 - p) * 0.5 : p * 0.5 + 0.5;
		}));

		//CIRC
		_wrap("Circ", _create("CircOut", function (p) {
			return Math.sqrt(1 - (p = p - 1) * p);
		}), _create("CircIn", function (p) {
			return -(Math.sqrt(1 - p * p) - 1);
		}), _create("CircInOut", function (p) {
			return (p *= 2) < 1 ? -0.5 * (Math.sqrt(1 - p * p) - 1) : 0.5 * (Math.sqrt(1 - (p -= 2) * p) + 1);
		}));

		//Elastic
		_createElastic = function _createElastic(n, f, def) {
			var C = _class("easing." + n, function (amplitude, period) {
				this._p1 = amplitude >= 1 ? amplitude : 1; //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
				this._p2 = (period || def) / (amplitude < 1 ? amplitude : 1);
				this._p3 = this._p2 / _2PI * (Math.asin(1 / this._p1) || 0);
				this._p2 = _2PI / this._p2; //precalculate to optimize
			}, true),
			    p = C.prototype = new Ease();
			p.constructor = C;
			p.getRatio = f;
			p.config = function (amplitude, period) {
				return new C(amplitude, period);
			};
			return C;
		};
		_wrap("Elastic", _createElastic("ElasticOut", function (p) {
			return this._p1 * Math.pow(2, -10 * p) * Math.sin((p - this._p3) * this._p2) + 1;
		}, 0.3), _createElastic("ElasticIn", function (p) {
			return -(this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2));
		}, 0.3), _createElastic("ElasticInOut", function (p) {
			return (p *= 2) < 1 ? -0.5 * (this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2)) : this._p1 * Math.pow(2, -10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2) * 0.5 + 1;
		}, 0.45));

		//Expo
		_wrap("Expo", _create("ExpoOut", function (p) {
			return 1 - Math.pow(2, -10 * p);
		}), _create("ExpoIn", function (p) {
			return Math.pow(2, 10 * (p - 1)) - 0.001;
		}), _create("ExpoInOut", function (p) {
			return (p *= 2) < 1 ? 0.5 * Math.pow(2, 10 * (p - 1)) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
		}));

		//Sine
		_wrap("Sine", _create("SineOut", function (p) {
			return Math.sin(p * _HALF_PI);
		}), _create("SineIn", function (p) {
			return -Math.cos(p * _HALF_PI) + 1;
		}), _create("SineInOut", function (p) {
			return -0.5 * (Math.cos(Math.PI * p) - 1);
		}));

		_class("easing.EaseLookup", {
			find: function find(s) {
				return Ease.map[s];
			}
		}, true);

		//register the non-standard eases
		_easeReg(w.SlowMo, "SlowMo", "ease,");
		_easeReg(RoughEase, "RoughEase", "ease,");
		_easeReg(SteppedEase, "SteppedEase", "ease,");

		return Back;
	}, true);
});

if (_gsScope._gsDefine) {
	_gsScope._gsQueue.pop()();
} //necessary in case TweenLite was already loaded separately.


/*
 * ----------------------------------------------------------------
 * Base classes like TweenLite, SimpleTimeline, Ease, Ticker, etc.
 * ----------------------------------------------------------------
 */
(function (window, moduleName) {

	"use strict";

	var _exports = {},
	    _doc = window.document,
	    _globals = window.GreenSockGlobals = window.GreenSockGlobals || window;
	if (_globals.TweenLite) {
		return; //in case the core set of classes is already loaded, don't instantiate twice.
	}
	var _namespace = function _namespace(ns) {
		var a = ns.split("."),
		    p = _globals,
		    i;
		for (i = 0; i < a.length; i++) {
			p[a[i]] = p = p[a[i]] || {};
		}
		return p;
	},
	    gs = _namespace("com.greensock"),
	    _tinyNum = 0.0000000001,
	    _slice = function _slice(a) {
		//don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
		var b = [],
		    l = a.length,
		    i;
		for (i = 0; i !== l; b.push(a[i++])) {}
		return b;
	},
	    _emptyFunc = function _emptyFunc() {},
	    _isArray = function () {
		//works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, "(obj instanceof Array)" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)
		var toString = Object.prototype.toString,
		    array = toString.call([]);
		return function (obj) {
			return obj != null && (obj instanceof Array || (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" && !!obj.push && toString.call(obj) === array);
		};
	}(),
	    a,
	    i,
	    p,
	    _ticker,
	    _tickerActive,
	    _defLookup = {},


	/**
  * @constructor
  * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.
  * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is
  * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin
  * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.
  *
  * Every definition will be added to a "com.greensock" global object (typically window, but if a window.GreenSockGlobals object is found,
  * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,
  * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so
  * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything
  * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock
  * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could
  * sandbox the banner one like:
  *
  * <script>
  *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a "gs" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, "gs" or "banner" or whatever.
  * </script>
  * <script src="js/greensock/v1.7/TweenMax.js"></script>
  * <script>
  *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)
  * </script>
  * <script src="js/greensock/v1.6/TweenMax.js"></script>
  * <script>
  *     gs.TweenLite.to(...); //would use v1.7
  *     TweenLite.to(...); //would use v1.6
  * </script>
  *
  * @param {!string} ns The namespace of the class definition, leaving off "com.greensock." as that's assumed. For example, "TweenLite" or "plugins.CSSPlugin" or "easing.Back".
  * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus "com.greensock." prefix). For example ["TweenLite","plugins.TweenPlugin","core.Animation"]
  * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.
  * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)
  */
	Definition = function Definition(ns, dependencies, func, global) {
		this.sc = _defLookup[ns] ? _defLookup[ns].sc : []; //subclasses
		_defLookup[ns] = this;
		this.gsClass = null;
		this.func = func;
		var _classes = [];
		this.check = function (init) {
			var i = dependencies.length,
			    missing = i,
			    cur,
			    a,
			    n,
			    cl;
			while (--i > -1) {
				if ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {
					_classes[i] = cur.gsClass;
					missing--;
				} else if (init) {
					cur.sc.push(this);
				}
			}
			if (missing === 0 && func) {
				a = ("com.greensock." + ns).split(".");
				n = a.pop();
				cl = _namespace(a.join("."))[n] = this.gsClass = func.apply(func, _classes);

				//exports to multiple environments
				if (global) {
					_globals[n] = _exports[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)
					if (typeof module !== "undefined" && module.exports) {
						//node
						if (ns === moduleName) {
							module.exports = _exports[moduleName] = cl;
							for (i in _exports) {
								cl[i] = _exports[i];
							}
						} else if (_exports[moduleName]) {
							_exports[moduleName][n] = cl;
						}
					} else if (true) {
						//AMD
						!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
							return cl;
						}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
					}
				}
				for (i = 0; i < this.sc.length; i++) {
					this.sc[i].check();
				}
			}
		};
		this.check(true);
	},


	//used to create Definition instances (which basically registers a class that has dependencies).
	_gsDefine = window._gsDefine = function (ns, dependencies, func, global) {
		return new Definition(ns, dependencies, func, global);
	},


	//a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).
	_class = gs._class = function (ns, func, global) {
		func = func || function () {};
		_gsDefine(ns, [], function () {
			return func;
		}, global);
		return func;
	};

	_gsDefine.globals = _globals;

	/*
  * ----------------------------------------------------------------
  * Ease
  * ----------------------------------------------------------------
  */
	var _baseParams = [0, 0, 1, 1],
	    Ease = _class("easing.Ease", function (func, extraParams, type, power) {
		this._func = func;
		this._type = type || 0;
		this._power = power || 0;
		this._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;
	}, true),
	    _easeMap = Ease.map = {},
	    _easeReg = Ease.register = function (ease, names, types, create) {
		var na = names.split(","),
		    i = na.length,
		    ta = (types || "easeIn,easeOut,easeInOut").split(","),
		    e,
		    name,
		    j,
		    type;
		while (--i > -1) {
			name = na[i];
			e = create ? _class("easing." + name, null, true) : gs.easing[name] || {};
			j = ta.length;
			while (--j > -1) {
				type = ta[j];
				_easeMap[name + "." + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();
			}
		}
	};

	p = Ease.prototype;
	p._calcEnd = false;
	p.getRatio = function (p) {
		if (this._func) {
			this._params[0] = p;
			return this._func.apply(null, this._params);
		}
		var t = this._type,
		    pw = this._power,
		    r = t === 1 ? 1 - p : t === 2 ? p : p < 0.5 ? p * 2 : (1 - p) * 2;
		if (pw === 1) {
			r *= r;
		} else if (pw === 2) {
			r *= r * r;
		} else if (pw === 3) {
			r *= r * r * r;
		} else if (pw === 4) {
			r *= r * r * r * r;
		}
		return t === 1 ? 1 - r : t === 2 ? r : p < 0.5 ? r / 2 : 1 - r / 2;
	};

	//create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)
	a = ["Linear", "Quad", "Cubic", "Quart", "Quint,Strong"];
	i = a.length;
	while (--i > -1) {
		p = a[i] + ",Power" + i;
		_easeReg(new Ease(null, null, 1, i), p, "easeOut", true);
		_easeReg(new Ease(null, null, 2, i), p, "easeIn" + (i === 0 ? ",easeNone" : ""));
		_easeReg(new Ease(null, null, 3, i), p, "easeInOut");
	}
	_easeMap.linear = gs.easing.Linear.easeIn;
	_easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks


	/*
  * ----------------------------------------------------------------
  * EventDispatcher
  * ----------------------------------------------------------------
  */
	var EventDispatcher = _class("events.EventDispatcher", function (target) {
		this._listeners = {};
		this._eventTarget = target || this;
	});
	p = EventDispatcher.prototype;

	p.addEventListener = function (type, callback, scope, useParam, priority) {
		priority = priority || 0;
		var list = this._listeners[type],
		    index = 0,
		    listener,
		    i;
		if (this === _ticker && !_tickerActive) {
			_ticker.wake();
		}
		if (list == null) {
			this._listeners[type] = list = [];
		}
		i = list.length;
		while (--i > -1) {
			listener = list[i];
			if (listener.c === callback && listener.s === scope) {
				list.splice(i, 1);
			} else if (index === 0 && listener.pr < priority) {
				index = i + 1;
			}
		}
		list.splice(index, 0, { c: callback, s: scope, up: useParam, pr: priority });
	};

	p.removeEventListener = function (type, callback) {
		var list = this._listeners[type],
		    i;
		if (list) {
			i = list.length;
			while (--i > -1) {
				if (list[i].c === callback) {
					list.splice(i, 1);
					return;
				}
			}
		}
	};

	p.dispatchEvent = function (type) {
		var list = this._listeners[type],
		    i,
		    t,
		    listener;
		if (list) {
			i = list.length;
			if (i > 1) {
				list = list.slice(0); //in case addEventListener() is called from within a listener/callback (otherwise the index could change, resulting in a skip)
			}
			t = this._eventTarget;
			while (--i > -1) {
				listener = list[i];
				if (listener) {
					if (listener.up) {
						listener.c.call(listener.s || t, { type: type, target: t });
					} else {
						listener.c.call(listener.s || t);
					}
				}
			}
		}
	};

	/*
  * ----------------------------------------------------------------
  * Ticker
  * ----------------------------------------------------------------
  */
	var _reqAnimFrame = window.requestAnimationFrame,
	    _cancelAnimFrame = window.cancelAnimationFrame,
	    _getTime = Date.now || function () {
		return new Date().getTime();
	},
	    _lastUpdate = _getTime();

	//now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.
	a = ["ms", "moz", "webkit", "o"];
	i = a.length;
	while (--i > -1 && !_reqAnimFrame) {
		_reqAnimFrame = window[a[i] + "RequestAnimationFrame"];
		_cancelAnimFrame = window[a[i] + "CancelAnimationFrame"] || window[a[i] + "CancelRequestAnimationFrame"];
	}

	_class("Ticker", function (fps, useRAF) {
		var _self = this,
		    _startTime = _getTime(),
		    _useRAF = useRAF !== false && _reqAnimFrame ? "auto" : false,
		    _lagThreshold = 500,
		    _adjustedLag = 33,
		    _tickWord = "tick",
		    //helps reduce gc burden
		_fps,
		    _req,
		    _id,
		    _gap,
		    _nextTime,
		    _tick = function _tick(manual) {
			var elapsed = _getTime() - _lastUpdate,
			    overlap,
			    dispatch;
			if (elapsed > _lagThreshold) {
				_startTime += elapsed - _adjustedLag;
			}
			_lastUpdate += elapsed;
			_self.time = (_lastUpdate - _startTime) / 1000;
			overlap = _self.time - _nextTime;
			if (!_fps || overlap > 0 || manual === true) {
				_self.frame++;
				_nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);
				dispatch = true;
			}
			if (manual !== true) {
				//make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
				_id = _req(_tick);
			}
			if (dispatch) {
				_self.dispatchEvent(_tickWord);
			}
		};

		EventDispatcher.call(_self);
		_self.time = _self.frame = 0;
		_self.tick = function () {
			_tick(true);
		};

		_self.lagSmoothing = function (threshold, adjustedLag) {
			_lagThreshold = threshold || 1 / _tinyNum; //zero should be interpreted as basically unlimited
			_adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
		};

		_self.sleep = function () {
			if (_id == null) {
				return;
			}
			if (!_useRAF || !_cancelAnimFrame) {
				clearTimeout(_id);
			} else {
				_cancelAnimFrame(_id);
			}
			_req = _emptyFunc;
			_id = null;
			if (_self === _ticker) {
				_tickerActive = false;
			}
		};

		_self.wake = function (seamless) {
			if (_id !== null) {
				_self.sleep();
			} else if (seamless) {
				_startTime += -_lastUpdate + (_lastUpdate = _getTime());
			} else if (_self.frame > 10) {
				//don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().
				_lastUpdate = _getTime() - _lagThreshold + 5;
			}
			_req = _fps === 0 ? _emptyFunc : !_useRAF || !_reqAnimFrame ? function (f) {
				return setTimeout(f, (_nextTime - _self.time) * 1000 + 1 | 0);
			} : _reqAnimFrame;
			if (_self === _ticker) {
				_tickerActive = true;
			}
			_tick(2);
		};

		_self.fps = function (value) {
			if (!arguments.length) {
				return _fps;
			}
			_fps = value;
			_gap = 1 / (_fps || 60);
			_nextTime = this.time + _gap;
			_self.wake();
		};

		_self.useRAF = function (value) {
			if (!arguments.length) {
				return _useRAF;
			}
			_self.sleep();
			_useRAF = value;
			_self.fps(_fps);
		};
		_self.fps(fps);

		//a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.
		setTimeout(function () {
			if (_useRAF === "auto" && _self.frame < 5 && _doc.visibilityState !== "hidden") {
				_self.useRAF(false);
			}
		}, 1500);
	});

	p = gs.Ticker.prototype = new gs.events.EventDispatcher();
	p.constructor = gs.Ticker;

	/*
  * ----------------------------------------------------------------
  * Animation
  * ----------------------------------------------------------------
  */
	var Animation = _class("core.Animation", function (duration, vars) {
		this.vars = vars = vars || {};
		this._duration = this._totalDuration = duration || 0;
		this._delay = Number(vars.delay) || 0;
		this._timeScale = 1;
		this._active = vars.immediateRender === true;
		this.data = vars.data;
		this._reversed = vars.reversed === true;

		if (!_rootTimeline) {
			return;
		}
		if (!_tickerActive) {
			//some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.
			_ticker.wake();
		}

		var tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;
		tl.add(this, tl._time);

		if (this.vars.paused) {
			this.paused(true);
		}
	});

	_ticker = Animation.ticker = new gs.Ticker();
	p = Animation.prototype;
	p._dirty = p._gc = p._initted = p._paused = false;
	p._totalTime = p._time = 0;
	p._rawPrevTime = -1;
	p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;
	p._paused = false;

	//some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.
	var _checkTimeout = function _checkTimeout() {
		if (_tickerActive && _getTime() - _lastUpdate > 2000 && _doc.visibilityState !== "hidden") {
			_ticker.wake();
		}
		var t = setTimeout(_checkTimeout, 2000);
		if (t.unref) {
			// allows a node process to exit even if the timeout’s callback hasn't been invoked. Without it, the node process could hang as this function is called every two seconds.
			t.unref();
		}
	};
	_checkTimeout();

	p.play = function (from, suppressEvents) {
		if (from != null) {
			this.seek(from, suppressEvents);
		}
		return this.reversed(false).paused(false);
	};

	p.pause = function (atTime, suppressEvents) {
		if (atTime != null) {
			this.seek(atTime, suppressEvents);
		}
		return this.paused(true);
	};

	p.resume = function (from, suppressEvents) {
		if (from != null) {
			this.seek(from, suppressEvents);
		}
		return this.paused(false);
	};

	p.seek = function (time, suppressEvents) {
		return this.totalTime(Number(time), suppressEvents !== false);
	};

	p.restart = function (includeDelay, suppressEvents) {
		return this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, suppressEvents !== false, true);
	};

	p.reverse = function (from, suppressEvents) {
		if (from != null) {
			this.seek(from || this.totalDuration(), suppressEvents);
		}
		return this.reversed(true).paused(false);
	};

	p.render = function (time, suppressEvents, force) {
		//stub - we override this method in subclasses.
	};

	p.invalidate = function () {
		this._time = this._totalTime = 0;
		this._initted = this._gc = false;
		this._rawPrevTime = -1;
		if (this._gc || !this.timeline) {
			this._enabled(true);
		}
		return this;
	};

	p.isActive = function () {
		var tl = this._timeline,
		    //the 2 root timelines won't have a _timeline; they're always active.
		startTime = this._startTime,
		    rawTime;
		return !tl || !this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - 0.0000001;
	};

	p._enabled = function (enabled, ignoreTimeline) {
		if (!_tickerActive) {
			_ticker.wake();
		}
		this._gc = !enabled;
		this._active = this.isActive();
		if (ignoreTimeline !== true) {
			if (enabled && !this.timeline) {
				this._timeline.add(this, this._startTime - this._delay);
			} else if (!enabled && this.timeline) {
				this._timeline._remove(this, true);
			}
		}
		return false;
	};

	p._kill = function (vars, target) {
		return this._enabled(false, false);
	};

	p.kill = function (vars, target) {
		this._kill(vars, target);
		return this;
	};

	p._uncache = function (includeSelf) {
		var tween = includeSelf ? this : this.timeline;
		while (tween) {
			tween._dirty = true;
			tween = tween.timeline;
		}
		return this;
	};

	p._swapSelfInParams = function (params) {
		var i = params.length,
		    copy = params.concat();
		while (--i > -1) {
			if (params[i] === "{self}") {
				copy[i] = this;
			}
		}
		return copy;
	};

	p._callback = function (type) {
		var v = this.vars,
		    callback = v[type],
		    params = v[type + "Params"],
		    scope = v[type + "Scope"] || v.callbackScope || this,
		    l = params ? params.length : 0;
		switch (l) {//speed optimization; call() is faster than apply() so use it when there are only a few parameters (which is by far most common). Previously we simply did var v = this.vars; v[type].apply(v[type + "Scope"] || v.callbackScope || this, v[type + "Params"] || _blankArray);
			case 0:
				callback.call(scope);break;
			case 1:
				callback.call(scope, params[0]);break;
			case 2:
				callback.call(scope, params[0], params[1]);break;
			default:
				callback.apply(scope, params);
		}
	};

	//----Animation getters/setters --------------------------------------------------------

	p.eventCallback = function (type, callback, params, scope) {
		if ((type || "").substr(0, 2) === "on") {
			var v = this.vars;
			if (arguments.length === 1) {
				return v[type];
			}
			if (callback == null) {
				delete v[type];
			} else {
				v[type] = callback;
				v[type + "Params"] = _isArray(params) && params.join("").indexOf("{self}") !== -1 ? this._swapSelfInParams(params) : params;
				v[type + "Scope"] = scope;
			}
			if (type === "onUpdate") {
				this._onUpdate = callback;
			}
		}
		return this;
	};

	p.delay = function (value) {
		if (!arguments.length) {
			return this._delay;
		}
		if (this._timeline.smoothChildTiming) {
			this.startTime(this._startTime + value - this._delay);
		}
		this._delay = value;
		return this;
	};

	p.duration = function (value) {
		if (!arguments.length) {
			this._dirty = false;
			return this._duration;
		}
		this._duration = this._totalDuration = value;
		this._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.
		if (this._timeline.smoothChildTiming) if (this._time > 0) if (this._time < this._duration) if (value !== 0) {
			this.totalTime(this._totalTime * (value / this._duration), true);
		}
		return this;
	};

	p.totalDuration = function (value) {
		this._dirty = false;
		return !arguments.length ? this._totalDuration : this.duration(value);
	};

	p.time = function (value, suppressEvents) {
		if (!arguments.length) {
			return this._time;
		}
		if (this._dirty) {
			this.totalDuration();
		}
		return this.totalTime(value > this._duration ? this._duration : value, suppressEvents);
	};

	p.totalTime = function (time, suppressEvents, uncapped) {
		if (!_tickerActive) {
			_ticker.wake();
		}
		if (!arguments.length) {
			return this._totalTime;
		}
		if (this._timeline) {
			if (time < 0 && !uncapped) {
				time += this.totalDuration();
			}
			if (this._timeline.smoothChildTiming) {
				if (this._dirty) {
					this.totalDuration();
				}
				var totalDuration = this._totalDuration,
				    tl = this._timeline;
				if (time > totalDuration && !uncapped) {
					time = totalDuration;
				}
				this._startTime = (this._paused ? this._pauseTime : tl._time) - (!this._reversed ? time : totalDuration - time) / this._timeScale;
				if (!tl._dirty) {
					//for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
					this._uncache(false);
				}
				//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.
				if (tl._timeline) {
					while (tl._timeline) {
						if (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {
							tl.totalTime(tl._totalTime, true);
						}
						tl = tl._timeline;
					}
				}
			}
			if (this._gc) {
				this._enabled(true, false);
			}
			if (this._totalTime !== time || this._duration === 0) {
				if (_lazyTweens.length) {
					_lazyRender();
				}
				this.render(time, suppressEvents, false);
				if (_lazyTweens.length) {
					//in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
					_lazyRender();
				}
			}
		}
		return this;
	};

	p.progress = p.totalProgress = function (value, suppressEvents) {
		var duration = this.duration();
		return !arguments.length ? duration ? this._time / duration : this.ratio : this.totalTime(duration * value, suppressEvents);
	};

	p.startTime = function (value) {
		if (!arguments.length) {
			return this._startTime;
		}
		if (value !== this._startTime) {
			this._startTime = value;
			if (this.timeline) if (this.timeline._sortChildren) {
				this.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
			}
		}
		return this;
	};

	p.endTime = function (includeRepeats) {
		return this._startTime + (includeRepeats != false ? this.totalDuration() : this.duration()) / this._timeScale;
	};

	p.timeScale = function (value) {
		if (!arguments.length) {
			return this._timeScale;
		}
		value = value || _tinyNum; //can't allow zero because it'll throw the math off
		if (this._timeline && this._timeline.smoothChildTiming) {
			var pauseTime = this._pauseTime,
			    t = pauseTime || pauseTime === 0 ? pauseTime : this._timeline.totalTime();
			this._startTime = t - (t - this._startTime) * this._timeScale / value;
		}
		this._timeScale = value;
		return this._uncache(false);
	};

	p.reversed = function (value) {
		if (!arguments.length) {
			return this._reversed;
		}
		if (value != this._reversed) {
			this._reversed = value;
			this.totalTime(this._timeline && !this._timeline.smoothChildTiming ? this.totalDuration() - this._totalTime : this._totalTime, true);
		}
		return this;
	};

	p.paused = function (value) {
		if (!arguments.length) {
			return this._paused;
		}
		var tl = this._timeline,
		    raw,
		    elapsed;
		if (value != this._paused) if (tl) {
			if (!_tickerActive && !value) {
				_ticker.wake();
			}
			raw = tl.rawTime();
			elapsed = raw - this._pauseTime;
			if (!value && tl.smoothChildTiming) {
				this._startTime += elapsed;
				this._uncache(false);
			}
			this._pauseTime = value ? raw : null;
			this._paused = value;
			this._active = this.isActive();
			if (!value && elapsed !== 0 && this._initted && this.duration()) {
				raw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;
				this.render(raw, raw === this._totalTime, true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.
			}
		}
		if (this._gc && !value) {
			this._enabled(true, false);
		}
		return this;
	};

	/*
  * ----------------------------------------------------------------
  * SimpleTimeline
  * ----------------------------------------------------------------
  */
	var SimpleTimeline = _class("core.SimpleTimeline", function (vars) {
		Animation.call(this, 0, vars);
		this.autoRemoveChildren = this.smoothChildTiming = true;
	});

	p = SimpleTimeline.prototype = new Animation();
	p.constructor = SimpleTimeline;
	p.kill()._gc = false;
	p._first = p._last = p._recent = null;
	p._sortChildren = false;

	p.add = p.insert = function (child, position, align, stagger) {
		var prevTween, st;
		child._startTime = Number(position || 0) + child._delay;
		if (child._paused) if (this !== child._timeline) {
			//we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).
			child._pauseTime = child._startTime + (this.rawTime() - child._startTime) / child._timeScale;
		}
		if (child.timeline) {
			child.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.
		}
		child.timeline = child._timeline = this;
		if (child._gc) {
			child._enabled(true, true);
		}
		prevTween = this._last;
		if (this._sortChildren) {
			st = child._startTime;
			while (prevTween && prevTween._startTime > st) {
				prevTween = prevTween._prev;
			}
		}
		if (prevTween) {
			child._next = prevTween._next;
			prevTween._next = child;
		} else {
			child._next = this._first;
			this._first = child;
		}
		if (child._next) {
			child._next._prev = child;
		} else {
			this._last = child;
		}
		child._prev = prevTween;
		this._recent = child;
		if (this._timeline) {
			this._uncache(true);
		}
		return this;
	};

	p._remove = function (tween, skipDisable) {
		if (tween.timeline === this) {
			if (!skipDisable) {
				tween._enabled(false, true);
			}

			if (tween._prev) {
				tween._prev._next = tween._next;
			} else if (this._first === tween) {
				this._first = tween._next;
			}
			if (tween._next) {
				tween._next._prev = tween._prev;
			} else if (this._last === tween) {
				this._last = tween._prev;
			}
			tween._next = tween._prev = tween.timeline = null;
			if (tween === this._recent) {
				this._recent = this._last;
			}

			if (this._timeline) {
				this._uncache(true);
			}
		}
		return this;
	};

	p.render = function (time, suppressEvents, force) {
		var tween = this._first,
		    next;
		this._totalTime = this._time = this._rawPrevTime = time;
		while (tween) {
			next = tween._next; //record it here because the value could change after rendering...
			if (tween._active || time >= tween._startTime && !tween._paused && !tween._gc) {
				if (!tween._reversed) {
					tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
				} else {
					tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);
				}
			}
			tween = next;
		}
	};

	p.rawTime = function () {
		if (!_tickerActive) {
			_ticker.wake();
		}
		return this._totalTime;
	};

	/*
  * ----------------------------------------------------------------
  * TweenLite
  * ----------------------------------------------------------------
  */
	var TweenLite = _class("TweenLite", function (target, duration, vars) {
		Animation.call(this, duration, vars);
		this.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)

		if (target == null) {
			throw "Cannot tween a null target.";
		}

		this.target = target = typeof target !== "string" ? target : TweenLite.selector(target) || target;

		var isSelector = target.jquery || target.length && target !== window && target[0] && (target[0] === window || target[0].nodeType && target[0].style && !target.nodeType),
		    overwrite = this.vars.overwrite,
		    i,
		    targ,
		    targets;

		this._overwrite = overwrite = overwrite == null ? _overwriteLookup[TweenLite.defaultOverwrite] : typeof overwrite === "number" ? overwrite >> 0 : _overwriteLookup[overwrite];

		if ((isSelector || target instanceof Array || target.push && _isArray(target)) && typeof target[0] !== "number") {
			this._targets = targets = _slice(target); //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
			this._propLookup = [];
			this._siblings = [];
			for (i = 0; i < targets.length; i++) {
				targ = targets[i];
				if (!targ) {
					targets.splice(i--, 1);
					continue;
				} else if (typeof targ === "string") {
					targ = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings
					if (typeof targ === "string") {
						targets.splice(i + 1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)
					}
					continue;
				} else if (targ.length && targ !== window && targ[0] && (targ[0] === window || targ[0].nodeType && targ[0].style && !targ.nodeType)) {
					//in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.
					targets.splice(i--, 1);
					this._targets = targets = targets.concat(_slice(targ));
					continue;
				}
				this._siblings[i] = _register(targ, this, false);
				if (overwrite === 1) if (this._siblings[i].length > 1) {
					_applyOverwrite(targ, this, null, 1, this._siblings[i]);
				}
			}
		} else {
			this._propLookup = {};
			this._siblings = _register(target, this, false);
			if (overwrite === 1) if (this._siblings.length > 1) {
				_applyOverwrite(target, this, null, 1, this._siblings);
			}
		}
		if (this.vars.immediateRender || duration === 0 && this._delay === 0 && this.vars.immediateRender !== false) {
			this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
			this.render(Math.min(0, -this._delay)); //in case delay is negative
		}
	}, true),
	    _isSelector = function _isSelector(v) {
		return v && v.length && v !== window && v[0] && (v[0] === window || v[0].nodeType && v[0].style && !v.nodeType); //we cannot check "nodeType" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.
	},
	    _autoCSS = function _autoCSS(vars, target) {
		var css = {},
		    p;
		for (p in vars) {
			if (!_reservedProps[p] && (!(p in target) || p === "transform" || p === "x" || p === "y" || p === "width" || p === "height" || p === "className" || p === "border") && (!_plugins[p] || _plugins[p] && _plugins[p]._autoCSS)) {
				//note: <img> elements contain read-only "x" and "y" properties. We should also prioritize editing css width/height rather than the element's properties.
				css[p] = vars[p];
				delete vars[p];
			}
		}
		vars.css = css;
	};

	p = TweenLite.prototype = new Animation();
	p.constructor = TweenLite;
	p.kill()._gc = false;

	//----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------

	p.ratio = 0;
	p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;
	p._notifyPluginsOfEnabled = p._lazy = false;

	TweenLite.version = "1.20.2";
	TweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);
	TweenLite.defaultOverwrite = "auto";
	TweenLite.ticker = _ticker;
	TweenLite.autoSleep = 120;
	TweenLite.lagSmoothing = function (threshold, adjustedLag) {
		_ticker.lagSmoothing(threshold, adjustedLag);
	};

	TweenLite.selector = window.$ || window.jQuery || function (e) {
		var selector = window.$ || window.jQuery;
		if (selector) {
			TweenLite.selector = selector;
			return selector(e);
		}
		return typeof _doc === "undefined" ? e : _doc.querySelectorAll ? _doc.querySelectorAll(e) : _doc.getElementById(e.charAt(0) === "#" ? e.substr(1) : e);
	};

	var _lazyTweens = [],
	    _lazyLookup = {},
	    _numbersExp = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
	    _relExp = /[\+-]=-?[\.\d]/,

	//_nonNumbersExp = /(?:([\-+](?!(\d|=)))|[^\d\-+=e]|(e(?![\-+][\d])))+/ig,
	_setRatio = function _setRatio(v) {
		var pt = this._firstPT,
		    min = 0.000001,
		    val;
		while (pt) {
			val = !pt.blob ? pt.c * v + pt.s : v === 1 && this.end ? this.end : v ? this.join("") : this.start;
			if (pt.m) {
				val = pt.m(val, this._target || pt.t);
			} else if (val < min) if (val > -min && !pt.blob) {
				//prevents issues with converting very small numbers to strings in the browser
				val = 0;
			}
			if (!pt.f) {
				pt.t[pt.p] = val;
			} else if (pt.fp) {
				pt.t[pt.p](pt.fp, val);
			} else {
				pt.t[pt.p](val);
			}
			pt = pt._next;
		}
	},

	//compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, "rgb(0,0,0)" and "rgb(100,50,0)" would become ["rgb(", 0, ",", 50, ",0)"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a "start" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join("")).
	_blobDif = function _blobDif(start, end, filter, pt) {
		var a = [],
		    charIndex = 0,
		    s = "",
		    color = 0,
		    startNums,
		    endNums,
		    num,
		    i,
		    l,
		    nonNumbers,
		    currentNum;
		a.start = start;
		a.end = end;
		start = a[0] = start + ""; //ensure values are strings
		end = a[1] = end + "";
		if (filter) {
			filter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
			start = a[0];
			end = a[1];
		}
		a.length = 0;
		startNums = start.match(_numbersExp) || [];
		endNums = end.match(_numbersExp) || [];
		if (pt) {
			pt._next = null;
			pt.blob = 1;
			a._firstPT = a._applyPT = pt; //apply last in the linked list (which means inserting it first)
		}
		l = endNums.length;
		for (i = 0; i < l; i++) {
			currentNum = endNums[i];
			nonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex) - charIndex);
			s += nonNumbers || !i ? nonNumbers : ","; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
			charIndex += nonNumbers.length;
			if (color) {
				//sense rgba() values and round them.
				color = (color + 1) % 5;
			} else if (nonNumbers.substr(-5) === "rgba(") {
				color = 1;
			}
			if (currentNum === startNums[i] || startNums.length <= i) {
				s += currentNum;
			} else {
				if (s) {
					a.push(s);
					s = "";
				}
				num = parseFloat(startNums[i]);
				a.push(num);
				a._firstPT = { _next: a._firstPT, t: a, p: a.length - 1, s: num, c: (currentNum.charAt(1) === "=" ? parseInt(currentNum.charAt(0) + "1", 10) * parseFloat(currentNum.substr(2)) : parseFloat(currentNum) - num) || 0, f: 0, m: color && color < 4 ? Math.round : 0 };
				//note: we don't set _prev because we'll never need to remove individual PropTweens from this list.
			}
			charIndex += currentNum.length;
		}
		s += end.substr(charIndex);
		if (s) {
			a.push(s);
		}
		a.setRatio = _setRatio;
		if (_relExp.test(end)) {
			//if the end string contains relative values, delete it so that on the final render (in _setRatio()), we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
			a.end = 0;
		}
		return a;
	},

	//note: "funcParam" is only necessary for function-based getters/setters that require an extra parameter like getAttribute("width") and setAttribute("width", value). In this example, funcParam would be "width". Used by AttrPlugin for example.
	_addPropTween = function _addPropTween(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {
		if (typeof end === "function") {
			end = end(index || 0, target);
		}
		var type = _typeof(target[prop]),
		    getterName = type !== "function" ? "" : prop.indexOf("set") || typeof target["get" + prop.substr(3)] !== "function" ? prop : "get" + prop.substr(3),
		    s = start !== "get" ? start : !getterName ? target[prop] : funcParam ? target[getterName](funcParam) : target[getterName](),
		    isRelative = typeof end === "string" && end.charAt(1) === "=",
		    pt = { t: target, p: prop, s: s, f: type === "function", pg: 0, n: overwriteProp || prop, m: !mod ? 0 : typeof mod === "function" ? mod : Math.round, pr: 0, c: isRelative ? parseInt(end.charAt(0) + "1", 10) * parseFloat(end.substr(2)) : parseFloat(end) - s || 0 },
		    blob;

		if (typeof s !== "number" || typeof end !== "number" && !isRelative) {
			if (funcParam || isNaN(s) || !isRelative && isNaN(end) || typeof s === "boolean" || typeof end === "boolean") {
				//a blob (string that has multiple numbers in it)
				pt.fp = funcParam;
				blob = _blobDif(s, isRelative ? parseFloat(pt.s) + pt.c : end, stringFilter || TweenLite.defaultStringFilter, pt);
				pt = { t: blob, p: "setRatio", s: 0, c: 1, f: 2, pg: 0, n: overwriteProp || prop, pr: 0, m: 0 }; //"2" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.
			} else {
				pt.s = parseFloat(s);
				if (!isRelative) {
					pt.c = parseFloat(end) - pt.s || 0;
				}
			}
		}
		if (pt.c) {
			//only add it to the linked list if there's a change.
			if (pt._next = this._firstPT) {
				pt._next._prev = pt;
			}
			this._firstPT = pt;
			return pt;
		}
	},
	    _internals = TweenLite._internals = { isArray: _isArray, isSelector: _isSelector, lazyTweens: _lazyTweens, blobDif: _blobDif },
	    //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.
	_plugins = TweenLite._plugins = {},
	    _tweenLookup = _internals.tweenLookup = {},
	    _tweenLookupNum = 0,
	    _reservedProps = _internals.reservedProps = { ease: 1, delay: 1, overwrite: 1, onComplete: 1, onCompleteParams: 1, onCompleteScope: 1, useFrames: 1, runBackwards: 1, startAt: 1, onUpdate: 1, onUpdateParams: 1, onUpdateScope: 1, onStart: 1, onStartParams: 1, onStartScope: 1, onReverseComplete: 1, onReverseCompleteParams: 1, onReverseCompleteScope: 1, onRepeat: 1, onRepeatParams: 1, onRepeatScope: 1, easeParams: 1, yoyo: 1, immediateRender: 1, repeat: 1, repeatDelay: 1, data: 1, paused: 1, reversed: 1, autoCSS: 1, lazy: 1, onOverwrite: 1, callbackScope: 1, stringFilter: 1, id: 1, yoyoEase: 1 },
	    _overwriteLookup = { none: 0, all: 1, auto: 2, concurrent: 3, allOnStart: 4, preexisting: 5, "true": 1, "false": 0 },
	    _rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),
	    _rootTimeline = Animation._rootTimeline = new SimpleTimeline(),
	    _nextGCFrame = 30,
	    _lazyRender = _internals.lazyRender = function () {
		var i = _lazyTweens.length,
		    tween;
		_lazyLookup = {};
		while (--i > -1) {
			tween = _lazyTweens[i];
			if (tween && tween._lazy !== false) {
				tween.render(tween._lazy[0], tween._lazy[1], true);
				tween._lazy = false;
			}
		}
		_lazyTweens.length = 0;
	};

	_rootTimeline._startTime = _ticker.time;
	_rootFramesTimeline._startTime = _ticker.frame;
	_rootTimeline._active = _rootFramesTimeline._active = true;
	setTimeout(_lazyRender, 1); //on some mobile devices, there isn't a "tick" before code runs which means any lazy renders wouldn't run before the next official "tick".

	Animation._updateRoot = TweenLite.render = function () {
		var i, a, p;
		if (_lazyTweens.length) {
			//if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.
			_lazyRender();
		}
		_rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);
		_rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);
		if (_lazyTweens.length) {
			_lazyRender();
		}
		if (_ticker.frame >= _nextGCFrame) {
			//dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to
			_nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);
			for (p in _tweenLookup) {
				a = _tweenLookup[p].tweens;
				i = a.length;
				while (--i > -1) {
					if (a[i]._gc) {
						a.splice(i, 1);
					}
				}
				if (a.length === 0) {
					delete _tweenLookup[p];
				}
			}
			//if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly
			p = _rootTimeline._first;
			if (!p || p._paused) if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {
				while (p && p._paused) {
					p = p._next;
				}
				if (!p) {
					_ticker.sleep();
				}
			}
		}
	};

	_ticker.addEventListener("tick", Animation._updateRoot);

	var _register = function _register(target, tween, scrub) {
		var id = target._gsTweenID,
		    a,
		    i;
		if (!_tweenLookup[id || (target._gsTweenID = id = "t" + _tweenLookupNum++)]) {
			_tweenLookup[id] = { target: target, tweens: [] };
		}
		if (tween) {
			a = _tweenLookup[id].tweens;
			a[i = a.length] = tween;
			if (scrub) {
				while (--i > -1) {
					if (a[i] === tween) {
						a.splice(i, 1);
					}
				}
			}
		}
		return _tweenLookup[id].tweens;
	},
	    _onOverwrite = function _onOverwrite(overwrittenTween, overwritingTween, target, killedProps) {
		var func = overwrittenTween.vars.onOverwrite,
		    r1,
		    r2;
		if (func) {
			r1 = func(overwrittenTween, overwritingTween, target, killedProps);
		}
		func = TweenLite.onOverwrite;
		if (func) {
			r2 = func(overwrittenTween, overwritingTween, target, killedProps);
		}
		return r1 !== false && r2 !== false;
	},
	    _applyOverwrite = function _applyOverwrite(target, tween, props, mode, siblings) {
		var i, changed, curTween, l;
		if (mode === 1 || mode >= 4) {
			l = siblings.length;
			for (i = 0; i < l; i++) {
				if ((curTween = siblings[i]) !== tween) {
					if (!curTween._gc) {
						if (curTween._kill(null, target, tween)) {
							changed = true;
						}
					}
				} else if (mode === 5) {
					break;
				}
			}
			return changed;
		}
		//NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)
		var startTime = tween._startTime + _tinyNum,
		    overlaps = [],
		    oCount = 0,
		    zeroDur = tween._duration === 0,
		    globalStart;
		i = siblings.length;
		while (--i > -1) {
			if ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {
				//ignore
			} else if (curTween._timeline !== tween._timeline) {
				globalStart = globalStart || _checkOverlap(tween, 0, zeroDur);
				if (_checkOverlap(curTween, globalStart, zeroDur) === 0) {
					overlaps[oCount++] = curTween;
				}
			} else if (curTween._startTime <= startTime) if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)) {
				overlaps[oCount++] = curTween;
			}
		}

		i = oCount;
		while (--i > -1) {
			curTween = overlaps[i];
			if (mode === 2) if (curTween._kill(props, target, tween)) {
				changed = true;
			}
			if (mode !== 2 || !curTween._firstPT && curTween._initted) {
				if (mode !== 2 && !_onOverwrite(curTween, tween)) {
					continue;
				}
				if (curTween._enabled(false, false)) {
					//if all property tweens have been overwritten, kill the tween.
					changed = true;
				}
			}
		}
		return changed;
	},
	    _checkOverlap = function _checkOverlap(tween, reference, zeroDur) {
		var tl = tween._timeline,
		    ts = tl._timeScale,
		    t = tween._startTime;
		while (tl._timeline) {
			t += tl._startTime;
			ts *= tl._timeScale;
			if (tl._paused) {
				return -100;
			}
			tl = tl._timeline;
		}
		t /= ts;
		return t > reference ? t - reference : zeroDur && t === reference || !tween._initted && t - reference < 2 * _tinyNum ? _tinyNum : (t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum ? 0 : t - reference - _tinyNum;
	};

	//---- TweenLite instance methods -----------------------------------------------------------------------------

	p._init = function () {
		var v = this.vars,
		    op = this._overwrittenProps,
		    dur = this._duration,
		    immediate = !!v.immediateRender,
		    ease = v.ease,
		    i,
		    initPlugins,
		    pt,
		    p,
		    startVars,
		    l;
		if (v.startAt) {
			if (this._startAt) {
				this._startAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:"+=100"}, {x:"-=100"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.
				this._startAt.kill();
			}
			startVars = {};
			for (p in v.startAt) {
				//copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);
				startVars[p] = v.startAt[p];
			}
			startVars.overwrite = false;
			startVars.immediateRender = true;
			startVars.lazy = immediate && v.lazy !== false;
			startVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).
			startVars.onUpdate = v.onUpdate;
			startVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this;
			this._startAt = TweenLite.to(this.target, 0, startVars);
			if (immediate) {
				if (this._time > 0) {
					this._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).
				} else if (dur !== 0) {
					return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
				}
			}
		} else if (v.runBackwards && dur !== 0) {
			//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
			if (this._startAt) {
				this._startAt.render(-1, true);
				this._startAt.kill();
				this._startAt = null;
			} else {
				if (this._time !== 0) {
					//in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
					immediate = false;
				}
				pt = {};
				for (p in v) {
					//copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.
					if (!_reservedProps[p] || p === "autoCSS") {
						pt[p] = v[p];
					}
				}
				pt.overwrite = 0;
				pt.data = "isFromStart"; //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
				pt.lazy = immediate && v.lazy !== false;
				pt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
				this._startAt = TweenLite.to(this.target, 0, pt);
				if (!immediate) {
					this._startAt._init(); //ensures that the initial values are recorded
					this._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.
					if (this.vars.immediateRender) {
						this._startAt = null;
					}
				} else if (this._time === 0) {
					return;
				}
			}
		}
		this._ease = ease = !ease ? TweenLite.defaultEase : ease instanceof Ease ? ease : typeof ease === "function" ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;
		if (v.easeParams instanceof Array && ease.config) {
			this._ease = ease.config.apply(ease, v.easeParams);
		}
		this._easeType = this._ease._type;
		this._easePower = this._ease._power;
		this._firstPT = null;

		if (this._targets) {
			l = this._targets.length;
			for (i = 0; i < l; i++) {
				if (this._initProps(this._targets[i], this._propLookup[i] = {}, this._siblings[i], op ? op[i] : null, i)) {
					initPlugins = true;
				}
			}
		} else {
			initPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);
		}

		if (initPlugins) {
			TweenLite._onPluginEvent("_onInitAllProps", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite
		}
		if (op) if (!this._firstPT) if (typeof this.target !== "function") {
			//if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.
			this._enabled(false, false);
		}
		if (v.runBackwards) {
			pt = this._firstPT;
			while (pt) {
				pt.s += pt.c;
				pt.c = -pt.c;
				pt = pt._next;
			}
		}
		this._onUpdate = v.onUpdate;
		this._initted = true;
	};

	p._initProps = function (target, propLookup, siblings, overwrittenProps, index) {
		var p, i, initPlugins, plugin, pt, v;
		if (target == null) {
			return false;
		}

		if (_lazyLookup[target._gsTweenID]) {
			_lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
		}

		if (!this.vars.css) if (target.style) if (target !== window && target.nodeType) if (_plugins.css) if (this.vars.autoCSS !== false) {
			//it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check "nodeType" on the window inside an iframe.
			_autoCSS(this.vars, target);
		}
		for (p in this.vars) {
			v = this.vars[p];
			if (_reservedProps[p]) {
				if (v) if (v instanceof Array || v.push && _isArray(v)) if (v.join("").indexOf("{self}") !== -1) {
					this.vars[p] = v = this._swapSelfInParams(v, this);
				}
			} else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {

				//t - target 		[object]
				//p - property 		[string]
				//s - start			[number]
				//c - change		[number]
				//f - isFunction	[boolean]
				//n - name			[string]
				//pg - isPlugin 	[boolean]
				//pr - priority		[number]
				//m - mod           [function | 0]
				this._firstPT = pt = { _next: this._firstPT, t: plugin, p: "setRatio", s: 0, c: 1, f: 1, n: p, pg: 1, pr: plugin._priority, m: 0 };
				i = plugin._overwriteProps.length;
				while (--i > -1) {
					propLookup[plugin._overwriteProps[i]] = this._firstPT;
				}
				if (plugin._priority || plugin._onInitAllProps) {
					initPlugins = true;
				}
				if (plugin._onDisable || plugin._onEnable) {
					this._notifyPluginsOfEnabled = true;
				}
				if (pt._next) {
					pt._next._prev = pt;
				}
			} else {
				propLookup[p] = _addPropTween.call(this, target, p, "get", v, p, 0, null, this.vars.stringFilter, index);
			}
		}

		if (overwrittenProps) if (this._kill(overwrittenProps, target)) {
			//another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)
			return this._initProps(target, propLookup, siblings, overwrittenProps, index);
		}
		if (this._overwrite > 1) if (this._firstPT) if (siblings.length > 1) if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {
			this._kill(propLookup, target);
			return this._initProps(target, propLookup, siblings, overwrittenProps, index);
		}
		if (this._firstPT) if (this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration) {
			//zero duration tweens don't lazy render by default; everything else does.
			_lazyLookup[target._gsTweenID] = true;
		}
		return initPlugins;
	};

	p.render = function (time, suppressEvents, force) {
		var prevTime = this._time,
		    duration = this._duration,
		    prevRawPrevTime = this._rawPrevTime,
		    isComplete,
		    callback,
		    pt,
		    rawPrevTime;
		if (time >= duration - 0.0000001 && time >= 0) {
			//to work around occasional floating point math artifacts.
			this._totalTime = this._time = duration;
			this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
			if (!this._reversed) {
				isComplete = true;
				callback = "onComplete";
				force = force || this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
			}
			if (duration === 0) if (this._initted || !this.vars.lazy || force) {
				//zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
				if (this._startTime === this._timeline._duration) {
					//if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
					time = 0;
				}
				if (prevRawPrevTime < 0 || time <= 0 && time >= -0.0000001 || prevRawPrevTime === _tinyNum && this.data !== "isPause") if (prevRawPrevTime !== time) {
					//note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
					force = true;
					if (prevRawPrevTime > _tinyNum) {
						callback = "onReverseComplete";
					}
				}
				this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
			}
		} else if (time < 0.0000001) {
			//to work around occasional floating point math artifacts, round super small values to 0.
			this._totalTime = this._time = 0;
			this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
			if (prevTime !== 0 || duration === 0 && prevRawPrevTime > 0) {
				callback = "onReverseComplete";
				isComplete = this._reversed;
			}
			if (time < 0) {
				this._active = false;
				if (duration === 0) if (this._initted || !this.vars.lazy || force) {
					//zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
					if (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === "isPause")) {
						force = true;
					}
					this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
				}
			}
			if (!this._initted || this._startAt && this._startAt.progress()) {
				//if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately. Also, we check progress() because if startAt has already rendered at its end, we should force a render at its beginning. Otherwise, if you put the playhead directly on top of where a fromTo({immediateRender:false}) starts, and then move it backwards, the from() won't revert its values.
				force = true;
			}
		} else {
			this._totalTime = this._time = time;

			if (this._easeType) {
				var r = time / duration,
				    type = this._easeType,
				    pow = this._easePower;
				if (type === 1 || type === 3 && r >= 0.5) {
					r = 1 - r;
				}
				if (type === 3) {
					r *= 2;
				}
				if (pow === 1) {
					r *= r;
				} else if (pow === 2) {
					r *= r * r;
				} else if (pow === 3) {
					r *= r * r * r;
				} else if (pow === 4) {
					r *= r * r * r * r;
				}

				if (type === 1) {
					this.ratio = 1 - r;
				} else if (type === 2) {
					this.ratio = r;
				} else if (time / duration < 0.5) {
					this.ratio = r / 2;
				} else {
					this.ratio = 1 - r / 2;
				}
			} else {
				this.ratio = this._ease.getRatio(time / duration);
			}
		}

		if (this._time === prevTime && !force) {
			return;
		} else if (!this._initted) {
			this._init();
			if (!this._initted || this._gc) {
				//immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
				return;
			} else if (!force && this._firstPT && (this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration)) {
				this._time = this._totalTime = prevTime;
				this._rawPrevTime = prevRawPrevTime;
				_lazyTweens.push(this);
				this._lazy = [time, suppressEvents];
				return;
			}
			//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
			if (this._time && !isComplete) {
				this.ratio = this._ease.getRatio(this._time / duration);
			} else if (isComplete && this._ease._calcEnd) {
				this.ratio = this._ease.getRatio(this._time === 0 ? 0 : 1);
			}
		}
		if (this._lazy !== false) {
			//in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.
			this._lazy = false;
		}
		if (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {
			this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
		}
		if (prevTime === 0) {
			if (this._startAt) {
				if (time >= 0) {
					this._startAt.render(time, suppressEvents, force);
				} else if (!callback) {
					callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
				}
			}
			if (this.vars.onStart) if (this._time !== 0 || duration === 0) if (!suppressEvents) {
				this._callback("onStart");
			}
		}
		pt = this._firstPT;
		while (pt) {
			if (pt.f) {
				pt.t[pt.p](pt.c * this.ratio + pt.s);
			} else {
				pt.t[pt.p] = pt.c * this.ratio + pt.s;
			}
			pt = pt._next;
		}

		if (this._onUpdate) {
			if (time < 0) if (this._startAt && time !== -0.0001) {
				//if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
				this._startAt.render(time, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
			}
			if (!suppressEvents) if (this._time !== prevTime || isComplete || force) {
				this._callback("onUpdate");
			}
		}
		if (callback) if (!this._gc || force) {
			//check _gc because there's a chance that kill() could be called in an onUpdate
			if (time < 0 && this._startAt && !this._onUpdate && time !== -0.0001) {
				//-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.
				this._startAt.render(time, suppressEvents, force);
			}
			if (isComplete) {
				if (this._timeline.autoRemoveChildren) {
					this._enabled(false, false);
				}
				this._active = false;
			}
			if (!suppressEvents && this.vars[callback]) {
				this._callback(callback);
			}
			if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) {
				//the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
				this._rawPrevTime = 0;
			}
		}
	};

	p._kill = function (vars, target, overwritingTween) {
		if (vars === "all") {
			vars = null;
		}
		if (vars == null) if (target == null || target === this.target) {
			this._lazy = false;
			return this._enabled(false, false);
		}
		target = typeof target !== "string" ? target || this._targets || this.target : TweenLite.selector(target) || target;
		var simultaneousOverwrite = overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline,
		    i,
		    overwrittenProps,
		    p,
		    pt,
		    propLookup,
		    changed,
		    killProps,
		    record,
		    killed;
		if ((_isArray(target) || _isSelector(target)) && typeof target[0] !== "number") {
			i = target.length;
			while (--i > -1) {
				if (this._kill(vars, target[i], overwritingTween)) {
					changed = true;
				}
			}
		} else {
			if (this._targets) {
				i = this._targets.length;
				while (--i > -1) {
					if (target === this._targets[i]) {
						propLookup = this._propLookup[i] || {};
						this._overwrittenProps = this._overwrittenProps || [];
						overwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : "all";
						break;
					}
				}
			} else if (target !== this.target) {
				return false;
			} else {
				propLookup = this._propLookup;
				overwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : "all";
			}

			if (propLookup) {
				killProps = vars || propLookup;
				record = vars !== overwrittenProps && overwrittenProps !== "all" && vars !== propLookup && ((typeof vars === "undefined" ? "undefined" : _typeof(vars)) !== "object" || !vars._tempKill); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)
				if (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {
					for (p in killProps) {
						if (propLookup[p]) {
							if (!killed) {
								killed = [];
							}
							killed.push(p);
						}
					}
					if ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) {
						//if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).
						return false;
					}
				}

				for (p in killProps) {
					if (pt = propLookup[p]) {
						if (simultaneousOverwrite) {
							//if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.
							if (pt.f) {
								pt.t[pt.p](pt.s);
							} else {
								pt.t[pt.p] = pt.s;
							}
							changed = true;
						}
						if (pt.pg && pt.t._kill(killProps)) {
							changed = true; //some plugins need to be notified so they can perform cleanup tasks first
						}
						if (!pt.pg || pt.t._overwriteProps.length === 0) {
							if (pt._prev) {
								pt._prev._next = pt._next;
							} else if (pt === this._firstPT) {
								this._firstPT = pt._next;
							}
							if (pt._next) {
								pt._next._prev = pt._prev;
							}
							pt._next = pt._prev = null;
						}
						delete propLookup[p];
					}
					if (record) {
						overwrittenProps[p] = 1;
					}
				}
				if (!this._firstPT && this._initted) {
					//if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
					this._enabled(false, false);
				}
			}
		}
		return changed;
	};

	p.invalidate = function () {
		if (this._notifyPluginsOfEnabled) {
			TweenLite._onPluginEvent("_onDisable", this);
		}
		this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;
		this._notifyPluginsOfEnabled = this._active = this._lazy = false;
		this._propLookup = this._targets ? {} : [];
		Animation.prototype.invalidate.call(this);
		if (this.vars.immediateRender) {
			this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
			this.render(Math.min(0, -this._delay)); //in case delay is negative.
		}
		return this;
	};

	p._enabled = function (enabled, ignoreTimeline) {
		if (!_tickerActive) {
			_ticker.wake();
		}
		if (enabled && this._gc) {
			var targets = this._targets,
			    i;
			if (targets) {
				i = targets.length;
				while (--i > -1) {
					this._siblings[i] = _register(targets[i], this, true);
				}
			} else {
				this._siblings = _register(this.target, this, true);
			}
		}
		Animation.prototype._enabled.call(this, enabled, ignoreTimeline);
		if (this._notifyPluginsOfEnabled) if (this._firstPT) {
			return TweenLite._onPluginEvent(enabled ? "_onEnable" : "_onDisable", this);
		}
		return false;
	};

	//----TweenLite static methods -----------------------------------------------------

	TweenLite.to = function (target, duration, vars) {
		return new TweenLite(target, duration, vars);
	};

	TweenLite.from = function (target, duration, vars) {
		vars.runBackwards = true;
		vars.immediateRender = vars.immediateRender != false;
		return new TweenLite(target, duration, vars);
	};

	TweenLite.fromTo = function (target, duration, fromVars, toVars) {
		toVars.startAt = fromVars;
		toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;
		return new TweenLite(target, duration, toVars);
	};

	TweenLite.delayedCall = function (delay, callback, params, scope, useFrames) {
		return new TweenLite(callback, 0, { delay: delay, onComplete: callback, onCompleteParams: params, callbackScope: scope, onReverseComplete: callback, onReverseCompleteParams: params, immediateRender: false, lazy: false, useFrames: useFrames, overwrite: 0 });
	};

	TweenLite.set = function (target, vars) {
		return new TweenLite(target, 0, vars);
	};

	TweenLite.getTweensOf = function (target, onlyActive) {
		if (target == null) {
			return [];
		}
		target = typeof target !== "string" ? target : TweenLite.selector(target) || target;
		var i, a, j, t;
		if ((_isArray(target) || _isSelector(target)) && typeof target[0] !== "number") {
			i = target.length;
			a = [];
			while (--i > -1) {
				a = a.concat(TweenLite.getTweensOf(target[i], onlyActive));
			}
			i = a.length;
			//now get rid of any duplicates (tweens of arrays of objects could cause duplicates)
			while (--i > -1) {
				t = a[i];
				j = i;
				while (--j > -1) {
					if (t === a[j]) {
						a.splice(i, 1);
					}
				}
			}
		} else if (target._gsTweenID) {
			a = _register(target).concat();
			i = a.length;
			while (--i > -1) {
				if (a[i]._gc || onlyActive && !a[i].isActive()) {
					a.splice(i, 1);
				}
			}
		}
		return a || [];
	};

	TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function (target, onlyActive, vars) {
		if ((typeof onlyActive === "undefined" ? "undefined" : _typeof(onlyActive)) === "object") {
			vars = onlyActive; //for backwards compatibility (before "onlyActive" parameter was inserted)
			onlyActive = false;
		}
		var a = TweenLite.getTweensOf(target, onlyActive),
		    i = a.length;
		while (--i > -1) {
			a[i]._kill(vars, target);
		}
	};

	/*
  * ----------------------------------------------------------------
  * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)
  * ----------------------------------------------------------------
  */
	var TweenPlugin = _class("plugins.TweenPlugin", function (props, priority) {
		this._overwriteProps = (props || "").split(",");
		this._propName = this._overwriteProps[0];
		this._priority = priority || 0;
		this._super = TweenPlugin.prototype;
	}, true);

	p = TweenPlugin.prototype;
	TweenPlugin.version = "1.19.0";
	TweenPlugin.API = 2;
	p._firstPT = null;
	p._addTween = _addPropTween;
	p.setRatio = _setRatio;

	p._kill = function (lookup) {
		var a = this._overwriteProps,
		    pt = this._firstPT,
		    i;
		if (lookup[this._propName] != null) {
			this._overwriteProps = [];
		} else {
			i = a.length;
			while (--i > -1) {
				if (lookup[a[i]] != null) {
					a.splice(i, 1);
				}
			}
		}
		while (pt) {
			if (lookup[pt.n] != null) {
				if (pt._next) {
					pt._next._prev = pt._prev;
				}
				if (pt._prev) {
					pt._prev._next = pt._next;
					pt._prev = null;
				} else if (this._firstPT === pt) {
					this._firstPT = pt._next;
				}
			}
			pt = pt._next;
		}
		return false;
	};

	p._mod = p._roundProps = function (lookup) {
		var pt = this._firstPT,
		    val;
		while (pt) {
			val = lookup[this._propName] || pt.n != null && lookup[pt.n.split(this._propName + "_").join("")];
			if (val && typeof val === "function") {
				//some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.
				if (pt.f === 2) {
					pt.t._applyPT.m = val;
				} else {
					pt.m = val;
				}
			}
			pt = pt._next;
		}
	};

	TweenLite._onPluginEvent = function (type, tween) {
		var pt = tween._firstPT,
		    changed,
		    pt2,
		    first,
		    last,
		    next;
		if (type === "_onInitAllProps") {
			//sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.
			while (pt) {
				next = pt._next;
				pt2 = first;
				while (pt2 && pt2.pr > pt.pr) {
					pt2 = pt2._next;
				}
				if (pt._prev = pt2 ? pt2._prev : last) {
					pt._prev._next = pt;
				} else {
					first = pt;
				}
				if (pt._next = pt2) {
					pt2._prev = pt;
				} else {
					last = pt;
				}
				pt = next;
			}
			pt = tween._firstPT = first;
		}
		while (pt) {
			if (pt.pg) if (typeof pt.t[type] === "function") if (pt.t[type]()) {
				changed = true;
			}
			pt = pt._next;
		}
		return changed;
	};

	TweenPlugin.activate = function (plugins) {
		var i = plugins.length;
		while (--i > -1) {
			if (plugins[i].API === TweenPlugin.API) {
				_plugins[new plugins[i]()._propName] = plugins[i];
			}
		}
		return true;
	};

	//provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.
	_gsDefine.plugin = function (config) {
		if (!config || !config.propName || !config.init || !config.API) {
			throw "illegal plugin definition.";
		}
		var propName = config.propName,
		    priority = config.priority || 0,
		    overwriteProps = config.overwriteProps,
		    map = { init: "_onInitTween", set: "setRatio", kill: "_kill", round: "_mod", mod: "_mod", initAll: "_onInitAllProps" },
		    Plugin = _class("plugins." + propName.charAt(0).toUpperCase() + propName.substr(1) + "Plugin", function () {
			TweenPlugin.call(this, propName, priority);
			this._overwriteProps = overwriteProps || [];
		}, config.global === true),
		    p = Plugin.prototype = new TweenPlugin(propName),
		    prop;
		p.constructor = Plugin;
		Plugin.API = config.API;
		for (prop in map) {
			if (typeof config[prop] === "function") {
				p[map[prop]] = config[prop];
			}
		}
		Plugin.version = config.version;
		TweenPlugin.activate([Plugin]);
		return Plugin;
	};

	//now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.
	a = window._gsQueue;
	if (a) {
		for (i = 0; i < a.length; i++) {
			a[i]();
		}
		for (p in _defLookup) {
			if (!_defLookup[p].func) {
				window.console.log("GSAP encountered missing dependency: " + p);
			}
		}
	}

	_tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated
})(typeof module !== "undefined" && module.exports && typeof global !== "undefined" ? global : undefined || window, "TweenMax");
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),

/***/ 257:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Vue = __webpack_require__(3);
var $ = __webpack_require__(2);
var Foundation = __webpack_require__(14);
var iswebview = __webpack_require__(27);

// Template
var template = __webpack_require__(370);
var store = __webpack_require__(32);

var Promocodes = void 0;

Promocodes = Vue.component('promocodes', {
  template: template,

  props: {
    promocodes: {
      type: Object,
      required: true
    }
  },

  data: function data() {
    return {
      formOpen: true,
      sharedState: store,
      submitted: false,
      promoValue: '',
      promoName: '',
      promoCode: '',
      ratesCodes: ["AAA", "GOVT", "SR CIT", "promotionalCode"],
      noCode: ["", "AAA", "GOVT", "SR CIT"],
      ids: ["corporateAccountId", "travelAgencyId"]
    };
  },

  mounted: function mounted() {
    this.$validator.extend('duplicate', {
      getMessage: function getMessage() {
        return 'May only enter one of this type.';
      },
      validate: function (value) {
        var result = true;
        this.promocodes.codes.forEach(function (item) {
          if (item.value == value) {
            result = false;
            return;
          }
        });
        return result;
      }.bind(this)
    });
    this.$validator.extend('ids', {
      getMessage: function getMessage() {
        return 'May only apply one Corporate Account ID or Travel Agency ID.';
      },
      validate: function (value) {
        var result = true;
        var accountIds = this.ids;
        if (accountIds.indexOf(value) !== -1) {
          this.promocodes.codes.forEach(function (item) {
            if (accountIds.indexOf(item.value) !== -1) {
              result = false;
              return;
            }
          });
        }
        return result;
      }.bind(this)
    });
    this.$validator.extend('ratebased', {
      getMessage: function getMessage() {
        return 'May only apply one rate based code.';
      },
      validate: function (value) {
        var result = true;
        var rateBasedCodes = this.ratesCodes;
        if (rateBasedCodes.indexOf(value) !== -1) {
          this.promocodes.codes.forEach(function (item) {
            if (rateBasedCodes.indexOf(item.value) !== -1) {
              result = false;
              return;
            }
          });
        }
        return result;
      }.bind(this)
    });
  },

  destroyed: function destroyed() {
    this.$validator.remove('duplicate');
    this.$validator.remove('ids');
    this.$validator.remove('ratebased');
  },

  methods: {
    promoClose: function promoClose() {
      this.sharedState.promocodes.isOpen = false;
      // For closing modal on search results
      this.$emit('close');

      var cities = [];
      var states = [];
      var hotels = [];
      var hotelsbrands = [];
      var hiLowContent = 0;

      if (store.propertiesitems.length > 0) {
        store.propertiesitems.forEach(function (element) {
          hotels.push(element.engineid);

          var brandsindex = hotelsbrands.indexOf(element.brand.record.code);
          if (brandsindex === -1) {
            hotelsbrands.push(element.brand.record.code);
          }

          var citiesindex = cities.indexOf(element.city);
          if (citiesindex === -1) {
            cities.push(element.city);
          }

          if (!$.isEmptyObject(element.state)) {
            var statesindex = states.indexOf(element.state);
            if (statesindex === -1) {
              states.push(element.state);
            }
          }
        });
      }

      var hotelsString = hotels.join('|');
      var hotelsbrandsString = hotelsbrands.join('|');
      var citiesString = cities.join('|');
      var statesString = states.join('|');

      if (store.travelGuideitems.length > 0) {
        if (store.travelGuideitems.attraction.length > 0) {
          hiLowContent = '1';
        } else {
          hiLowContent = '0';
        }
      } else {
        hiLowContent = '0';
      }

      var promocode = [];
      var promocodetype = [];
      if (store.promocodes.codes.length > 0) {
        store.promocodes.codes.forEach(function (promo) {
          promocode.push(promo.code);
          promocodetype.push(promo.name);
        });
      }

      var promoNames = promocode.join('|');
      var promoTypes = promocodetype.join('|');

      var searchLoc = '';
      if (store.searchType == 'state' || store.searchType == 'city' || store.searchType == 'country') {
        searchLoc = 'Location';
      } else if (store.searchType == 'attraction') {
        searchLoc = 'Attraction';
      } else if (store.searchType == 'airport') {
        searchLoc = 'Airport';
      }

      var searchResults = 0;
      if (store.brand == true) {
        if (store.brandpropertiesitems.length < 1 && store.othercarlsonproperties.length < 1 && store.propertiesitems.length < 1) {
          searchResults = 0;
        }
      } else {
        if (store.propertiesitems.length < 1) {
          searchResults = 0;
        }
      }

      var webViewString;
      if (iswebview(navigator.userAgent)) {
        webViewString = 'Yes|' + this.getMobileOperatingSystem();
      } else {
        webViewString = 'No';
      }

      var facilitator = '';
      if (this.getQueryParam("facilitator") || this.getQueryParam("facilitatorId") || this.getQueryParam("faciliatatorID") || this.getQueryParam("facilitatorid") || this.getQueryParam("facilitatorID")) {
        facilitator = this.getQueryParam("facilitator") || this.getQueryParam("facilitatorId") || this.getQueryParam("faciliatatorID") || this.getQueryParam("facilitatorid") || this.getQueryParam("facilitatorID");
      }
      this.facilitator = facilitator;

      window.utag.view({
        'page.pageInfo.pageName': store.pageInfo.pageName,
        'page.pageInfo.pagePath': store.pageInfo.pagePath,
        'page.pageInfo.destinationURL': store.pageInfo.destinationURL,
        'page.pageInfo.referringURL': store.pageInfo.referringURL,
        'page.pageInfo.language': store.pageInfo.language,
        'page.pageInfo.geoRegion': store.pageInfo.geoRegion,
        'page.pageInfo.systemEnv': store.pageInfo.systemEnv,
        'page.pageInfo.effectiveDate': store.pageInfo.effectiveDate,
        'page.pageInfo.primaryCategory': 'Search',
        'page.pageInfo.dayOfWeek': store.pageInfo.dayOfWeek,
        'page.pageInfo.timeOfDay': store.pageInfo.timeOfDay,
        'page.pageInfo.timeZone': store.pageInfo.timezone,
        'page.pageInfo.brand': store.brandInfo.slug,
        'page.pageInfo.facilitatorID': store.facilitator,
        'page.pageInfo.currencyCode': store.pageInfo.currencyCode,
        'page.pageInfo.bvCode': store.pageInfo.bvCode,
        'page.pageInfo.isWebview': webViewString,
        'user.userInfo.userID': store.userInfo.userId,
        'user.userInfo.loyaltyTier': store.userInfo.userLoyaltyTier,
        'search.term': store.keywordParam,
        'search.searchCity': citiesString,
        'search.searchState': statesString,
        'search.searchCountry': store.searchCountry,
        'search.rateCodeSearchType': promoNames,
        'search.rateCodeSearchID': promoTypes,
        'search.searchDimension': searchLoc,
        'search.searchHotelCode': hotelsString,
        'search.searchHotelBrand': hotelsbrandsString,
        'search.contentType': hiLowContent,
        'search.noSearchResults': searchResults
      });
    },

    promoUpdatedClose: function promoUpdatedClose() {
      this.sharedState.promocodes.isOpen = false;
      // For closing modal on search results
      this.$emit('close');

      var cities = [];
      var states = [];
      var hotels = [];
      var hotelsbrands = [];
      var hiLowContent = 0;

      if (store.propertiesitems.length > 0) {
        store.propertiesitems.forEach(function (element) {
          hotels.push(element.engineid);

          var brandsindex = hotelsbrands.indexOf(element.brand.record.code);
          if (brandsindex === -1) {
            hotelsbrands.push(element.brand.record.code);
          }

          var citiesindex = cities.indexOf(element.city);
          if (citiesindex === -1) {
            cities.push(element.city);
          }

          if (!$.isEmptyObject(element.state)) {
            var statesindex = states.indexOf(element.state);
            if (statesindex === -1) {
              states.push(element.state);
            }
          }
        });
      }

      var hotelsString = hotels.join('|');
      var hotelsbrandsString = hotelsbrands.join('|');
      var citiesString = cities.join('|');
      var statesString = states.join('|');

      if (store.travelGuideitems.length > 0) {
        if (store.travelGuideitems.attraction.length > 0) {
          hiLowContent = '1';
        } else {
          hiLowContent = '0';
        }
      } else {
        hiLowContent = '0';
      }

      var promocode = [];
      var promocodetype = [];
      if (store.promocodes.codes.length > 0) {
        store.promocodes.codes.forEach(function (promo) {
          promocode.push(promo.code);
          promocodetype.push(promo.name);
        });
      }

      var promoNames = promocode.join('|');
      var promoTypes = promocodetype.join('|');

      var searchLoc = '';
      if (store.searchType == 'state' || store.searchType == 'city' || store.searchType == 'country') {
        searchLoc = 'Location';
      } else if (store.searchType == 'attraction') {
        searchLoc = 'Attraction';
      } else if (store.searchType == 'airport') {
        searchLoc = 'Airport';
      }

      var searchResults = 0;
      if (store.brand == true) {
        if (store.brandpropertiesitems.length < 1 && store.othercarlsonproperties.length < 1 && store.propertiesitems.length < 1) {
          searchResults = 0;
        }
      } else {
        if (store.propertiesitems.length < 1) {
          searchResults = 0;
        }
      }

      var webViewString;
      if (iswebview(navigator.userAgent)) {
        webViewString = 'Yes|' + this.getMobileOperatingSystem();
      } else {
        webViewString = 'No';
      }

      var facilitator = '';
      if (this.getQueryParam("facilitator") || this.getQueryParam("facilitatorId") || this.getQueryParam("faciliatatorID") || this.getQueryParam("facilitatorid") || this.getQueryParam("facilitatorID")) {
        facilitator = this.getQueryParam("facilitator") || this.getQueryParam("facilitatorId") || this.getQueryParam("faciliatatorID") || this.getQueryParam("facilitatorid") || this.getQueryParam("facilitatorID");
      }
      this.facilitator = facilitator;

      window.utag.view({
        'page.pageInfo.pageName': store.pageInfo.pageName,
        'page.pageInfo.pagePath': store.pageInfo.pagePath,
        'page.pageInfo.destinationURL': store.pageInfo.destinationURL,
        'page.pageInfo.referringURL': store.pageInfo.referringURL,
        'page.pageInfo.language': store.pageInfo.language,
        'page.pageInfo.geoRegion': store.pageInfo.geoRegion,
        'page.pageInfo.systemEnv': store.pageInfo.systemEnv,
        'page.pageInfo.effectiveDate': store.pageInfo.effectiveDate,
        'page.pageInfo.primaryCategory': 'Search',
        'page.pageInfo.dayOfWeek': store.pageInfo.dayOfWeek,
        'page.pageInfo.timeOfDay': store.pageInfo.timeOfDay,
        'page.pageInfo.timeZone': store.pageInfo.timezone,
        'page.pageInfo.brand': store.brandInfo.slug,
        'page.pageInfo.facilitatorID': store.facilitator,
        'page.pageInfo.currencyCode': store.pageInfo.currencyCode,
        'page.pageInfo.bvCode': store.pageInfo.bvCode,
        'page.pageInfo.isWebview': webViewString,
        'user.userInfo.userID': store.userInfo.userId,
        'user.userInfo.loyaltyTier': store.userInfo.userLoyaltyTier,
        'search.term': store.keywordParam,
        'search.searchCity': citiesString,
        'search.searchState': statesString,
        'search.searchCountry': store.searchCountry,
        'search.rateCodeSearchType': promoNames,
        'search.rateCodeSearchID': promoTypes,
        'search.searchDimension': searchLoc,
        'search.searchHotelCode': hotelsString,
        'search.searchHotelBrand': hotelsbrandsString,
        'search.contentType': hiLowContent,
        'search.noSearchResults': searchResults,
        'eventInfo.eventName': 'Successful Search Refinement'
      });
    },

    getQueryParam: function getQueryParam(variableArg) {
      var variable = variableArg.toLowerCase();
      var query = window.location.search.substring(1);
      var vars = query.split("&");
      for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split("=");
        if (pair[0].toLowerCase() == variable) {
          return pair[1];
        }
      }
      return false;
    },

    removePromo: function removePromo(index) {
      var code = this.promocodes.codes[index];

      if (code.value == 'corporateAccountId') {
        this.promocodes.corporateAccountId = '';
      } else if (code.value == 'travelAgencyId') {
        this.promocodes.travelAgencyId = '';
      } else if (code.value == 'ecertCode') {
        this.promocodes.ecertCode = '';
      } else {
        this.promocodes.code = '';
      }

      this.promocodes.codes.splice(index, 1);
      this.errors.clear();

      if (this.sharedState.promocodes.code !== '' || !$.isEmptyObject(this.sharedState.promocodes.codes)) {
        $('.search-code').text('Special Rate Applied');
      } else {
        $('.search-code').text('ADD SPECIAL RATE / DISCOUNT CODE');
      }
      this.sharedState.promocodes.isUpdated = true;
    },

    updateName: function updateName(e) {
      this.promoName = e.options[e.selectedIndex].text;
    },


    submit: function submit(e) {
      this.submitted = true;
      var code = {
        value: this.promoValue,
        code: this.promoCode.toUpperCase(),
        name: this.promoName
      };

      // If it's a type that doesn't require a code, add the value as the code
      if (this.noCode.indexOf(this.promoValue) != -1) {
        code.code = this.promoValue;
      }

      // Validate form
      this.$validator.validateAll({
        promoValue: this.promoValue,
        promoCode: this.promoCode
      });

      // Remove requirement for promocode if it's a type that doesn't require a code
      if (this.errors.has('promoCode') && this.noCode.indexOf(this.promoValue) != -1) {
        this.errors.remove('promoCode');
      }

      // Submit if there are no errors
      if (this.errors.any()) {
        e.preventDefault();
      } else {
        if (code.value == 'corporateAccountId') {
          this.promocodes.corporateAccountId = code.code;
        } else if (code.value == 'travelAgencyId') {
          this.promocodes.travelAgencyId = code.code;
        } else if (code.value == 'ecertCode') {
          this.promocodes.ecertCode = code.code;
        } else {
          this.promocodes.code = code.code;
        }

        this.submitted = false;
        this.promocodes.codes.push(code);
        this.promoValue = '';
        this.promoCode = '';
        this.errors.clear();
        this.formOpen = false;

        this.sharedState.promocodes.isOpen = false;
        if (this.sharedState.promocodes.code !== '' || !$.isEmptyObject(this.sharedState.promocodes.codes)) {
          $('.search-code').text('Special Rate Applied');
        } else {
          $('.search-code').text('ADD SPECIAL RATE / DISCOUNT CODE');
        }
        this.sharedState.promocodes.isUpdated = true;
      }
    },

    getMobileOperatingSystem: function getMobileOperatingSystem() {
      var userAgent = navigator.userAgent || navigator.vendor || window.opera;
      if (/windows phone|IEMobile/i.test(userAgent)) {
        return 'Windows';
      } else if (/Android/i.test(userAgent)) {
        return 'Android';
      } else if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
        return 'iOS';
      } else if (/Opera Mini/i.test(userAgent)) {
        return 'Opera';
      } else if (/BlackBerry/i.test(userAgent)) {
        return 'BlackBerry';
      } else {
        return 'Unknown';
      }
    }
  }

});

module.exports = Promocodes;

/***/ }),

/***/ 258:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Vue = __webpack_require__(3);
var $ = __webpack_require__(2);

// Template
var template = __webpack_require__(377);
var store = __webpack_require__(32);

var Price = void 0;

Price = Vue.component('price', {
  template: template,

  data: function data() {
    return store;
  },

  mounted: function mounted() {},

  methods: {
    setPrice: function setPrice(price) {
      this.displayIn = price;
      this.close();
    },
    close: function close() {
      this.showPrice = false;
      $('body').removeClass('no-scroll');
    }
  }
});

module.exports = Price;

/***/ }),

/***/ 3:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Vue.js v2.4.4
 * (c) 2014-2017 Evan You
 * Released under the MIT License.
 */
(function (global, factory) {
  ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : global.Vue = factory();
})(undefined, function () {
  'use strict';

  /*  */

  // these helpers produces better vm code in JS engines due to their
  // explicitness and function inlining

  function isUndef(v) {
    return v === undefined || v === null;
  }

  function isDef(v) {
    return v !== undefined && v !== null;
  }

  function isTrue(v) {
    return v === true;
  }

  function isFalse(v) {
    return v === false;
  }

  /**
   * Check if value is primitive
   */
  function isPrimitive(value) {
    return typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean';
  }

  /**
   * Quick object check - this is primarily used to tell
   * Objects from primitive values when we know the value
   * is a JSON-compliant type.
   */
  function isObject(obj) {
    return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
  }

  var _toString = Object.prototype.toString;

  /**
   * Strict object type check. Only returns true
   * for plain JavaScript objects.
   */
  function isPlainObject(obj) {
    return _toString.call(obj) === '[object Object]';
  }

  function isRegExp(v) {
    return _toString.call(v) === '[object RegExp]';
  }

  /**
   * Check if val is a valid array index.
   */
  function isValidArrayIndex(val) {
    var n = parseFloat(val);
    return n >= 0 && Math.floor(n) === n && isFinite(val);
  }

  /**
   * Convert a value to a string that is actually rendered.
   */
  function toString(val) {
    return val == null ? '' : (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' ? JSON.stringify(val, null, 2) : String(val);
  }

  /**
   * Convert a input value to a number for persistence.
   * If the conversion fails, return original string.
   */
  function toNumber(val) {
    var n = parseFloat(val);
    return isNaN(n) ? val : n;
  }

  /**
   * Make a map and return a function for checking if a key
   * is in that map.
   */
  function makeMap(str, expectsLowerCase) {
    var map = Object.create(null);
    var list = str.split(',');
    for (var i = 0; i < list.length; i++) {
      map[list[i]] = true;
    }
    return expectsLowerCase ? function (val) {
      return map[val.toLowerCase()];
    } : function (val) {
      return map[val];
    };
  }

  /**
   * Check if a tag is a built-in tag.
   */
  var isBuiltInTag = makeMap('slot,component', true);

  /**
   * Check if a attribute is a reserved attribute.
   */
  var isReservedAttribute = makeMap('key,ref,slot,is');

  /**
   * Remove an item from an array
   */
  function remove(arr, item) {
    if (arr.length) {
      var index = arr.indexOf(item);
      if (index > -1) {
        return arr.splice(index, 1);
      }
    }
  }

  /**
   * Check whether the object has the property.
   */
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function hasOwn(obj, key) {
    return hasOwnProperty.call(obj, key);
  }

  /**
   * Create a cached version of a pure function.
   */
  function cached(fn) {
    var cache = Object.create(null);
    return function cachedFn(str) {
      var hit = cache[str];
      return hit || (cache[str] = fn(str));
    };
  }

  /**
   * Camelize a hyphen-delimited string.
   */
  var camelizeRE = /-(\w)/g;
  var camelize = cached(function (str) {
    return str.replace(camelizeRE, function (_, c) {
      return c ? c.toUpperCase() : '';
    });
  });

  /**
   * Capitalize a string.
   */
  var capitalize = cached(function (str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  });

  /**
   * Hyphenate a camelCase string.
   */
  var hyphenateRE = /\B([A-Z])/g;
  var hyphenate = cached(function (str) {
    return str.replace(hyphenateRE, '-$1').toLowerCase();
  });

  /**
   * Simple bind, faster than native
   */
  function bind(fn, ctx) {
    function boundFn(a) {
      var l = arguments.length;
      return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
    }
    // record original fn length
    boundFn._length = fn.length;
    return boundFn;
  }

  /**
   * Convert an Array-like object to a real Array.
   */
  function toArray(list, start) {
    start = start || 0;
    var i = list.length - start;
    var ret = new Array(i);
    while (i--) {
      ret[i] = list[i + start];
    }
    return ret;
  }

  /**
   * Mix properties into target object.
   */
  function extend(to, _from) {
    for (var key in _from) {
      to[key] = _from[key];
    }
    return to;
  }

  /**
   * Merge an Array of Objects into a single Object.
   */
  function toObject(arr) {
    var res = {};
    for (var i = 0; i < arr.length; i++) {
      if (arr[i]) {
        extend(res, arr[i]);
      }
    }
    return res;
  }

  /**
   * Perform no operation.
   * Stubbing args to make Flow happy without leaving useless transpiled code
   * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
   */
  function noop(a, b, c) {}

  /**
   * Always return false.
   */
  var no = function no(a, b, c) {
    return false;
  };

  /**
   * Return same value
   */
  var identity = function identity(_) {
    return _;
  };

  /**
   * Generate a static keys string from compiler modules.
   */
  function genStaticKeys(modules) {
    return modules.reduce(function (keys, m) {
      return keys.concat(m.staticKeys || []);
    }, []).join(',');
  }

  /**
   * Check if two values are loosely equal - that is,
   * if they are plain objects, do they have the same shape?
   */
  function looseEqual(a, b) {
    if (a === b) {
      return true;
    }
    var isObjectA = isObject(a);
    var isObjectB = isObject(b);
    if (isObjectA && isObjectB) {
      try {
        var isArrayA = Array.isArray(a);
        var isArrayB = Array.isArray(b);
        if (isArrayA && isArrayB) {
          return a.length === b.length && a.every(function (e, i) {
            return looseEqual(e, b[i]);
          });
        } else if (!isArrayA && !isArrayB) {
          var keysA = Object.keys(a);
          var keysB = Object.keys(b);
          return keysA.length === keysB.length && keysA.every(function (key) {
            return looseEqual(a[key], b[key]);
          });
        } else {
          /* istanbul ignore next */
          return false;
        }
      } catch (e) {
        /* istanbul ignore next */
        return false;
      }
    } else if (!isObjectA && !isObjectB) {
      return String(a) === String(b);
    } else {
      return false;
    }
  }

  function looseIndexOf(arr, val) {
    for (var i = 0; i < arr.length; i++) {
      if (looseEqual(arr[i], val)) {
        return i;
      }
    }
    return -1;
  }

  /**
   * Ensure a function is called only once.
   */
  function once(fn) {
    var called = false;
    return function () {
      if (!called) {
        called = true;
        fn.apply(this, arguments);
      }
    };
  }

  var SSR_ATTR = 'data-server-rendered';

  var ASSET_TYPES = ['component', 'directive', 'filter'];

  var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated'];

  /*  */

  var config = {
    /**
     * Option merge strategies (used in core/util/options)
     */
    optionMergeStrategies: Object.create(null),

    /**
     * Whether to suppress warnings.
     */
    silent: false,

    /**
     * Show production mode tip message on boot?
     */
    productionTip: "development" !== 'production',

    /**
     * Whether to enable devtools
     */
    devtools: "development" !== 'production',

    /**
     * Whether to record perf
     */
    performance: false,

    /**
     * Error handler for watcher errors
     */
    errorHandler: null,

    /**
     * Warn handler for watcher warns
     */
    warnHandler: null,

    /**
     * Ignore certain custom elements
     */
    ignoredElements: [],

    /**
     * Custom user key aliases for v-on
     */
    keyCodes: Object.create(null),

    /**
     * Check if a tag is reserved so that it cannot be registered as a
     * component. This is platform-dependent and may be overwritten.
     */
    isReservedTag: no,

    /**
     * Check if an attribute is reserved so that it cannot be used as a component
     * prop. This is platform-dependent and may be overwritten.
     */
    isReservedAttr: no,

    /**
     * Check if a tag is an unknown element.
     * Platform-dependent.
     */
    isUnknownElement: no,

    /**
     * Get the namespace of an element
     */
    getTagNamespace: noop,

    /**
     * Parse the real tag name for the specific platform.
     */
    parsePlatformTagName: identity,

    /**
     * Check if an attribute must be bound using property, e.g. value
     * Platform-dependent.
     */
    mustUseProp: no,

    /**
     * Exposed for legacy reasons
     */
    _lifecycleHooks: LIFECYCLE_HOOKS
  };

  /*  */

  var emptyObject = Object.freeze({});

  /**
   * Check if a string starts with $ or _
   */
  function isReserved(str) {
    var c = (str + '').charCodeAt(0);
    return c === 0x24 || c === 0x5F;
  }

  /**
   * Define a property.
   */
  function def(obj, key, val, enumerable) {
    Object.defineProperty(obj, key, {
      value: val,
      enumerable: !!enumerable,
      writable: true,
      configurable: true
    });
  }

  /**
   * Parse simple path.
   */
  var bailRE = /[^\w.$]/;
  function parsePath(path) {
    if (bailRE.test(path)) {
      return;
    }
    var segments = path.split('.');
    return function (obj) {
      for (var i = 0; i < segments.length; i++) {
        if (!obj) {
          return;
        }
        obj = obj[segments[i]];
      }
      return obj;
    };
  }

  /*  */

  var warn = noop;
  var tip = noop;
  var formatComponentName = null; // work around flow check

  {
    var hasConsole = typeof console !== 'undefined';
    var classifyRE = /(?:^|[-_])(\w)/g;
    var classify = function classify(str) {
      return str.replace(classifyRE, function (c) {
        return c.toUpperCase();
      }).replace(/[-_]/g, '');
    };

    warn = function warn(msg, vm) {
      var trace = vm ? generateComponentTrace(vm) : '';

      if (config.warnHandler) {
        config.warnHandler.call(null, msg, vm, trace);
      } else if (hasConsole && !config.silent) {
        console.error("[Vue warn]: " + msg + trace);
      }
    };

    tip = function tip(msg, vm) {
      if (hasConsole && !config.silent) {
        console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
      }
    };

    formatComponentName = function formatComponentName(vm, includeFile) {
      if (vm.$root === vm) {
        return '<Root>';
      }
      var name = typeof vm === 'string' ? vm : typeof vm === 'function' && vm.options ? vm.options.name : vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;

      var file = vm._isVue && vm.$options.__file;
      if (!name && file) {
        var match = file.match(/([^/\\]+)\.vue$/);
        name = match && match[1];
      }

      return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
    };

    var repeat = function repeat(str, n) {
      var res = '';
      while (n) {
        if (n % 2 === 1) {
          res += str;
        }
        if (n > 1) {
          str += str;
        }
        n >>= 1;
      }
      return res;
    };

    var generateComponentTrace = function generateComponentTrace(vm) {
      if (vm._isVue && vm.$parent) {
        var tree = [];
        var currentRecursiveSequence = 0;
        while (vm) {
          if (tree.length > 0) {
            var last = tree[tree.length - 1];
            if (last.constructor === vm.constructor) {
              currentRecursiveSequence++;
              vm = vm.$parent;
              continue;
            } else if (currentRecursiveSequence > 0) {
              tree[tree.length - 1] = [last, currentRecursiveSequence];
              currentRecursiveSequence = 0;
            }
          }
          tree.push(vm);
          vm = vm.$parent;
        }
        return '\n\nfound in\n\n' + tree.map(function (vm, i) {
          return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
        }).join('\n');
      } else {
        return "\n\n(found in " + formatComponentName(vm) + ")";
      }
    };
  }

  /*  */

  function handleError(err, vm, info) {
    if (config.errorHandler) {
      config.errorHandler.call(null, err, vm, info);
    } else {
      {
        warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
      }
      /* istanbul ignore else */
      if (inBrowser && typeof console !== 'undefined') {
        console.error(err);
      } else {
        throw err;
      }
    }
  }

  /*  */
  /* globals MutationObserver */

  // can we use __proto__?
  var hasProto = '__proto__' in {};

  // Browser environment sniffing
  var inBrowser = typeof window !== 'undefined';
  var UA = inBrowser && window.navigator.userAgent.toLowerCase();
  var isIE = UA && /msie|trident/.test(UA);
  var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
  var isEdge = UA && UA.indexOf('edge/') > 0;
  var isAndroid = UA && UA.indexOf('android') > 0;
  var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
  var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

  // Firefox has a "watch" function on Object.prototype...
  var nativeWatch = {}.watch;

  var supportsPassive = false;
  if (inBrowser) {
    try {
      var opts = {};
      Object.defineProperty(opts, 'passive', {
        get: function get() {
          /* istanbul ignore next */
          supportsPassive = true;
        }
      }); // https://github.com/facebook/flow/issues/285
      window.addEventListener('test-passive', null, opts);
    } catch (e) {}
  }

  // this needs to be lazy-evaled because vue may be required before
  // vue-server-renderer can set VUE_ENV
  var _isServer;
  var isServerRendering = function isServerRendering() {
    if (_isServer === undefined) {
      /* istanbul ignore if */
      if (!inBrowser && typeof global !== 'undefined') {
        // detect presence of vue-server-renderer and avoid
        // Webpack shimming the process
        _isServer = global['process'].env.VUE_ENV === 'server';
      } else {
        _isServer = false;
      }
    }
    return _isServer;
  };

  // detect devtools
  var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

  /* istanbul ignore next */
  function isNative(Ctor) {
    return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
  }

  var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

  /**
   * Defer a task to execute it asynchronously.
   */
  var nextTick = function () {
    var callbacks = [];
    var pending = false;
    var timerFunc;

    function nextTickHandler() {
      pending = false;
      var copies = callbacks.slice(0);
      callbacks.length = 0;
      for (var i = 0; i < copies.length; i++) {
        copies[i]();
      }
    }

    // the nextTick behavior leverages the microtask queue, which can be accessed
    // via either native Promise.then or MutationObserver.
    // MutationObserver has wider support, however it is seriously bugged in
    // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
    // completely stops working after triggering a few times... so, if native
    // Promise is available, we will use it:
    /* istanbul ignore if */
    if (typeof Promise !== 'undefined' && isNative(Promise)) {
      var p = Promise.resolve();
      var logError = function logError(err) {
        console.error(err);
      };
      timerFunc = function timerFunc() {
        p.then(nextTickHandler).catch(logError);
        // in problematic UIWebViews, Promise.then doesn't completely break, but
        // it can get stuck in a weird state where callbacks are pushed into the
        // microtask queue but the queue isn't being flushed, until the browser
        // needs to do some other work, e.g. handle a timer. Therefore we can
        // "force" the microtask queue to be flushed by adding an empty timer.
        if (isIOS) {
          setTimeout(noop);
        }
      };
    } else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) ||
    // PhantomJS and iOS 7.x
    MutationObserver.toString() === '[object MutationObserverConstructor]')) {
      // use MutationObserver where native Promise is not available,
      // e.g. PhantomJS, iOS7, Android 4.4
      var counter = 1;
      var observer = new MutationObserver(nextTickHandler);
      var textNode = document.createTextNode(String(counter));
      observer.observe(textNode, {
        characterData: true
      });
      timerFunc = function timerFunc() {
        counter = (counter + 1) % 2;
        textNode.data = String(counter);
      };
    } else {
      // fallback to setTimeout
      /* istanbul ignore next */
      timerFunc = function timerFunc() {
        setTimeout(nextTickHandler, 0);
      };
    }

    return function queueNextTick(cb, ctx) {
      var _resolve;
      callbacks.push(function () {
        if (cb) {
          try {
            cb.call(ctx);
          } catch (e) {
            handleError(e, ctx, 'nextTick');
          }
        } else if (_resolve) {
          _resolve(ctx);
        }
      });
      if (!pending) {
        pending = true;
        timerFunc();
      }
      if (!cb && typeof Promise !== 'undefined') {
        return new Promise(function (resolve, reject) {
          _resolve = resolve;
        });
      }
    };
  }();

  var _Set;
  /* istanbul ignore if */
  if (typeof Set !== 'undefined' && isNative(Set)) {
    // use native Set when available.
    _Set = Set;
  } else {
    // a non-standard Set polyfill that only works with primitive keys.
    _Set = function () {
      function Set() {
        this.set = Object.create(null);
      }
      Set.prototype.has = function has(key) {
        return this.set[key] === true;
      };
      Set.prototype.add = function add(key) {
        this.set[key] = true;
      };
      Set.prototype.clear = function clear() {
        this.set = Object.create(null);
      };

      return Set;
    }();
  }

  /*  */

  var uid = 0;

  /**
   * A dep is an observable that can have multiple
   * directives subscribing to it.
   */
  var Dep = function Dep() {
    this.id = uid++;
    this.subs = [];
  };

  Dep.prototype.addSub = function addSub(sub) {
    this.subs.push(sub);
  };

  Dep.prototype.removeSub = function removeSub(sub) {
    remove(this.subs, sub);
  };

  Dep.prototype.depend = function depend() {
    if (Dep.target) {
      Dep.target.addDep(this);
    }
  };

  Dep.prototype.notify = function notify() {
    // stabilize the subscriber list first
    var subs = this.subs.slice();
    for (var i = 0, l = subs.length; i < l; i++) {
      subs[i].update();
    }
  };

  // the current target watcher being evaluated.
  // this is globally unique because there could be only one
  // watcher being evaluated at any time.
  Dep.target = null;
  var targetStack = [];

  function pushTarget(_target) {
    if (Dep.target) {
      targetStack.push(Dep.target);
    }
    Dep.target = _target;
  }

  function popTarget() {
    Dep.target = targetStack.pop();
  }

  /*
   * not type checking this file because flow doesn't play well with
   * dynamically accessing methods on Array prototype
   */

  var arrayProto = Array.prototype;
  var arrayMethods = Object.create(arrayProto);['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {
    // cache original method
    var original = arrayProto[method];
    def(arrayMethods, method, function mutator() {
      var args = [],
          len = arguments.length;
      while (len--) {
        args[len] = arguments[len];
      }var result = original.apply(this, args);
      var ob = this.__ob__;
      var inserted;
      switch (method) {
        case 'push':
        case 'unshift':
          inserted = args;
          break;
        case 'splice':
          inserted = args.slice(2);
          break;
      }
      if (inserted) {
        ob.observeArray(inserted);
      }
      // notify change
      ob.dep.notify();
      return result;
    });
  });

  /*  */

  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

  /**
   * By default, when a reactive property is set, the new value is
   * also converted to become reactive. However when passing down props,
   * we don't want to force conversion because the value may be a nested value
   * under a frozen data structure. Converting it would defeat the optimization.
   */
  var observerState = {
    shouldConvert: true
  };

  /**
   * Observer class that are attached to each observed
   * object. Once attached, the observer converts target
   * object's property keys into getter/setters that
   * collect dependencies and dispatches updates.
   */
  var Observer = function Observer(value) {
    this.value = value;
    this.dep = new Dep();
    this.vmCount = 0;
    def(value, '__ob__', this);
    if (Array.isArray(value)) {
      var augment = hasProto ? protoAugment : copyAugment;
      augment(value, arrayMethods, arrayKeys);
      this.observeArray(value);
    } else {
      this.walk(value);
    }
  };

  /**
   * Walk through each property and convert them into
   * getter/setters. This method should only be called when
   * value type is Object.
   */
  Observer.prototype.walk = function walk(obj) {
    var keys = Object.keys(obj);
    for (var i = 0; i < keys.length; i++) {
      defineReactive$$1(obj, keys[i], obj[keys[i]]);
    }
  };

  /**
   * Observe a list of Array items.
   */
  Observer.prototype.observeArray = function observeArray(items) {
    for (var i = 0, l = items.length; i < l; i++) {
      observe(items[i]);
    }
  };

  // helpers

  /**
   * Augment an target Object or Array by intercepting
   * the prototype chain using __proto__
   */
  function protoAugment(target, src, keys) {
    /* eslint-disable no-proto */
    target.__proto__ = src;
    /* eslint-enable no-proto */
  }

  /**
   * Augment an target Object or Array by defining
   * hidden properties.
   */
  /* istanbul ignore next */
  function copyAugment(target, src, keys) {
    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      def(target, key, src[key]);
    }
  }

  /**
   * Attempt to create an observer instance for a value,
   * returns the new observer if successfully observed,
   * or the existing observer if the value already has one.
   */
  function observe(value, asRootData) {
    if (!isObject(value)) {
      return;
    }
    var ob;
    if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
      ob = value.__ob__;
    } else if (observerState.shouldConvert && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
      ob = new Observer(value);
    }
    if (asRootData && ob) {
      ob.vmCount++;
    }
    return ob;
  }

  /**
   * Define a reactive property on an Object.
   */
  function defineReactive$$1(obj, key, val, customSetter, shallow) {
    var dep = new Dep();

    var property = Object.getOwnPropertyDescriptor(obj, key);
    if (property && property.configurable === false) {
      return;
    }

    // cater for pre-defined getter/setters
    var getter = property && property.get;
    var setter = property && property.set;

    var childOb = !shallow && observe(val);
    Object.defineProperty(obj, key, {
      enumerable: true,
      configurable: true,
      get: function reactiveGetter() {
        var value = getter ? getter.call(obj) : val;
        if (Dep.target) {
          dep.depend();
          if (childOb) {
            childOb.dep.depend();
            if (Array.isArray(value)) {
              dependArray(value);
            }
          }
        }
        return value;
      },
      set: function reactiveSetter(newVal) {
        var value = getter ? getter.call(obj) : val;
        /* eslint-disable no-self-compare */
        if (newVal === value || newVal !== newVal && value !== value) {
          return;
        }
        /* eslint-enable no-self-compare */
        if ("development" !== 'production' && customSetter) {
          customSetter();
        }
        if (setter) {
          setter.call(obj, newVal);
        } else {
          val = newVal;
        }
        childOb = !shallow && observe(newVal);
        dep.notify();
      }
    });
  }

  /**
   * Set a property on an object. Adds the new property and
   * triggers change notification if the property doesn't
   * already exist.
   */
  function set(target, key, val) {
    if (Array.isArray(target) && isValidArrayIndex(key)) {
      target.length = Math.max(target.length, key);
      target.splice(key, 1, val);
      return val;
    }
    if (hasOwn(target, key)) {
      target[key] = val;
      return val;
    }
    var ob = target.__ob__;
    if (target._isVue || ob && ob.vmCount) {
      "development" !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
      return val;
    }
    if (!ob) {
      target[key] = val;
      return val;
    }
    defineReactive$$1(ob.value, key, val);
    ob.dep.notify();
    return val;
  }

  /**
   * Delete a property and trigger change if necessary.
   */
  function del(target, key) {
    if (Array.isArray(target) && isValidArrayIndex(key)) {
      target.splice(key, 1);
      return;
    }
    var ob = target.__ob__;
    if (target._isVue || ob && ob.vmCount) {
      "development" !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
      return;
    }
    if (!hasOwn(target, key)) {
      return;
    }
    delete target[key];
    if (!ob) {
      return;
    }
    ob.dep.notify();
  }

  /**
   * Collect dependencies on array elements when the array is touched, since
   * we cannot intercept array element access like property getters.
   */
  function dependArray(value) {
    for (var e = void 0, i = 0, l = value.length; i < l; i++) {
      e = value[i];
      e && e.__ob__ && e.__ob__.dep.depend();
      if (Array.isArray(e)) {
        dependArray(e);
      }
    }
  }

  /*  */

  /**
   * Option overwriting strategies are functions that handle
   * how to merge a parent option value and a child option
   * value into the final value.
   */
  var strats = config.optionMergeStrategies;

  /**
   * Options with restrictions
   */
  {
    strats.el = strats.propsData = function (parent, child, vm, key) {
      if (!vm) {
        warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
      }
      return defaultStrat(parent, child);
    };
  }

  /**
   * Helper that recursively merges two data objects together.
   */
  function mergeData(to, from) {
    if (!from) {
      return to;
    }
    var key, toVal, fromVal;
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      key = keys[i];
      toVal = to[key];
      fromVal = from[key];
      if (!hasOwn(to, key)) {
        set(to, key, fromVal);
      } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
        mergeData(toVal, fromVal);
      }
    }
    return to;
  }

  /**
   * Data
   */
  function mergeDataOrFn(parentVal, childVal, vm) {
    if (!vm) {
      // in a Vue.extend merge, both should be functions
      if (!childVal) {
        return parentVal;
      }
      if (!parentVal) {
        return childVal;
      }
      // when parentVal & childVal are both present,
      // we need to return a function that returns the
      // merged result of both functions... no need to
      // check if parentVal is a function here because
      // it has to be a function to pass previous merges.
      return function mergedDataFn() {
        return mergeData(typeof childVal === 'function' ? childVal.call(this) : childVal, typeof parentVal === 'function' ? parentVal.call(this) : parentVal);
      };
    } else if (parentVal || childVal) {
      return function mergedInstanceDataFn() {
        // instance merge
        var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;
        var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : parentVal;
        if (instanceData) {
          return mergeData(instanceData, defaultData);
        } else {
          return defaultData;
        }
      };
    }
  }

  strats.data = function (parentVal, childVal, vm) {
    if (!vm) {
      if (childVal && typeof childVal !== 'function') {
        "development" !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);

        return parentVal;
      }
      return mergeDataOrFn.call(this, parentVal, childVal);
    }

    return mergeDataOrFn(parentVal, childVal, vm);
  };

  /**
   * Hooks and props are merged as arrays.
   */
  function mergeHook(parentVal, childVal) {
    return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  }

  LIFECYCLE_HOOKS.forEach(function (hook) {
    strats[hook] = mergeHook;
  });

  /**
   * Assets
   *
   * When a vm is present (instance creation), we need to do
   * a three-way merge between constructor options, instance
   * options and parent options.
   */
  function mergeAssets(parentVal, childVal) {
    var res = Object.create(parentVal || null);
    return childVal ? extend(res, childVal) : res;
  }

  ASSET_TYPES.forEach(function (type) {
    strats[type + 's'] = mergeAssets;
  });

  /**
   * Watchers.
   *
   * Watchers hashes should not overwrite one
   * another, so we merge them as arrays.
   */
  strats.watch = function (parentVal, childVal) {
    // work around Firefox's Object.prototype.watch...
    if (parentVal === nativeWatch) {
      parentVal = undefined;
    }
    if (childVal === nativeWatch) {
      childVal = undefined;
    }
    /* istanbul ignore if */
    if (!childVal) {
      return Object.create(parentVal || null);
    }
    if (!parentVal) {
      return childVal;
    }
    var ret = {};
    extend(ret, parentVal);
    for (var key in childVal) {
      var parent = ret[key];
      var child = childVal[key];
      if (parent && !Array.isArray(parent)) {
        parent = [parent];
      }
      ret[key] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
    }
    return ret;
  };

  /**
   * Other object hashes.
   */
  strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal) {
    if (!parentVal) {
      return childVal;
    }
    var ret = Object.create(null);
    extend(ret, parentVal);
    if (childVal) {
      extend(ret, childVal);
    }
    return ret;
  };
  strats.provide = mergeDataOrFn;

  /**
   * Default strategy.
   */
  var defaultStrat = function defaultStrat(parentVal, childVal) {
    return childVal === undefined ? parentVal : childVal;
  };

  /**
   * Validate component names
   */
  function checkComponents(options) {
    for (var key in options.components) {
      var lower = key.toLowerCase();
      if (isBuiltInTag(lower) || config.isReservedTag(lower)) {
        warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);
      }
    }
  }

  /**
   * Ensure all props option syntax are normalized into the
   * Object-based format.
   */
  function normalizeProps(options) {
    var props = options.props;
    if (!props) {
      return;
    }
    var res = {};
    var i, val, name;
    if (Array.isArray(props)) {
      i = props.length;
      while (i--) {
        val = props[i];
        if (typeof val === 'string') {
          name = camelize(val);
          res[name] = { type: null };
        } else {
          warn('props must be strings when using array syntax.');
        }
      }
    } else if (isPlainObject(props)) {
      for (var key in props) {
        val = props[key];
        name = camelize(key);
        res[name] = isPlainObject(val) ? val : { type: val };
      }
    }
    options.props = res;
  }

  /**
   * Normalize all injections into Object-based format
   */
  function normalizeInject(options) {
    var inject = options.inject;
    if (Array.isArray(inject)) {
      var normalized = options.inject = {};
      for (var i = 0; i < inject.length; i++) {
        normalized[inject[i]] = inject[i];
      }
    }
  }

  /**
   * Normalize raw function directives into object format.
   */
  function normalizeDirectives(options) {
    var dirs = options.directives;
    if (dirs) {
      for (var key in dirs) {
        var def = dirs[key];
        if (typeof def === 'function') {
          dirs[key] = { bind: def, update: def };
        }
      }
    }
  }

  /**
   * Merge two option objects into a new one.
   * Core utility used in both instantiation and inheritance.
   */
  function mergeOptions(parent, child, vm) {
    {
      checkComponents(child);
    }

    if (typeof child === 'function') {
      child = child.options;
    }

    normalizeProps(child);
    normalizeInject(child);
    normalizeDirectives(child);
    var extendsFrom = child.extends;
    if (extendsFrom) {
      parent = mergeOptions(parent, extendsFrom, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
    var options = {};
    var key;
    for (key in parent) {
      mergeField(key);
    }
    for (key in child) {
      if (!hasOwn(parent, key)) {
        mergeField(key);
      }
    }
    function mergeField(key) {
      var strat = strats[key] || defaultStrat;
      options[key] = strat(parent[key], child[key], vm, key);
    }
    return options;
  }

  /**
   * Resolve an asset.
   * This function is used because child instances need access
   * to assets defined in its ancestor chain.
   */
  function resolveAsset(options, type, id, warnMissing) {
    /* istanbul ignore if */
    if (typeof id !== 'string') {
      return;
    }
    var assets = options[type];
    // check local registration variations first
    if (hasOwn(assets, id)) {
      return assets[id];
    }
    var camelizedId = camelize(id);
    if (hasOwn(assets, camelizedId)) {
      return assets[camelizedId];
    }
    var PascalCaseId = capitalize(camelizedId);
    if (hasOwn(assets, PascalCaseId)) {
      return assets[PascalCaseId];
    }
    // fallback to prototype chain
    var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
    if ("development" !== 'production' && warnMissing && !res) {
      warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
    }
    return res;
  }

  /*  */

  function validateProp(key, propOptions, propsData, vm) {
    var prop = propOptions[key];
    var absent = !hasOwn(propsData, key);
    var value = propsData[key];
    // handle boolean props
    if (isType(Boolean, prop.type)) {
      if (absent && !hasOwn(prop, 'default')) {
        value = false;
      } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
        value = true;
      }
    }
    // check default value
    if (value === undefined) {
      value = getPropDefaultValue(vm, prop, key);
      // since the default value is a fresh copy,
      // make sure to observe it.
      var prevShouldConvert = observerState.shouldConvert;
      observerState.shouldConvert = true;
      observe(value);
      observerState.shouldConvert = prevShouldConvert;
    }
    {
      assertProp(prop, key, value, vm, absent);
    }
    return value;
  }

  /**
   * Get the default value of a prop.
   */
  function getPropDefaultValue(vm, prop, key) {
    // no default, return undefined
    if (!hasOwn(prop, 'default')) {
      return undefined;
    }
    var def = prop.default;
    // warn against non-factory defaults for Object & Array
    if ("development" !== 'production' && isObject(def)) {
      warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
    }
    // the raw prop value was also undefined from previous render,
    // return previous default value to avoid unnecessary watcher trigger
    if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
      return vm._props[key];
    }
    // call factory function for non-Function types
    // a value is Function if its prototype is function even across different execution context
    return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
  }

  /**
   * Assert whether a prop is valid.
   */
  function assertProp(prop, name, value, vm, absent) {
    if (prop.required && absent) {
      warn('Missing required prop: "' + name + '"', vm);
      return;
    }
    if (value == null && !prop.required) {
      return;
    }
    var type = prop.type;
    var valid = !type || type === true;
    var expectedTypes = [];
    if (type) {
      if (!Array.isArray(type)) {
        type = [type];
      }
      for (var i = 0; i < type.length && !valid; i++) {
        var assertedType = assertType(value, type[i]);
        expectedTypes.push(assertedType.expectedType || '');
        valid = assertedType.valid;
      }
    }
    if (!valid) {
      warn('Invalid prop: type check failed for prop "' + name + '".' + ' Expected ' + expectedTypes.map(capitalize).join(', ') + ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.', vm);
      return;
    }
    var validator = prop.validator;
    if (validator) {
      if (!validator(value)) {
        warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
      }
    }
  }

  var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

  function assertType(value, type) {
    var valid;
    var expectedType = getType(type);
    if (simpleCheckRE.test(expectedType)) {
      var t = typeof value === 'undefined' ? 'undefined' : _typeof(value);
      valid = t === expectedType.toLowerCase();
      // for primitive wrapper objects
      if (!valid && t === 'object') {
        valid = value instanceof type;
      }
    } else if (expectedType === 'Object') {
      valid = isPlainObject(value);
    } else if (expectedType === 'Array') {
      valid = Array.isArray(value);
    } else {
      valid = value instanceof type;
    }
    return {
      valid: valid,
      expectedType: expectedType
    };
  }

  /**
   * Use function string name to check built-in types,
   * because a simple equality check will fail when running
   * across different vms / iframes.
   */
  function getType(fn) {
    var match = fn && fn.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : '';
  }

  function isType(type, fn) {
    if (!Array.isArray(fn)) {
      return getType(fn) === getType(type);
    }
    for (var i = 0, len = fn.length; i < len; i++) {
      if (getType(fn[i]) === getType(type)) {
        return true;
      }
    }
    /* istanbul ignore next */
    return false;
  }

  /*  */

  var mark;
  var measure;

  {
    var perf = inBrowser && window.performance;
    /* istanbul ignore if */
    if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
      mark = function mark(tag) {
        return perf.mark(tag);
      };
      measure = function measure(name, startTag, endTag) {
        perf.measure(name, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
        perf.clearMeasures(name);
      };
    }
  }

  /* not type checking this file because flow doesn't play well with Proxy */

  var initProxy;

  {
    var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
    );

    var warnNonPresent = function warnNonPresent(target, key) {
      warn("Property or method \"" + key + "\" is not defined on the instance but " + "referenced during render. Make sure to declare reactive data " + "properties in the data option.", target);
    };

    var hasProxy = typeof Proxy !== 'undefined' && Proxy.toString().match(/native code/);

    if (hasProxy) {
      var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');
      config.keyCodes = new Proxy(config.keyCodes, {
        set: function set(target, key, value) {
          if (isBuiltInModifier(key)) {
            warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
            return false;
          } else {
            target[key] = value;
            return true;
          }
        }
      });
    }

    var hasHandler = {
      has: function has(target, key) {
        var has = key in target;
        var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
        if (!has && !isAllowed) {
          warnNonPresent(target, key);
        }
        return has || !isAllowed;
      }
    };

    var getHandler = {
      get: function get(target, key) {
        if (typeof key === 'string' && !(key in target)) {
          warnNonPresent(target, key);
        }
        return target[key];
      }
    };

    initProxy = function initProxy(vm) {
      if (hasProxy) {
        // determine which proxy handler to use
        var options = vm.$options;
        var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
        vm._renderProxy = new Proxy(vm, handlers);
      } else {
        vm._renderProxy = vm;
      }
    };
  }

  /*  */

  var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
    this.tag = tag;
    this.data = data;
    this.children = children;
    this.text = text;
    this.elm = elm;
    this.ns = undefined;
    this.context = context;
    this.functionalContext = undefined;
    this.key = data && data.key;
    this.componentOptions = componentOptions;
    this.componentInstance = undefined;
    this.parent = undefined;
    this.raw = false;
    this.isStatic = false;
    this.isRootInsert = true;
    this.isComment = false;
    this.isCloned = false;
    this.isOnce = false;
    this.asyncFactory = asyncFactory;
    this.asyncMeta = undefined;
    this.isAsyncPlaceholder = false;
  };

  var prototypeAccessors = { child: {} };

  // DEPRECATED: alias for componentInstance for backwards compat.
  /* istanbul ignore next */
  prototypeAccessors.child.get = function () {
    return this.componentInstance;
  };

  Object.defineProperties(VNode.prototype, prototypeAccessors);

  var createEmptyVNode = function createEmptyVNode(text) {
    if (text === void 0) text = '';

    var node = new VNode();
    node.text = text;
    node.isComment = true;
    return node;
  };

  function createTextVNode(val) {
    return new VNode(undefined, undefined, undefined, String(val));
  }

  // optimized shallow clone
  // used for static nodes and slot nodes because they may be reused across
  // multiple renders, cloning them avoids errors when DOM manipulations rely
  // on their elm reference.
  function cloneVNode(vnode, deep) {
    var cloned = new VNode(vnode.tag, vnode.data, vnode.children, vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
    cloned.ns = vnode.ns;
    cloned.isStatic = vnode.isStatic;
    cloned.key = vnode.key;
    cloned.isComment = vnode.isComment;
    cloned.isCloned = true;
    if (deep && vnode.children) {
      cloned.children = cloneVNodes(vnode.children);
    }
    return cloned;
  }

  function cloneVNodes(vnodes, deep) {
    var len = vnodes.length;
    var res = new Array(len);
    for (var i = 0; i < len; i++) {
      res[i] = cloneVNode(vnodes[i], deep);
    }
    return res;
  }

  /*  */

  var normalizeEvent = cached(function (name) {
    var passive = name.charAt(0) === '&';
    name = passive ? name.slice(1) : name;
    var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
    name = once$$1 ? name.slice(1) : name;
    var capture = name.charAt(0) === '!';
    name = capture ? name.slice(1) : name;
    var plain = !(passive || once$$1 || capture);
    return {
      name: name,
      plain: plain,
      once: once$$1,
      capture: capture,
      passive: passive
    };
  });

  function createFnInvoker(fns) {
    function invoker() {
      var arguments$1 = arguments;

      var fns = invoker.fns;
      if (Array.isArray(fns)) {
        var cloned = fns.slice();
        for (var i = 0; i < cloned.length; i++) {
          cloned[i].apply(null, arguments$1);
        }
      } else {
        // return handler return value for single handlers
        return fns.apply(null, arguments);
      }
    }
    invoker.fns = fns;
    return invoker;
  }

  // #6552
  function prioritizePlainEvents(a, b) {
    return a.plain ? -1 : b.plain ? 1 : 0;
  }

  function updateListeners(on, oldOn, add, remove$$1, vm) {
    var name, cur, old, event;
    var toAdd = [];
    var hasModifier = false;
    for (name in on) {
      cur = on[name];
      old = oldOn[name];
      event = normalizeEvent(name);
      if (!event.plain) {
        hasModifier = true;
      }
      if (isUndef(cur)) {
        "development" !== 'production' && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
      } else if (isUndef(old)) {
        if (isUndef(cur.fns)) {
          cur = on[name] = createFnInvoker(cur);
        }
        event.handler = cur;
        toAdd.push(event);
      } else if (cur !== old) {
        old.fns = cur;
        on[name] = old;
      }
    }
    if (toAdd.length) {
      if (hasModifier) {
        toAdd.sort(prioritizePlainEvents);
      }
      for (var i = 0; i < toAdd.length; i++) {
        var event$1 = toAdd[i];
        add(event$1.name, event$1.handler, event$1.once, event$1.capture, event$1.passive);
      }
    }
    for (name in oldOn) {
      if (isUndef(on[name])) {
        event = normalizeEvent(name);
        remove$$1(event.name, oldOn[name], event.capture);
      }
    }
  }

  /*  */

  function mergeVNodeHook(def, hookKey, hook) {
    var invoker;
    var oldHook = def[hookKey];

    function wrappedHook() {
      hook.apply(this, arguments);
      // important: remove merged hook to ensure it's called only once
      // and prevent memory leak
      remove(invoker.fns, wrappedHook);
    }

    if (isUndef(oldHook)) {
      // no existing hook
      invoker = createFnInvoker([wrappedHook]);
    } else {
      /* istanbul ignore if */
      if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
        // already a merged invoker
        invoker = oldHook;
        invoker.fns.push(wrappedHook);
      } else {
        // existing plain hook
        invoker = createFnInvoker([oldHook, wrappedHook]);
      }
    }

    invoker.merged = true;
    def[hookKey] = invoker;
  }

  /*  */

  function extractPropsFromVNodeData(data, Ctor, tag) {
    // we are only extracting raw values here.
    // validation and default values are handled in the child
    // component itself.
    var propOptions = Ctor.options.props;
    if (isUndef(propOptions)) {
      return;
    }
    var res = {};
    var attrs = data.attrs;
    var props = data.props;
    if (isDef(attrs) || isDef(props)) {
      for (var key in propOptions) {
        var altKey = hyphenate(key);
        {
          var keyInLowerCase = key.toLowerCase();
          if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
            tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
          }
        }
        checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
      }
    }
    return res;
  }

  function checkProp(res, hash, key, altKey, preserve) {
    if (isDef(hash)) {
      if (hasOwn(hash, key)) {
        res[key] = hash[key];
        if (!preserve) {
          delete hash[key];
        }
        return true;
      } else if (hasOwn(hash, altKey)) {
        res[key] = hash[altKey];
        if (!preserve) {
          delete hash[altKey];
        }
        return true;
      }
    }
    return false;
  }

  /*  */

  // The template compiler attempts to minimize the need for normalization by
  // statically analyzing the template at compile time.
  //
  // For plain HTML markup, normalization can be completely skipped because the
  // generated render function is guaranteed to return Array<VNode>. There are
  // two cases where extra normalization is needed:

  // 1. When the children contains components - because a functional component
  // may return an Array instead of a single root. In this case, just a simple
  // normalization is needed - if any child is an Array, we flatten the whole
  // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
  // because functional components already normalize their own children.
  function simpleNormalizeChildren(children) {
    for (var i = 0; i < children.length; i++) {
      if (Array.isArray(children[i])) {
        return Array.prototype.concat.apply([], children);
      }
    }
    return children;
  }

  // 2. When the children contains constructs that always generated nested Arrays,
  // e.g. <template>, <slot>, v-for, or when the children is provided by user
  // with hand-written render functions / JSX. In such cases a full normalization
  // is needed to cater to all possible types of children values.
  function normalizeChildren(children) {
    return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
  }

  function isTextNode(node) {
    return isDef(node) && isDef(node.text) && isFalse(node.isComment);
  }

  function normalizeArrayChildren(children, nestedIndex) {
    var res = [];
    var i, c, last;
    for (i = 0; i < children.length; i++) {
      c = children[i];
      if (isUndef(c) || typeof c === 'boolean') {
        continue;
      }
      last = res[res.length - 1];
      //  nested
      if (Array.isArray(c)) {
        res.push.apply(res, normalizeArrayChildren(c, (nestedIndex || '') + "_" + i));
      } else if (isPrimitive(c)) {
        if (isTextNode(last)) {
          // merge adjacent text nodes
          // this is necessary for SSR hydration because text nodes are
          // essentially merged when rendered to HTML strings
          last.text += String(c);
        } else if (c !== '') {
          // convert primitive to vnode
          res.push(createTextVNode(c));
        }
      } else {
        if (isTextNode(c) && isTextNode(last)) {
          // merge adjacent text nodes
          res[res.length - 1] = createTextVNode(last.text + c.text);
        } else {
          // default key for nested array children (likely generated by v-for)
          if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
            c.key = "__vlist" + nestedIndex + "_" + i + "__";
          }
          res.push(c);
        }
      }
    }
    return res;
  }

  /*  */

  function ensureCtor(comp, base) {
    if (comp.__esModule && comp.default) {
      comp = comp.default;
    }
    return isObject(comp) ? base.extend(comp) : comp;
  }

  function createAsyncPlaceholder(factory, data, context, children, tag) {
    var node = createEmptyVNode();
    node.asyncFactory = factory;
    node.asyncMeta = { data: data, context: context, children: children, tag: tag };
    return node;
  }

  function resolveAsyncComponent(factory, baseCtor, context) {
    if (isTrue(factory.error) && isDef(factory.errorComp)) {
      return factory.errorComp;
    }

    if (isDef(factory.resolved)) {
      return factory.resolved;
    }

    if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
      return factory.loadingComp;
    }

    if (isDef(factory.contexts)) {
      // already pending
      factory.contexts.push(context);
    } else {
      var contexts = factory.contexts = [context];
      var sync = true;

      var forceRender = function forceRender() {
        for (var i = 0, l = contexts.length; i < l; i++) {
          contexts[i].$forceUpdate();
        }
      };

      var resolve = once(function (res) {
        // cache resolved
        factory.resolved = ensureCtor(res, baseCtor);
        // invoke callbacks only if this is not a synchronous resolve
        // (async resolves are shimmed as synchronous during SSR)
        if (!sync) {
          forceRender();
        }
      });

      var reject = once(function (reason) {
        "development" !== 'production' && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));
        if (isDef(factory.errorComp)) {
          factory.error = true;
          forceRender();
        }
      });

      var res = factory(resolve, reject);

      if (isObject(res)) {
        if (typeof res.then === 'function') {
          // () => Promise
          if (isUndef(factory.resolved)) {
            res.then(resolve, reject);
          }
        } else if (isDef(res.component) && typeof res.component.then === 'function') {
          res.component.then(resolve, reject);

          if (isDef(res.error)) {
            factory.errorComp = ensureCtor(res.error, baseCtor);
          }

          if (isDef(res.loading)) {
            factory.loadingComp = ensureCtor(res.loading, baseCtor);
            if (res.delay === 0) {
              factory.loading = true;
            } else {
              setTimeout(function () {
                if (isUndef(factory.resolved) && isUndef(factory.error)) {
                  factory.loading = true;
                  forceRender();
                }
              }, res.delay || 200);
            }
          }

          if (isDef(res.timeout)) {
            setTimeout(function () {
              if (isUndef(factory.resolved)) {
                reject("timeout (" + res.timeout + "ms)");
              }
            }, res.timeout);
          }
        }
      }

      sync = false;
      // return in case resolved synchronously
      return factory.loading ? factory.loadingComp : factory.resolved;
    }
  }

  /*  */

  function isAsyncPlaceholder(node) {
    return node.isComment && node.asyncFactory;
  }

  /*  */

  function getFirstComponentChild(children) {
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var c = children[i];
        if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
          return c;
        }
      }
    }
  }

  /*  */

  /*  */

  function initEvents(vm) {
    vm._events = Object.create(null);
    vm._hasHookEvent = false;
    // init parent attached events
    var listeners = vm.$options._parentListeners;
    if (listeners) {
      updateComponentListeners(vm, listeners);
    }
  }

  var target;

  function add(event, fn, once$$1) {
    if (once$$1) {
      target.$once(event, fn);
    } else {
      target.$on(event, fn);
    }
  }

  function remove$1(event, fn) {
    target.$off(event, fn);
  }

  function updateComponentListeners(vm, listeners, oldListeners) {
    target = vm;
    updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
  }

  function eventsMixin(Vue) {
    var hookRE = /^hook:/;
    Vue.prototype.$on = function (event, fn) {
      var this$1 = this;

      var vm = this;
      if (Array.isArray(event)) {
        for (var i = 0, l = event.length; i < l; i++) {
          this$1.$on(event[i], fn);
        }
      } else {
        (vm._events[event] || (vm._events[event] = [])).push(fn);
        // optimize hook:event cost by using a boolean flag marked at registration
        // instead of a hash lookup
        if (hookRE.test(event)) {
          vm._hasHookEvent = true;
        }
      }
      return vm;
    };

    Vue.prototype.$once = function (event, fn) {
      var vm = this;
      function on() {
        vm.$off(event, on);
        fn.apply(vm, arguments);
      }
      on.fn = fn;
      vm.$on(event, on);
      return vm;
    };

    Vue.prototype.$off = function (event, fn) {
      var this$1 = this;

      var vm = this;
      // all
      if (!arguments.length) {
        vm._events = Object.create(null);
        return vm;
      }
      // array of events
      if (Array.isArray(event)) {
        for (var i = 0, l = event.length; i < l; i++) {
          this$1.$off(event[i], fn);
        }
        return vm;
      }
      // specific event
      var cbs = vm._events[event];
      if (!cbs) {
        return vm;
      }
      if (arguments.length === 1) {
        vm._events[event] = null;
        return vm;
      }
      if (fn) {
        // specific handler
        var cb;
        var i$1 = cbs.length;
        while (i$1--) {
          cb = cbs[i$1];
          if (cb === fn || cb.fn === fn) {
            cbs.splice(i$1, 1);
            break;
          }
        }
      }
      return vm;
    };

    Vue.prototype.$emit = function (event) {
      var vm = this;
      {
        var lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
          tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
        }
      }
      var cbs = vm._events[event];
      if (cbs) {
        cbs = cbs.length > 1 ? toArray(cbs) : cbs;
        var args = toArray(arguments, 1);
        for (var i = 0, l = cbs.length; i < l; i++) {
          try {
            cbs[i].apply(vm, args);
          } catch (e) {
            handleError(e, vm, "event handler for \"" + event + "\"");
          }
        }
      }
      return vm;
    };
  }

  /*  */

  /**
   * Runtime helper for resolving raw children VNodes into a slot object.
   */
  function resolveSlots(children, context) {
    var slots = {};
    if (!children) {
      return slots;
    }
    var defaultSlot = [];
    for (var i = 0, l = children.length; i < l; i++) {
      var child = children[i];
      var data = child.data;
      // remove slot attribute if the node is resolved as a Vue slot node
      if (data && data.attrs && data.attrs.slot) {
        delete data.attrs.slot;
      }
      // named slots should only be respected if the vnode was rendered in the
      // same context.
      if ((child.context === context || child.functionalContext === context) && data && data.slot != null) {
        var name = child.data.slot;
        var slot = slots[name] || (slots[name] = []);
        if (child.tag === 'template') {
          slot.push.apply(slot, child.children);
        } else {
          slot.push(child);
        }
      } else {
        defaultSlot.push(child);
      }
    }
    // ignore whitespace
    if (!defaultSlot.every(isWhitespace)) {
      slots.default = defaultSlot;
    }
    return slots;
  }

  function isWhitespace(node) {
    return node.isComment || node.text === ' ';
  }

  function resolveScopedSlots(fns, // see flow/vnode
  res) {
    res = res || {};
    for (var i = 0; i < fns.length; i++) {
      if (Array.isArray(fns[i])) {
        resolveScopedSlots(fns[i], res);
      } else {
        res[fns[i].key] = fns[i].fn;
      }
    }
    return res;
  }

  /*  */

  var activeInstance = null;
  var isUpdatingChildComponent = false;

  function initLifecycle(vm) {
    var options = vm.$options;

    // locate first non-abstract parent
    var parent = options.parent;
    if (parent && !options.abstract) {
      while (parent.$options.abstract && parent.$parent) {
        parent = parent.$parent;
      }
      parent.$children.push(vm);
    }

    vm.$parent = parent;
    vm.$root = parent ? parent.$root : vm;

    vm.$children = [];
    vm.$refs = {};

    vm._watcher = null;
    vm._inactive = null;
    vm._directInactive = false;
    vm._isMounted = false;
    vm._isDestroyed = false;
    vm._isBeingDestroyed = false;
  }

  function lifecycleMixin(Vue) {
    Vue.prototype._update = function (vnode, hydrating) {
      var vm = this;
      if (vm._isMounted) {
        callHook(vm, 'beforeUpdate');
      }
      var prevEl = vm.$el;
      var prevVnode = vm._vnode;
      var prevActiveInstance = activeInstance;
      activeInstance = vm;
      vm._vnode = vnode;
      // Vue.prototype.__patch__ is injected in entry points
      // based on the rendering backend used.
      if (!prevVnode) {
        // initial render
        vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */
        , vm.$options._parentElm, vm.$options._refElm);
        // no need for the ref nodes after initial patch
        // this prevents keeping a detached DOM tree in memory (#5851)
        vm.$options._parentElm = vm.$options._refElm = null;
      } else {
        // updates
        vm.$el = vm.__patch__(prevVnode, vnode);
      }
      activeInstance = prevActiveInstance;
      // update __vue__ reference
      if (prevEl) {
        prevEl.__vue__ = null;
      }
      if (vm.$el) {
        vm.$el.__vue__ = vm;
      }
      // if parent is an HOC, update its $el as well
      if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
        vm.$parent.$el = vm.$el;
      }
      // updated hook is called by the scheduler to ensure that children are
      // updated in a parent's updated hook.
    };

    Vue.prototype.$forceUpdate = function () {
      var vm = this;
      if (vm._watcher) {
        vm._watcher.update();
      }
    };

    Vue.prototype.$destroy = function () {
      var vm = this;
      if (vm._isBeingDestroyed) {
        return;
      }
      callHook(vm, 'beforeDestroy');
      vm._isBeingDestroyed = true;
      // remove self from parent
      var parent = vm.$parent;
      if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
        remove(parent.$children, vm);
      }
      // teardown watchers
      if (vm._watcher) {
        vm._watcher.teardown();
      }
      var i = vm._watchers.length;
      while (i--) {
        vm._watchers[i].teardown();
      }
      // remove reference from data ob
      // frozen object may not have observer.
      if (vm._data.__ob__) {
        vm._data.__ob__.vmCount--;
      }
      // call the last hook...
      vm._isDestroyed = true;
      // invoke destroy hooks on current rendered tree
      vm.__patch__(vm._vnode, null);
      // fire destroyed hook
      callHook(vm, 'destroyed');
      // turn off all instance listeners.
      vm.$off();
      // remove __vue__ reference
      if (vm.$el) {
        vm.$el.__vue__ = null;
      }
    };
  }

  function mountComponent(vm, el, hydrating) {
    vm.$el = el;
    if (!vm.$options.render) {
      vm.$options.render = createEmptyVNode;
      {
        /* istanbul ignore if */
        if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
          warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
        } else {
          warn('Failed to mount component: template or render function not defined.', vm);
        }
      }
    }
    callHook(vm, 'beforeMount');

    var updateComponent;
    /* istanbul ignore if */
    if ("development" !== 'production' && config.performance && mark) {
      updateComponent = function updateComponent() {
        var name = vm._name;
        var id = vm._uid;
        var startTag = "vue-perf-start:" + id;
        var endTag = "vue-perf-end:" + id;

        mark(startTag);
        var vnode = vm._render();
        mark(endTag);
        measure(name + " render", startTag, endTag);

        mark(startTag);
        vm._update(vnode, hydrating);
        mark(endTag);
        measure(name + " patch", startTag, endTag);
      };
    } else {
      updateComponent = function updateComponent() {
        vm._update(vm._render(), hydrating);
      };
    }

    vm._watcher = new Watcher(vm, updateComponent, noop);
    hydrating = false;

    // manually mounted instance, call mounted on self
    // mounted is called for render-created child components in its inserted hook
    if (vm.$vnode == null) {
      vm._isMounted = true;
      callHook(vm, 'mounted');
    }
    return vm;
  }

  function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
    {
      isUpdatingChildComponent = true;
    }

    // determine whether component has slot children
    // we need to do this before overwriting $options._renderChildren
    var hasChildren = !!(renderChildren || // has new static slots
    vm.$options._renderChildren || // has old static slots
    parentVnode.data.scopedSlots || // has new scoped slots
    vm.$scopedSlots !== emptyObject // has old scoped slots
    );

    vm.$options._parentVnode = parentVnode;
    vm.$vnode = parentVnode; // update vm's placeholder node without re-render

    if (vm._vnode) {
      // update child tree's parent
      vm._vnode.parent = parentVnode;
    }
    vm.$options._renderChildren = renderChildren;

    // update $attrs and $listeners hash
    // these are also reactive so they may trigger child update if the child
    // used them during render
    vm.$attrs = parentVnode.data && parentVnode.data.attrs || emptyObject;
    vm.$listeners = listeners || emptyObject;

    // update props
    if (propsData && vm.$options.props) {
      observerState.shouldConvert = false;
      var props = vm._props;
      var propKeys = vm.$options._propKeys || [];
      for (var i = 0; i < propKeys.length; i++) {
        var key = propKeys[i];
        props[key] = validateProp(key, vm.$options.props, propsData, vm);
      }
      observerState.shouldConvert = true;
      // keep a copy of raw propsData
      vm.$options.propsData = propsData;
    }

    // update listeners
    if (listeners) {
      var oldListeners = vm.$options._parentListeners;
      vm.$options._parentListeners = listeners;
      updateComponentListeners(vm, listeners, oldListeners);
    }
    // resolve slots + force update if has children
    if (hasChildren) {
      vm.$slots = resolveSlots(renderChildren, parentVnode.context);
      vm.$forceUpdate();
    }

    {
      isUpdatingChildComponent = false;
    }
  }

  function isInInactiveTree(vm) {
    while (vm && (vm = vm.$parent)) {
      if (vm._inactive) {
        return true;
      }
    }
    return false;
  }

  function activateChildComponent(vm, direct) {
    if (direct) {
      vm._directInactive = false;
      if (isInInactiveTree(vm)) {
        return;
      }
    } else if (vm._directInactive) {
      return;
    }
    if (vm._inactive || vm._inactive === null) {
      vm._inactive = false;
      for (var i = 0; i < vm.$children.length; i++) {
        activateChildComponent(vm.$children[i]);
      }
      callHook(vm, 'activated');
    }
  }

  function deactivateChildComponent(vm, direct) {
    if (direct) {
      vm._directInactive = true;
      if (isInInactiveTree(vm)) {
        return;
      }
    }
    if (!vm._inactive) {
      vm._inactive = true;
      for (var i = 0; i < vm.$children.length; i++) {
        deactivateChildComponent(vm.$children[i]);
      }
      callHook(vm, 'deactivated');
    }
  }

  function callHook(vm, hook) {
    var handlers = vm.$options[hook];
    if (handlers) {
      for (var i = 0, j = handlers.length; i < j; i++) {
        try {
          handlers[i].call(vm);
        } catch (e) {
          handleError(e, vm, hook + " hook");
        }
      }
    }
    if (vm._hasHookEvent) {
      vm.$emit('hook:' + hook);
    }
  }

  /*  */

  var MAX_UPDATE_COUNT = 100;

  var queue = [];
  var activatedChildren = [];
  var has = {};
  var circular = {};
  var waiting = false;
  var flushing = false;
  var index = 0;

  /**
   * Reset the scheduler's state.
   */
  function resetSchedulerState() {
    index = queue.length = activatedChildren.length = 0;
    has = {};
    {
      circular = {};
    }
    waiting = flushing = false;
  }

  /**
   * Flush both queues and run the watchers.
   */
  function flushSchedulerQueue() {
    flushing = true;
    var watcher, id;

    // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child)
    // 2. A component's user watchers are run before its render watcher (because
    //    user watchers are created before the render watcher)
    // 3. If a component is destroyed during a parent component's watcher run,
    //    its watchers can be skipped.
    queue.sort(function (a, b) {
      return a.id - b.id;
    });

    // do not cache length because more watchers might be pushed
    // as we run existing watchers
    for (index = 0; index < queue.length; index++) {
      watcher = queue[index];
      id = watcher.id;
      has[id] = null;
      watcher.run();
      // in dev build, check and stop circular updates.
      if ("development" !== 'production' && has[id] != null) {
        circular[id] = (circular[id] || 0) + 1;
        if (circular[id] > MAX_UPDATE_COUNT) {
          warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
          break;
        }
      }
    }

    // keep copies of post queues before resetting state
    var activatedQueue = activatedChildren.slice();
    var updatedQueue = queue.slice();

    resetSchedulerState();

    // call component updated and activated hooks
    callActivatedHooks(activatedQueue);
    callUpdatedHooks(updatedQueue);

    // devtool hook
    /* istanbul ignore if */
    if (devtools && config.devtools) {
      devtools.emit('flush');
    }
  }

  function callUpdatedHooks(queue) {
    var i = queue.length;
    while (i--) {
      var watcher = queue[i];
      var vm = watcher.vm;
      if (vm._watcher === watcher && vm._isMounted) {
        callHook(vm, 'updated');
      }
    }
  }

  /**
   * Queue a kept-alive component that was activated during patch.
   * The queue will be processed after the entire tree has been patched.
   */
  function queueActivatedComponent(vm) {
    // setting _inactive to false here so that a render function can
    // rely on checking whether it's in an inactive tree (e.g. router-view)
    vm._inactive = false;
    activatedChildren.push(vm);
  }

  function callActivatedHooks(queue) {
    for (var i = 0; i < queue.length; i++) {
      queue[i]._inactive = true;
      activateChildComponent(queue[i], true /* true */);
    }
  }

  /**
   * Push a watcher into the watcher queue.
   * Jobs with duplicate IDs will be skipped unless it's
   * pushed when the queue is being flushed.
   */
  function queueWatcher(watcher) {
    var id = watcher.id;
    if (has[id] == null) {
      has[id] = true;
      if (!flushing) {
        queue.push(watcher);
      } else {
        // if already flushing, splice the watcher based on its id
        // if already past its id, it will be run next immediately.
        var i = queue.length - 1;
        while (i > index && queue[i].id > watcher.id) {
          i--;
        }
        queue.splice(i + 1, 0, watcher);
      }
      // queue the flush
      if (!waiting) {
        waiting = true;
        nextTick(flushSchedulerQueue);
      }
    }
  }

  /*  */

  var uid$2 = 0;

  /**
   * A watcher parses an expression, collects dependencies,
   * and fires callback when the expression value changes.
   * This is used for both the $watch() api and directives.
   */
  var Watcher = function Watcher(vm, expOrFn, cb, options) {
    this.vm = vm;
    vm._watchers.push(this);
    // options
    if (options) {
      this.deep = !!options.deep;
      this.user = !!options.user;
      this.lazy = !!options.lazy;
      this.sync = !!options.sync;
    } else {
      this.deep = this.user = this.lazy = this.sync = false;
    }
    this.cb = cb;
    this.id = ++uid$2; // uid for batching
    this.active = true;
    this.dirty = this.lazy; // for lazy watchers
    this.deps = [];
    this.newDeps = [];
    this.depIds = new _Set();
    this.newDepIds = new _Set();
    this.expression = expOrFn.toString();
    // parse expression for getter
    if (typeof expOrFn === 'function') {
      this.getter = expOrFn;
    } else {
      this.getter = parsePath(expOrFn);
      if (!this.getter) {
        this.getter = function () {};
        "development" !== 'production' && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
      }
    }
    this.value = this.lazy ? undefined : this.get();
  };

  /**
   * Evaluate the getter, and re-collect dependencies.
   */
  Watcher.prototype.get = function get() {
    pushTarget(this);
    var value;
    var vm = this.vm;
    try {
      value = this.getter.call(vm, vm);
    } catch (e) {
      if (this.user) {
        handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
      } else {
        throw e;
      }
    } finally {
      // "touch" every property so they are all tracked as
      // dependencies for deep watching
      if (this.deep) {
        traverse(value);
      }
      popTarget();
      this.cleanupDeps();
    }
    return value;
  };

  /**
   * Add a dependency to this directive.
   */
  Watcher.prototype.addDep = function addDep(dep) {
    var id = dep.id;
    if (!this.newDepIds.has(id)) {
      this.newDepIds.add(id);
      this.newDeps.push(dep);
      if (!this.depIds.has(id)) {
        dep.addSub(this);
      }
    }
  };

  /**
   * Clean up for dependency collection.
   */
  Watcher.prototype.cleanupDeps = function cleanupDeps() {
    var this$1 = this;

    var i = this.deps.length;
    while (i--) {
      var dep = this$1.deps[i];
      if (!this$1.newDepIds.has(dep.id)) {
        dep.removeSub(this$1);
      }
    }
    var tmp = this.depIds;
    this.depIds = this.newDepIds;
    this.newDepIds = tmp;
    this.newDepIds.clear();
    tmp = this.deps;
    this.deps = this.newDeps;
    this.newDeps = tmp;
    this.newDeps.length = 0;
  };

  /**
   * Subscriber interface.
   * Will be called when a dependency changes.
   */
  Watcher.prototype.update = function update() {
    /* istanbul ignore else */
    if (this.lazy) {
      this.dirty = true;
    } else if (this.sync) {
      this.run();
    } else {
      queueWatcher(this);
    }
  };

  /**
   * Scheduler job interface.
   * Will be called by the scheduler.
   */
  Watcher.prototype.run = function run() {
    if (this.active) {
      var value = this.get();
      if (value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) || this.deep) {
        // set new value
        var oldValue = this.value;
        this.value = value;
        if (this.user) {
          try {
            this.cb.call(this.vm, value, oldValue);
          } catch (e) {
            handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
          }
        } else {
          this.cb.call(this.vm, value, oldValue);
        }
      }
    }
  };

  /**
   * Evaluate the value of the watcher.
   * This only gets called for lazy watchers.
   */
  Watcher.prototype.evaluate = function evaluate() {
    this.value = this.get();
    this.dirty = false;
  };

  /**
   * Depend on all deps collected by this watcher.
   */
  Watcher.prototype.depend = function depend() {
    var this$1 = this;

    var i = this.deps.length;
    while (i--) {
      this$1.deps[i].depend();
    }
  };

  /**
   * Remove self from all dependencies' subscriber list.
   */
  Watcher.prototype.teardown = function teardown() {
    var this$1 = this;

    if (this.active) {
      // remove self from vm's watcher list
      // this is a somewhat expensive operation so we skip it
      // if the vm is being destroyed.
      if (!this.vm._isBeingDestroyed) {
        remove(this.vm._watchers, this);
      }
      var i = this.deps.length;
      while (i--) {
        this$1.deps[i].removeSub(this$1);
      }
      this.active = false;
    }
  };

  /**
   * Recursively traverse an object to evoke all converted
   * getters, so that every nested property inside the object
   * is collected as a "deep" dependency.
   */
  var seenObjects = new _Set();
  function traverse(val) {
    seenObjects.clear();
    _traverse(val, seenObjects);
  }

  function _traverse(val, seen) {
    var i, keys;
    var isA = Array.isArray(val);
    if (!isA && !isObject(val) || !Object.isExtensible(val)) {
      return;
    }
    if (val.__ob__) {
      var depId = val.__ob__.dep.id;
      if (seen.has(depId)) {
        return;
      }
      seen.add(depId);
    }
    if (isA) {
      i = val.length;
      while (i--) {
        _traverse(val[i], seen);
      }
    } else {
      keys = Object.keys(val);
      i = keys.length;
      while (i--) {
        _traverse(val[keys[i]], seen);
      }
    }
  }

  /*  */

  var sharedPropertyDefinition = {
    enumerable: true,
    configurable: true,
    get: noop,
    set: noop
  };

  function proxy(target, sourceKey, key) {
    sharedPropertyDefinition.get = function proxyGetter() {
      return this[sourceKey][key];
    };
    sharedPropertyDefinition.set = function proxySetter(val) {
      this[sourceKey][key] = val;
    };
    Object.defineProperty(target, key, sharedPropertyDefinition);
  }

  function initState(vm) {
    vm._watchers = [];
    var opts = vm.$options;
    if (opts.props) {
      initProps(vm, opts.props);
    }
    if (opts.methods) {
      initMethods(vm, opts.methods);
    }
    if (opts.data) {
      initData(vm);
    } else {
      observe(vm._data = {}, true /* asRootData */);
    }
    if (opts.computed) {
      initComputed(vm, opts.computed);
    }
    if (opts.watch && opts.watch !== nativeWatch) {
      initWatch(vm, opts.watch);
    }
  }

  function checkOptionType(vm, name) {
    var option = vm.$options[name];
    if (!isPlainObject(option)) {
      warn("component option \"" + name + "\" should be an object.", vm);
    }
  }

  function initProps(vm, propsOptions) {
    var propsData = vm.$options.propsData || {};
    var props = vm._props = {};
    // cache prop keys so that future props updates can iterate using Array
    // instead of dynamic object key enumeration.
    var keys = vm.$options._propKeys = [];
    var isRoot = !vm.$parent;
    // root instance props should be converted
    observerState.shouldConvert = isRoot;
    var loop = function loop(key) {
      keys.push(key);
      var value = validateProp(key, propsOptions, propsData, vm);
      /* istanbul ignore else */
      {
        if (isReservedAttribute(key) || config.isReservedAttr(key)) {
          warn("\"" + key + "\" is a reserved attribute and cannot be used as component prop.", vm);
        }
        defineReactive$$1(props, key, value, function () {
          if (vm.$parent && !isUpdatingChildComponent) {
            warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
          }
        });
      }
      // static props are already proxied on the component's prototype
      // during Vue.extend(). We only need to proxy props defined at
      // instantiation here.
      if (!(key in vm)) {
        proxy(vm, "_props", key);
      }
    };

    for (var key in propsOptions) {
      loop(key);
    }observerState.shouldConvert = true;
  }

  function initData(vm) {
    var data = vm.$options.data;
    data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};
    if (!isPlainObject(data)) {
      data = {};
      "development" !== 'production' && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
    }
    // proxy data on instance
    var keys = Object.keys(data);
    var props = vm.$options.props;
    var methods = vm.$options.methods;
    var i = keys.length;
    while (i--) {
      var key = keys[i];
      {
        if (methods && hasOwn(methods, key)) {
          warn("Method \"" + key + "\" has already been defined as a data property.", vm);
        }
      }
      if (props && hasOwn(props, key)) {
        "development" !== 'production' && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
      } else if (!isReserved(key)) {
        proxy(vm, "_data", key);
      }
    }
    // observe data
    observe(data, true /* asRootData */);
  }

  function getData(data, vm) {
    try {
      return data.call(vm);
    } catch (e) {
      handleError(e, vm, "data()");
      return {};
    }
  }

  var computedWatcherOptions = { lazy: true };

  function initComputed(vm, computed) {
    "development" !== 'production' && checkOptionType(vm, 'computed');
    var watchers = vm._computedWatchers = Object.create(null);
    // computed properties are just getters during SSR
    var isSSR = isServerRendering();

    for (var key in computed) {
      var userDef = computed[key];
      var getter = typeof userDef === 'function' ? userDef : userDef.get;
      if ("development" !== 'production' && getter == null) {
        warn("Getter is missing for computed property \"" + key + "\".", vm);
      }

      if (!isSSR) {
        // create internal watcher for the computed property.
        watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
      }

      // component-defined computed properties are already defined on the
      // component prototype. We only need to define computed properties defined
      // at instantiation here.
      if (!(key in vm)) {
        defineComputed(vm, key, userDef);
      } else {
        if (key in vm.$data) {
          warn("The computed property \"" + key + "\" is already defined in data.", vm);
        } else if (vm.$options.props && key in vm.$options.props) {
          warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
        }
      }
    }
  }

  function defineComputed(target, key, userDef) {
    var shouldCache = !isServerRendering();
    if (typeof userDef === 'function') {
      sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : userDef;
      sharedPropertyDefinition.set = noop;
    } else {
      sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : userDef.get : noop;
      sharedPropertyDefinition.set = userDef.set ? userDef.set : noop;
    }
    if ("development" !== 'production' && sharedPropertyDefinition.set === noop) {
      sharedPropertyDefinition.set = function () {
        warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
      };
    }
    Object.defineProperty(target, key, sharedPropertyDefinition);
  }

  function createComputedGetter(key) {
    return function computedGetter() {
      var watcher = this._computedWatchers && this._computedWatchers[key];
      if (watcher) {
        if (watcher.dirty) {
          watcher.evaluate();
        }
        if (Dep.target) {
          watcher.depend();
        }
        return watcher.value;
      }
    };
  }

  function initMethods(vm, methods) {
    "development" !== 'production' && checkOptionType(vm, 'methods');
    var props = vm.$options.props;
    for (var key in methods) {
      {
        if (methods[key] == null) {
          warn("Method \"" + key + "\" has an undefined value in the component definition. " + "Did you reference the function correctly?", vm);
        }
        if (props && hasOwn(props, key)) {
          warn("Method \"" + key + "\" has already been defined as a prop.", vm);
        }
        if (key in vm && isReserved(key)) {
          warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
        }
      }
      vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
    }
  }

  function initWatch(vm, watch) {
    "development" !== 'production' && checkOptionType(vm, 'watch');
    for (var key in watch) {
      var handler = watch[key];
      if (Array.isArray(handler)) {
        for (var i = 0; i < handler.length; i++) {
          createWatcher(vm, key, handler[i]);
        }
      } else {
        createWatcher(vm, key, handler);
      }
    }
  }

  function createWatcher(vm, keyOrFn, handler, options) {
    if (isPlainObject(handler)) {
      options = handler;
      handler = handler.handler;
    }
    if (typeof handler === 'string') {
      handler = vm[handler];
    }
    return vm.$watch(keyOrFn, handler, options);
  }

  function stateMixin(Vue) {
    // flow somehow has problems with directly declared definition object
    // when using Object.defineProperty, so we have to procedurally build up
    // the object here.
    var dataDef = {};
    dataDef.get = function () {
      return this._data;
    };
    var propsDef = {};
    propsDef.get = function () {
      return this._props;
    };
    {
      dataDef.set = function (newData) {
        warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
      };
      propsDef.set = function () {
        warn("$props is readonly.", this);
      };
    }
    Object.defineProperty(Vue.prototype, '$data', dataDef);
    Object.defineProperty(Vue.prototype, '$props', propsDef);

    Vue.prototype.$set = set;
    Vue.prototype.$delete = del;

    Vue.prototype.$watch = function (expOrFn, cb, options) {
      var vm = this;
      if (isPlainObject(cb)) {
        return createWatcher(vm, expOrFn, cb, options);
      }
      options = options || {};
      options.user = true;
      var watcher = new Watcher(vm, expOrFn, cb, options);
      if (options.immediate) {
        cb.call(vm, watcher.value);
      }
      return function unwatchFn() {
        watcher.teardown();
      };
    };
  }

  /*  */

  function initProvide(vm) {
    var provide = vm.$options.provide;
    if (provide) {
      vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
    }
  }

  function initInjections(vm) {
    var result = resolveInject(vm.$options.inject, vm);
    if (result) {
      observerState.shouldConvert = false;
      Object.keys(result).forEach(function (key) {
        /* istanbul ignore else */
        {
          defineReactive$$1(vm, key, result[key], function () {
            warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
          });
        }
      });
      observerState.shouldConvert = true;
    }
  }

  function resolveInject(inject, vm) {
    if (inject) {
      // inject is :any because flow is not smart enough to figure out cached
      var result = Object.create(null);
      var keys = hasSymbol ? Reflect.ownKeys(inject).filter(function (key) {
        /* istanbul ignore next */
        return Object.getOwnPropertyDescriptor(inject, key).enumerable;
      }) : Object.keys(inject);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var provideKey = inject[key];
        var source = vm;
        while (source) {
          if (source._provided && provideKey in source._provided) {
            result[key] = source._provided[provideKey];
            break;
          }
          source = source.$parent;
        }
        if ("development" !== 'production' && !source) {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
      return result;
    }
  }

  /*  */

  function createFunctionalComponent(Ctor, propsData, data, context, children) {
    var props = {};
    var propOptions = Ctor.options.props;
    if (isDef(propOptions)) {
      for (var key in propOptions) {
        props[key] = validateProp(key, propOptions, propsData || emptyObject);
      }
    } else {
      if (isDef(data.attrs)) {
        mergeProps(props, data.attrs);
      }
      if (isDef(data.props)) {
        mergeProps(props, data.props);
      }
    }
    // ensure the createElement function in functional components
    // gets a unique context - this is necessary for correct named slot check
    var _context = Object.create(context);
    var h = function h(a, b, c, d) {
      return createElement(_context, a, b, c, d, true);
    };
    var vnode = Ctor.options.render.call(null, h, {
      data: data,
      props: props,
      children: children,
      parent: context,
      listeners: data.on || emptyObject,
      injections: resolveInject(Ctor.options.inject, context),
      slots: function slots() {
        return resolveSlots(children, context);
      }
    });
    if (vnode instanceof VNode) {
      vnode.functionalContext = context;
      vnode.functionalOptions = Ctor.options;
      if (data.slot) {
        (vnode.data || (vnode.data = {})).slot = data.slot;
      }
    }
    return vnode;
  }

  function mergeProps(to, from) {
    for (var key in from) {
      to[camelize(key)] = from[key];
    }
  }

  /*  */

  // hooks to be invoked on component VNodes during patch
  var componentVNodeHooks = {
    init: function init(vnode, hydrating, parentElm, refElm) {
      if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {
        var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance, parentElm, refElm);
        child.$mount(hydrating ? vnode.elm : undefined, hydrating);
      } else if (vnode.data.keepAlive) {
        // kept-alive components, treat as a patch
        var mountedNode = vnode; // work around flow
        componentVNodeHooks.prepatch(mountedNode, mountedNode);
      }
    },

    prepatch: function prepatch(oldVnode, vnode) {
      var options = vnode.componentOptions;
      var child = vnode.componentInstance = oldVnode.componentInstance;
      updateChildComponent(child, options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
      );
    },

    insert: function insert(vnode) {
      var context = vnode.context;
      var componentInstance = vnode.componentInstance;
      if (!componentInstance._isMounted) {
        componentInstance._isMounted = true;
        callHook(componentInstance, 'mounted');
      }
      if (vnode.data.keepAlive) {
        if (context._isMounted) {
          // vue-router#1212
          // During updates, a kept-alive component's child components may
          // change, so directly walking the tree here may call activated hooks
          // on incorrect children. Instead we push them into a queue which will
          // be processed after the whole patch process ended.
          queueActivatedComponent(componentInstance);
        } else {
          activateChildComponent(componentInstance, true /* direct */);
        }
      }
    },

    destroy: function destroy(vnode) {
      var componentInstance = vnode.componentInstance;
      if (!componentInstance._isDestroyed) {
        if (!vnode.data.keepAlive) {
          componentInstance.$destroy();
        } else {
          deactivateChildComponent(componentInstance, true /* direct */);
        }
      }
    }
  };

  var hooksToMerge = Object.keys(componentVNodeHooks);

  function createComponent(Ctor, data, context, children, tag) {
    if (isUndef(Ctor)) {
      return;
    }

    var baseCtor = context.$options._base;

    // plain options object: turn it into a constructor
    if (isObject(Ctor)) {
      Ctor = baseCtor.extend(Ctor);
    }

    // if at this stage it's not a constructor or an async component factory,
    // reject.
    if (typeof Ctor !== 'function') {
      {
        warn("Invalid Component definition: " + String(Ctor), context);
      }
      return;
    }

    // async component
    var asyncFactory;
    if (isUndef(Ctor.cid)) {
      asyncFactory = Ctor;
      Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);
      if (Ctor === undefined) {
        // return a placeholder node for async component, which is rendered
        // as a comment node but preserves all the raw information for the node.
        // the information will be used for async server-rendering and hydration.
        return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
      }
    }

    data = data || {};

    // resolve constructor options in case global mixins are applied after
    // component constructor creation
    resolveConstructorOptions(Ctor);

    // transform component v-model data into props & events
    if (isDef(data.model)) {
      transformModel(Ctor.options, data);
    }

    // extract props
    var propsData = extractPropsFromVNodeData(data, Ctor, tag);

    // functional component
    if (isTrue(Ctor.options.functional)) {
      return createFunctionalComponent(Ctor, propsData, data, context, children);
    }

    // extract listeners, since these needs to be treated as
    // child component listeners instead of DOM listeners
    var listeners = data.on;
    // replace with listeners with .native modifier
    // so it gets processed during parent component patch.
    data.on = data.nativeOn;

    if (isTrue(Ctor.options.abstract)) {
      // abstract components do not keep anything
      // other than props & listeners & slot

      // work around flow
      var slot = data.slot;
      data = {};
      if (slot) {
        data.slot = slot;
      }
    }

    // merge component management hooks onto the placeholder node
    mergeHooks(data);

    // return a placeholder vnode
    var name = Ctor.options.name || tag;
    var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }, asyncFactory);
    return vnode;
  }

  function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
  parent, // activeInstance in lifecycle state
  parentElm, refElm) {
    var vnodeComponentOptions = vnode.componentOptions;
    var options = {
      _isComponent: true,
      parent: parent,
      propsData: vnodeComponentOptions.propsData,
      _componentTag: vnodeComponentOptions.tag,
      _parentVnode: vnode,
      _parentListeners: vnodeComponentOptions.listeners,
      _renderChildren: vnodeComponentOptions.children,
      _parentElm: parentElm || null,
      _refElm: refElm || null
    };
    // check inline-template render functions
    var inlineTemplate = vnode.data.inlineTemplate;
    if (isDef(inlineTemplate)) {
      options.render = inlineTemplate.render;
      options.staticRenderFns = inlineTemplate.staticRenderFns;
    }
    return new vnodeComponentOptions.Ctor(options);
  }

  function mergeHooks(data) {
    if (!data.hook) {
      data.hook = {};
    }
    for (var i = 0; i < hooksToMerge.length; i++) {
      var key = hooksToMerge[i];
      var fromParent = data.hook[key];
      var ours = componentVNodeHooks[key];
      data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
    }
  }

  function mergeHook$1(one, two) {
    return function (a, b, c, d) {
      one(a, b, c, d);
      two(a, b, c, d);
    };
  }

  // transform component v-model info (value and callback) into
  // prop and event handler respectively.
  function transformModel(options, data) {
    var prop = options.model && options.model.prop || 'value';
    var event = options.model && options.model.event || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
    var on = data.on || (data.on = {});
    if (isDef(on[event])) {
      on[event] = [data.model.callback].concat(on[event]);
    } else {
      on[event] = data.model.callback;
    }
  }

  /*  */

  var SIMPLE_NORMALIZE = 1;
  var ALWAYS_NORMALIZE = 2;

  // wrapper function for providing a more flexible interface
  // without getting yelled at by flow
  function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
    if (Array.isArray(data) || isPrimitive(data)) {
      normalizationType = children;
      children = data;
      data = undefined;
    }
    if (isTrue(alwaysNormalize)) {
      normalizationType = ALWAYS_NORMALIZE;
    }
    return _createElement(context, tag, data, children, normalizationType);
  }

  function _createElement(context, tag, data, children, normalizationType) {
    if (isDef(data) && isDef(data.__ob__)) {
      "development" !== 'production' && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
      return createEmptyVNode();
    }
    // object syntax in v-bind
    if (isDef(data) && isDef(data.is)) {
      tag = data.is;
    }
    if (!tag) {
      // in case of component :is set to falsy value
      return createEmptyVNode();
    }
    // warn against non-primitive key
    if ("development" !== 'production' && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
    // support single function children as default scoped slot
    if (Array.isArray(children) && typeof children[0] === 'function') {
      data = data || {};
      data.scopedSlots = { default: children[0] };
      children.length = 0;
    }
    if (normalizationType === ALWAYS_NORMALIZE) {
      children = normalizeChildren(children);
    } else if (normalizationType === SIMPLE_NORMALIZE) {
      children = simpleNormalizeChildren(children);
    }
    var vnode, ns;
    if (typeof tag === 'string') {
      var Ctor;
      ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);
      if (config.isReservedTag(tag)) {
        // platform built-in elements
        vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
      } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
        // component
        vnode = createComponent(Ctor, data, context, children, tag);
      } else {
        // unknown or unlisted namespaced elements
        // check at runtime because it may get assigned a namespace when its
        // parent normalizes children
        vnode = new VNode(tag, data, children, undefined, undefined, context);
      }
    } else {
      // direct component options / constructor
      vnode = createComponent(tag, data, context, children);
    }
    if (isDef(vnode)) {
      if (ns) {
        applyNS(vnode, ns);
      }
      return vnode;
    } else {
      return createEmptyVNode();
    }
  }

  function applyNS(vnode, ns) {
    vnode.ns = ns;
    if (vnode.tag === 'foreignObject') {
      // use default namespace inside foreignObject
      return;
    }
    if (isDef(vnode.children)) {
      for (var i = 0, l = vnode.children.length; i < l; i++) {
        var child = vnode.children[i];
        if (isDef(child.tag) && isUndef(child.ns)) {
          applyNS(child, ns);
        }
      }
    }
  }

  /*  */

  /**
   * Runtime helper for rendering v-for lists.
   */
  function renderList(val, render) {
    var ret, i, l, keys, key;
    if (Array.isArray(val) || typeof val === 'string') {
      ret = new Array(val.length);
      for (i = 0, l = val.length; i < l; i++) {
        ret[i] = render(val[i], i);
      }
    } else if (typeof val === 'number') {
      ret = new Array(val);
      for (i = 0; i < val; i++) {
        ret[i] = render(i + 1, i);
      }
    } else if (isObject(val)) {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
    if (isDef(ret)) {
      ret._isVList = true;
    }
    return ret;
  }

  /*  */

  /**
   * Runtime helper for rendering <slot>
   */
  function renderSlot(name, fallback, props, bindObject) {
    var scopedSlotFn = this.$scopedSlots[name];
    if (scopedSlotFn) {
      // scoped slot
      props = props || {};
      if (bindObject) {
        props = extend(extend({}, bindObject), props);
      }
      return scopedSlotFn(props) || fallback;
    } else {
      var slotNodes = this.$slots[name];
      // warn duplicate slot usage
      if (slotNodes && "development" !== 'production') {
        slotNodes._rendered && warn("Duplicate presence of slot \"" + name + "\" found in the same render tree " + "- this will likely cause render errors.", this);
        slotNodes._rendered = true;
      }
      return slotNodes || fallback;
    }
  }

  /*  */

  /**
   * Runtime helper for resolving filters
   */
  function resolveFilter(id) {
    return resolveAsset(this.$options, 'filters', id, true) || identity;
  }

  /*  */

  /**
   * Runtime helper for checking keyCodes from config.
   */
  function checkKeyCodes(eventKeyCode, key, builtInAlias) {
    var keyCodes = config.keyCodes[key] || builtInAlias;
    if (Array.isArray(keyCodes)) {
      return keyCodes.indexOf(eventKeyCode) === -1;
    } else {
      return keyCodes !== eventKeyCode;
    }
  }

  /*  */

  /**
   * Runtime helper for merging v-bind="object" into a VNode's data.
   */
  function bindObjectProps(data, tag, value, asProp, isSync) {
    if (value) {
      if (!isObject(value)) {
        "development" !== 'production' && warn('v-bind without argument expects an Object or Array value', this);
      } else {
        if (Array.isArray(value)) {
          value = toObject(value);
        }
        var hash;
        var loop = function loop(key) {
          if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
            hash = data;
          } else {
            var type = data.attrs && data.attrs.type;
            hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
          }
          if (!(key in hash)) {
            hash[key] = value[key];

            if (isSync) {
              var on = data.on || (data.on = {});
              on["update:" + key] = function ($event) {
                value[key] = $event;
              };
            }
          }
        };

        for (var key in value) {
          loop(key);
        }
      }
    }
    return data;
  }

  /*  */

  /**
   * Runtime helper for rendering static trees.
   */
  function renderStatic(index, isInFor) {
    var tree = this._staticTrees[index];
    // if has already-rendered static tree and not inside v-for,
    // we can reuse the same tree by doing a shallow clone.
    if (tree && !isInFor) {
      return Array.isArray(tree) ? cloneVNodes(tree) : cloneVNode(tree);
    }
    // otherwise, render a fresh tree.
    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy);
    markStatic(tree, "__static__" + index, false);
    return tree;
  }

  /**
   * Runtime helper for v-once.
   * Effectively it means marking the node as static with a unique key.
   */
  function markOnce(tree, index, key) {
    markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
    return tree;
  }

  function markStatic(tree, key, isOnce) {
    if (Array.isArray(tree)) {
      for (var i = 0; i < tree.length; i++) {
        if (tree[i] && typeof tree[i] !== 'string') {
          markStaticNode(tree[i], key + "_" + i, isOnce);
        }
      }
    } else {
      markStaticNode(tree, key, isOnce);
    }
  }

  function markStaticNode(node, key, isOnce) {
    node.isStatic = true;
    node.key = key;
    node.isOnce = isOnce;
  }

  /*  */

  function bindObjectListeners(data, value) {
    if (value) {
      if (!isPlainObject(value)) {
        "development" !== 'production' && warn('v-on without argument expects an Object value', this);
      } else {
        var on = data.on = data.on ? extend({}, data.on) : {};
        for (var key in value) {
          var existing = on[key];
          var ours = value[key];
          on[key] = existing ? [].concat(ours, existing) : ours;
        }
      }
    }
    return data;
  }

  /*  */

  function initRender(vm) {
    vm._vnode = null; // the root of the child tree
    vm._staticTrees = null;
    var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree
    var renderContext = parentVnode && parentVnode.context;
    vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);
    vm.$scopedSlots = emptyObject;
    // bind the createElement fn to this instance
    // so that we get proper render context inside it.
    // args order: tag, data, children, normalizationType, alwaysNormalize
    // internal version is used by render functions compiled from templates
    vm._c = function (a, b, c, d) {
      return createElement(vm, a, b, c, d, false);
    };
    // normalization is always applied for the public version, used in
    // user-written render functions.
    vm.$createElement = function (a, b, c, d) {
      return createElement(vm, a, b, c, d, true);
    };

    // $attrs & $listeners are exposed for easier HOC creation.
    // they need to be reactive so that HOCs using them are always updated
    var parentData = parentVnode && parentVnode.data;

    /* istanbul ignore else */
    {
      defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
        !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
      }, true);
      defineReactive$$1(vm, '$listeners', vm.$options._parentListeners || emptyObject, function () {
        !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
      }, true);
    }
  }

  function renderMixin(Vue) {
    Vue.prototype.$nextTick = function (fn) {
      return nextTick(fn, this);
    };

    Vue.prototype._render = function () {
      var vm = this;
      var ref = vm.$options;
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      var _parentVnode = ref._parentVnode;

      if (vm._isMounted) {
        // if the parent didn't update, the slot nodes will be the ones from
        // last render. They need to be cloned to ensure "freshness" for this render.
        for (var key in vm.$slots) {
          var slot = vm.$slots[key];
          if (slot._rendered) {
            vm.$slots[key] = cloneVNodes(slot, true /* deep */);
          }
        }
      }

      vm.$scopedSlots = _parentVnode && _parentVnode.data.scopedSlots || emptyObject;

      if (staticRenderFns && !vm._staticTrees) {
        vm._staticTrees = [];
      }
      // set parent vnode. this allows render functions to have access
      // to the data on the placeholder node.
      vm.$vnode = _parentVnode;
      // render self
      var vnode;
      try {
        vnode = render.call(vm._renderProxy, vm.$createElement);
      } catch (e) {
        handleError(e, vm, "render function");
        // return error render result,
        // or previous vnode to prevent render error causing blank component
        /* istanbul ignore else */
        {
          vnode = vm.$options.renderError ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e) : vm._vnode;
        }
      }
      // return empty vnode in case the render function errored out
      if (!(vnode instanceof VNode)) {
        if ("development" !== 'production' && Array.isArray(vnode)) {
          warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
        }
        vnode = createEmptyVNode();
      }
      // set parent
      vnode.parent = _parentVnode;
      return vnode;
    };

    // internal render helpers.
    // these are exposed on the instance prototype to reduce generated render
    // code size.
    Vue.prototype._o = markOnce;
    Vue.prototype._n = toNumber;
    Vue.prototype._s = toString;
    Vue.prototype._l = renderList;
    Vue.prototype._t = renderSlot;
    Vue.prototype._q = looseEqual;
    Vue.prototype._i = looseIndexOf;
    Vue.prototype._m = renderStatic;
    Vue.prototype._f = resolveFilter;
    Vue.prototype._k = checkKeyCodes;
    Vue.prototype._b = bindObjectProps;
    Vue.prototype._v = createTextVNode;
    Vue.prototype._e = createEmptyVNode;
    Vue.prototype._u = resolveScopedSlots;
    Vue.prototype._g = bindObjectListeners;
  }

  /*  */

  var uid$1 = 0;

  function initMixin(Vue) {
    Vue.prototype._init = function (options) {
      var vm = this;
      // a uid
      vm._uid = uid$1++;

      var startTag, endTag;
      /* istanbul ignore if */
      if ("development" !== 'production' && config.performance && mark) {
        startTag = "vue-perf-init:" + vm._uid;
        endTag = "vue-perf-end:" + vm._uid;
        mark(startTag);
      }

      // a flag to avoid this being observed
      vm._isVue = true;
      // merge options
      if (options && options._isComponent) {
        // optimize internal component instantiation
        // since dynamic options merging is pretty slow, and none of the
        // internal component options needs special treatment.
        initInternalComponent(vm, options);
      } else {
        vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
      }
      /* istanbul ignore else */
      {
        initProxy(vm);
      }
      // expose real self
      vm._self = vm;
      initLifecycle(vm);
      initEvents(vm);
      initRender(vm);
      callHook(vm, 'beforeCreate');
      initInjections(vm); // resolve injections before data/props
      initState(vm);
      initProvide(vm); // resolve provide after data/props
      callHook(vm, 'created');

      /* istanbul ignore if */
      if ("development" !== 'production' && config.performance && mark) {
        vm._name = formatComponentName(vm, false);
        mark(endTag);
        measure(vm._name + " init", startTag, endTag);
      }

      if (vm.$options.el) {
        vm.$mount(vm.$options.el);
      }
    };
  }

  function initInternalComponent(vm, options) {
    var opts = vm.$options = Object.create(vm.constructor.options);
    // doing this because it's faster than dynamic enumeration.
    opts.parent = options.parent;
    opts.propsData = options.propsData;
    opts._parentVnode = options._parentVnode;
    opts._parentListeners = options._parentListeners;
    opts._renderChildren = options._renderChildren;
    opts._componentTag = options._componentTag;
    opts._parentElm = options._parentElm;
    opts._refElm = options._refElm;
    if (options.render) {
      opts.render = options.render;
      opts.staticRenderFns = options.staticRenderFns;
    }
  }

  function resolveConstructorOptions(Ctor) {
    var options = Ctor.options;
    if (Ctor.super) {
      var superOptions = resolveConstructorOptions(Ctor.super);
      var cachedSuperOptions = Ctor.superOptions;
      if (superOptions !== cachedSuperOptions) {
        // super option changed,
        // need to resolve new options.
        Ctor.superOptions = superOptions;
        // check if there are any late-modified/attached options (#4976)
        var modifiedOptions = resolveModifiedOptions(Ctor);
        // update base extend options
        if (modifiedOptions) {
          extend(Ctor.extendOptions, modifiedOptions);
        }
        options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
        if (options.name) {
          options.components[options.name] = Ctor;
        }
      }
    }
    return options;
  }

  function resolveModifiedOptions(Ctor) {
    var modified;
    var latest = Ctor.options;
    var extended = Ctor.extendOptions;
    var sealed = Ctor.sealedOptions;
    for (var key in latest) {
      if (latest[key] !== sealed[key]) {
        if (!modified) {
          modified = {};
        }
        modified[key] = dedupe(latest[key], extended[key], sealed[key]);
      }
    }
    return modified;
  }

  function dedupe(latest, extended, sealed) {
    // compare latest and sealed to ensure lifecycle hooks won't be duplicated
    // between merges
    if (Array.isArray(latest)) {
      var res = [];
      sealed = Array.isArray(sealed) ? sealed : [sealed];
      extended = Array.isArray(extended) ? extended : [extended];
      for (var i = 0; i < latest.length; i++) {
        // push original options and not sealed options to exclude duplicated options
        if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
          res.push(latest[i]);
        }
      }
      return res;
    } else {
      return latest;
    }
  }

  function Vue$3(options) {
    if ("development" !== 'production' && !(this instanceof Vue$3)) {
      warn('Vue is a constructor and should be called with the `new` keyword');
    }
    this._init(options);
  }

  initMixin(Vue$3);
  stateMixin(Vue$3);
  eventsMixin(Vue$3);
  lifecycleMixin(Vue$3);
  renderMixin(Vue$3);

  /*  */

  function initUse(Vue) {
    Vue.use = function (plugin) {
      var installedPlugins = this._installedPlugins || (this._installedPlugins = []);
      if (installedPlugins.indexOf(plugin) > -1) {
        return this;
      }

      // additional parameters
      var args = toArray(arguments, 1);
      args.unshift(this);
      if (typeof plugin.install === 'function') {
        plugin.install.apply(plugin, args);
      } else if (typeof plugin === 'function') {
        plugin.apply(null, args);
      }
      installedPlugins.push(plugin);
      return this;
    };
  }

  /*  */

  function initMixin$1(Vue) {
    Vue.mixin = function (mixin) {
      this.options = mergeOptions(this.options, mixin);
      return this;
    };
  }

  /*  */

  function initExtend(Vue) {
    /**
     * Each instance constructor, including Vue, has a unique
     * cid. This enables us to create wrapped "child
     * constructors" for prototypal inheritance and cache them.
     */
    Vue.cid = 0;
    var cid = 1;

    /**
     * Class inheritance
     */
    Vue.extend = function (extendOptions) {
      extendOptions = extendOptions || {};
      var Super = this;
      var SuperId = Super.cid;
      var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
      if (cachedCtors[SuperId]) {
        return cachedCtors[SuperId];
      }

      var name = extendOptions.name || Super.options.name;
      {
        if (!/^[a-zA-Z][\w-]*$/.test(name)) {
          warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');
        }
      }

      var Sub = function VueComponent(options) {
        this._init(options);
      };
      Sub.prototype = Object.create(Super.prototype);
      Sub.prototype.constructor = Sub;
      Sub.cid = cid++;
      Sub.options = mergeOptions(Super.options, extendOptions);
      Sub['super'] = Super;

      // For props and computed properties, we define the proxy getters on
      // the Vue instances at extension time, on the extended prototype. This
      // avoids Object.defineProperty calls for each instance created.
      if (Sub.options.props) {
        initProps$1(Sub);
      }
      if (Sub.options.computed) {
        initComputed$1(Sub);
      }

      // allow further extension/mixin/plugin usage
      Sub.extend = Super.extend;
      Sub.mixin = Super.mixin;
      Sub.use = Super.use;

      // create asset registers, so extended classes
      // can have their private assets too.
      ASSET_TYPES.forEach(function (type) {
        Sub[type] = Super[type];
      });
      // enable recursive self-lookup
      if (name) {
        Sub.options.components[name] = Sub;
      }

      // keep a reference to the super options at extension time.
      // later at instantiation we can check if Super's options have
      // been updated.
      Sub.superOptions = Super.options;
      Sub.extendOptions = extendOptions;
      Sub.sealedOptions = extend({}, Sub.options);

      // cache constructor
      cachedCtors[SuperId] = Sub;
      return Sub;
    };
  }

  function initProps$1(Comp) {
    var props = Comp.options.props;
    for (var key in props) {
      proxy(Comp.prototype, "_props", key);
    }
  }

  function initComputed$1(Comp) {
    var computed = Comp.options.computed;
    for (var key in computed) {
      defineComputed(Comp.prototype, key, computed[key]);
    }
  }

  /*  */

  function initAssetRegisters(Vue) {
    /**
     * Create asset registration methods.
     */
    ASSET_TYPES.forEach(function (type) {
      Vue[type] = function (id, definition) {
        if (!definition) {
          return this.options[type + 's'][id];
        } else {
          /* istanbul ignore if */
          {
            if (type === 'component' && config.isReservedTag(id)) {
              warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);
            }
          }
          if (type === 'component' && isPlainObject(definition)) {
            definition.name = definition.name || id;
            definition = this.options._base.extend(definition);
          }
          if (type === 'directive' && typeof definition === 'function') {
            definition = { bind: definition, update: definition };
          }
          this.options[type + 's'][id] = definition;
          return definition;
        }
      };
    });
  }

  /*  */

  var patternTypes = [String, RegExp, Array];

  function getComponentName(opts) {
    return opts && (opts.Ctor.options.name || opts.tag);
  }

  function matches(pattern, name) {
    if (Array.isArray(pattern)) {
      return pattern.indexOf(name) > -1;
    } else if (typeof pattern === 'string') {
      return pattern.split(',').indexOf(name) > -1;
    } else if (isRegExp(pattern)) {
      return pattern.test(name);
    }
    /* istanbul ignore next */
    return false;
  }

  function pruneCache(cache, current, filter) {
    for (var key in cache) {
      var cachedNode = cache[key];
      if (cachedNode) {
        var name = getComponentName(cachedNode.componentOptions);
        if (name && !filter(name)) {
          if (cachedNode !== current) {
            pruneCacheEntry(cachedNode);
          }
          cache[key] = null;
        }
      }
    }
  }

  function pruneCacheEntry(vnode) {
    if (vnode) {
      vnode.componentInstance.$destroy();
    }
  }

  var KeepAlive = {
    name: 'keep-alive',
    abstract: true,

    props: {
      include: patternTypes,
      exclude: patternTypes
    },

    created: function created() {
      this.cache = Object.create(null);
    },

    destroyed: function destroyed() {
      var this$1 = this;

      for (var key in this$1.cache) {
        pruneCacheEntry(this$1.cache[key]);
      }
    },

    watch: {
      include: function include(val) {
        pruneCache(this.cache, this._vnode, function (name) {
          return matches(val, name);
        });
      },
      exclude: function exclude(val) {
        pruneCache(this.cache, this._vnode, function (name) {
          return !matches(val, name);
        });
      }
    },

    render: function render() {
      var vnode = getFirstComponentChild(this.$slots.default);
      var componentOptions = vnode && vnode.componentOptions;
      if (componentOptions) {
        // check pattern
        var name = getComponentName(componentOptions);
        if (name && (this.include && !matches(this.include, name) || this.exclude && matches(this.exclude, name))) {
          return vnode;
        }
        var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;
        if (this.cache[key]) {
          vnode.componentInstance = this.cache[key].componentInstance;
        } else {
          this.cache[key] = vnode;
        }
        vnode.data.keepAlive = true;
      }
      return vnode;
    }
  };

  var builtInComponents = {
    KeepAlive: KeepAlive
  };

  /*  */

  function initGlobalAPI(Vue) {
    // config
    var configDef = {};
    configDef.get = function () {
      return config;
    };
    {
      configDef.set = function () {
        warn('Do not replace the Vue.config object, set individual fields instead.');
      };
    }
    Object.defineProperty(Vue, 'config', configDef);

    // exposed util methods.
    // NOTE: these are not considered part of the public API - avoid relying on
    // them unless you are aware of the risk.
    Vue.util = {
      warn: warn,
      extend: extend,
      mergeOptions: mergeOptions,
      defineReactive: defineReactive$$1
    };

    Vue.set = set;
    Vue.delete = del;
    Vue.nextTick = nextTick;

    Vue.options = Object.create(null);
    ASSET_TYPES.forEach(function (type) {
      Vue.options[type + 's'] = Object.create(null);
    });

    // this is used to identify the "base" constructor to extend all plain-object
    // components with in Weex's multi-instance scenarios.
    Vue.options._base = Vue;

    extend(Vue.options.components, builtInComponents);

    initUse(Vue);
    initMixin$1(Vue);
    initExtend(Vue);
    initAssetRegisters(Vue);
  }

  initGlobalAPI(Vue$3);

  Object.defineProperty(Vue$3.prototype, '$isServer', {
    get: isServerRendering
  });

  Object.defineProperty(Vue$3.prototype, '$ssrContext', {
    get: function get() {
      /* istanbul ignore next */
      return this.$vnode && this.$vnode.ssrContext;
    }
  });

  Vue$3.version = '2.4.4';

  /*  */

  // these are reserved for web because they are directly compiled away
  // during template compilation
  var isReservedAttr = makeMap('style,class');

  // attributes that should be using props for binding
  var acceptValue = makeMap('input,textarea,option,select,progress');
  var mustUseProp = function mustUseProp(tag, type, attr) {
    return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
  };

  var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

  var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');

  var xlinkNS = 'http://www.w3.org/1999/xlink';

  var isXlink = function isXlink(name) {
    return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
  };

  var getXlinkProp = function getXlinkProp(name) {
    return isXlink(name) ? name.slice(6, name.length) : '';
  };

  var isFalsyAttrValue = function isFalsyAttrValue(val) {
    return val == null || val === false;
  };

  /*  */

  function genClassForVnode(vnode) {
    var data = vnode.data;
    var parentNode = vnode;
    var childNode = vnode;
    while (isDef(childNode.componentInstance)) {
      childNode = childNode.componentInstance._vnode;
      if (childNode.data) {
        data = mergeClassData(childNode.data, data);
      }
    }
    while (isDef(parentNode = parentNode.parent)) {
      if (parentNode.data) {
        data = mergeClassData(data, parentNode.data);
      }
    }
    return renderClass(data.staticClass, data.class);
  }

  function mergeClassData(child, parent) {
    return {
      staticClass: concat(child.staticClass, parent.staticClass),
      class: isDef(child.class) ? [child.class, parent.class] : parent.class
    };
  }

  function renderClass(staticClass, dynamicClass) {
    if (isDef(staticClass) || isDef(dynamicClass)) {
      return concat(staticClass, stringifyClass(dynamicClass));
    }
    /* istanbul ignore next */
    return '';
  }

  function concat(a, b) {
    return a ? b ? a + ' ' + b : a : b || '';
  }

  function stringifyClass(value) {
    if (Array.isArray(value)) {
      return stringifyArray(value);
    }
    if (isObject(value)) {
      return stringifyObject(value);
    }
    if (typeof value === 'string') {
      return value;
    }
    /* istanbul ignore next */
    return '';
  }

  function stringifyArray(value) {
    var res = '';
    var stringified;
    for (var i = 0, l = value.length; i < l; i++) {
      if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
        if (res) {
          res += ' ';
        }
        res += stringified;
      }
    }
    return res;
  }

  function stringifyObject(value) {
    var res = '';
    for (var key in value) {
      if (value[key]) {
        if (res) {
          res += ' ';
        }
        res += key;
      }
    }
    return res;
  }

  /*  */

  var namespaceMap = {
    svg: 'http://www.w3.org/2000/svg',
    math: 'http://www.w3.org/1998/Math/MathML'
  };

  var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot');

  // this map is intentionally selective, only covering SVG elements that may
  // contain child elements.
  var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

  var isPreTag = function isPreTag(tag) {
    return tag === 'pre';
  };

  var isReservedTag = function isReservedTag(tag) {
    return isHTMLTag(tag) || isSVG(tag);
  };

  function getTagNamespace(tag) {
    if (isSVG(tag)) {
      return 'svg';
    }
    // basic support for MathML
    // note it doesn't support other MathML elements being component roots
    if (tag === 'math') {
      return 'math';
    }
  }

  var unknownElementCache = Object.create(null);
  function isUnknownElement(tag) {
    /* istanbul ignore if */
    if (!inBrowser) {
      return true;
    }
    if (isReservedTag(tag)) {
      return false;
    }
    tag = tag.toLowerCase();
    /* istanbul ignore if */
    if (unknownElementCache[tag] != null) {
      return unknownElementCache[tag];
    }
    var el = document.createElement(tag);
    if (tag.indexOf('-') > -1) {
      // http://stackoverflow.com/a/28210364/1070244
      return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
    } else {
      return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
    }
  }

  var isTextInputType = makeMap('text,number,password,search,email,tel,url');

  /*  */

  /**
   * Query an element selector if it's not an element already.
   */
  function query(el) {
    if (typeof el === 'string') {
      var selected = document.querySelector(el);
      if (!selected) {
        "development" !== 'production' && warn('Cannot find element: ' + el);
        return document.createElement('div');
      }
      return selected;
    } else {
      return el;
    }
  }

  /*  */

  function createElement$1(tagName, vnode) {
    var elm = document.createElement(tagName);
    if (tagName !== 'select') {
      return elm;
    }
    // false or null will remove the attribute but undefined will not
    if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
      elm.setAttribute('multiple', 'multiple');
    }
    return elm;
  }

  function createElementNS(namespace, tagName) {
    return document.createElementNS(namespaceMap[namespace], tagName);
  }

  function createTextNode(text) {
    return document.createTextNode(text);
  }

  function createComment(text) {
    return document.createComment(text);
  }

  function insertBefore(parentNode, newNode, referenceNode) {
    parentNode.insertBefore(newNode, referenceNode);
  }

  function removeChild(node, child) {
    node.removeChild(child);
  }

  function appendChild(node, child) {
    node.appendChild(child);
  }

  function parentNode(node) {
    return node.parentNode;
  }

  function nextSibling(node) {
    return node.nextSibling;
  }

  function tagName(node) {
    return node.tagName;
  }

  function setTextContent(node, text) {
    node.textContent = text;
  }

  function setAttribute(node, key, val) {
    node.setAttribute(key, val);
  }

  var nodeOps = Object.freeze({
    createElement: createElement$1,
    createElementNS: createElementNS,
    createTextNode: createTextNode,
    createComment: createComment,
    insertBefore: insertBefore,
    removeChild: removeChild,
    appendChild: appendChild,
    parentNode: parentNode,
    nextSibling: nextSibling,
    tagName: tagName,
    setTextContent: setTextContent,
    setAttribute: setAttribute
  });

  /*  */

  var ref = {
    create: function create(_, vnode) {
      registerRef(vnode);
    },
    update: function update(oldVnode, vnode) {
      if (oldVnode.data.ref !== vnode.data.ref) {
        registerRef(oldVnode, true);
        registerRef(vnode);
      }
    },
    destroy: function destroy(vnode) {
      registerRef(vnode, true);
    }
  };

  function registerRef(vnode, isRemoval) {
    var key = vnode.data.ref;
    if (!key) {
      return;
    }

    var vm = vnode.context;
    var ref = vnode.componentInstance || vnode.elm;
    var refs = vm.$refs;
    if (isRemoval) {
      if (Array.isArray(refs[key])) {
        remove(refs[key], ref);
      } else if (refs[key] === ref) {
        refs[key] = undefined;
      }
    } else {
      if (vnode.data.refInFor) {
        if (!Array.isArray(refs[key])) {
          refs[key] = [ref];
        } else if (refs[key].indexOf(ref) < 0) {
          // $flow-disable-line
          refs[key].push(ref);
        }
      } else {
        refs[key] = ref;
      }
    }
  }

  /**
   * Virtual DOM patching algorithm based on Snabbdom by
   * Simon Friis Vindum (@paldepind)
   * Licensed under the MIT License
   * https://github.com/paldepind/snabbdom/blob/master/LICENSE
   *
   * modified by Evan You (@yyx990803)
   *
   * Not type-checking this because this file is perf-critical and the cost
   * of making flow understand it is not worth it.
   */

  var emptyNode = new VNode('', {}, []);

  var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

  function sameVnode(a, b) {
    return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
  }

  function sameInputType(a, b) {
    if (a.tag !== 'input') {
      return true;
    }
    var i;
    var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
    var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
    return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
  }

  function createKeyToOldIdx(children, beginIdx, endIdx) {
    var i, key;
    var map = {};
    for (i = beginIdx; i <= endIdx; ++i) {
      key = children[i].key;
      if (isDef(key)) {
        map[key] = i;
      }
    }
    return map;
  }

  function createPatchFunction(backend) {
    var i, j;
    var cbs = {};

    var modules = backend.modules;
    var nodeOps = backend.nodeOps;

    for (i = 0; i < hooks.length; ++i) {
      cbs[hooks[i]] = [];
      for (j = 0; j < modules.length; ++j) {
        if (isDef(modules[j][hooks[i]])) {
          cbs[hooks[i]].push(modules[j][hooks[i]]);
        }
      }
    }

    function emptyNodeAt(elm) {
      return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
    }

    function createRmCb(childElm, listeners) {
      function remove$$1() {
        if (--remove$$1.listeners === 0) {
          removeNode(childElm);
        }
      }
      remove$$1.listeners = listeners;
      return remove$$1;
    }

    function removeNode(el) {
      var parent = nodeOps.parentNode(el);
      // element may have already been removed due to v-html / v-text
      if (isDef(parent)) {
        nodeOps.removeChild(parent, el);
      }
    }

    var inPre = 0;
    function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested) {
      vnode.isRootInsert = !nested; // for transition enter check
      if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
        return;
      }

      var data = vnode.data;
      var children = vnode.children;
      var tag = vnode.tag;
      if (isDef(tag)) {
        {
          if (data && data.pre) {
            inPre++;
          }
          if (!inPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) && config.isUnknownElement(tag)) {
            warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
          }
        }
        vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
        setScope(vnode);

        /* istanbul ignore if */
        {
          createChildren(vnode, children, insertedVnodeQueue);
          if (isDef(data)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
          }
          insert(parentElm, vnode.elm, refElm);
        }

        if ("development" !== 'production' && data && data.pre) {
          inPre--;
        }
      } else if (isTrue(vnode.isComment)) {
        vnode.elm = nodeOps.createComment(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      } else {
        vnode.elm = nodeOps.createTextNode(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      }
    }

    function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
      var i = vnode.data;
      if (isDef(i)) {
        var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
        if (isDef(i = i.hook) && isDef(i = i.init)) {
          i(vnode, false /* hydrating */, parentElm, refElm);
        }
        // after calling the init hook, if the vnode is a child component
        // it should've created a child instance and mounted it. the child
        // component also has set the placeholder vnode's elm.
        // in that case we can just return the element and be done.
        if (isDef(vnode.componentInstance)) {
          initComponent(vnode, insertedVnodeQueue);
          if (isTrue(isReactivated)) {
            reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
          }
          return true;
        }
      }
    }

    function initComponent(vnode, insertedVnodeQueue) {
      if (isDef(vnode.data.pendingInsert)) {
        insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
        vnode.data.pendingInsert = null;
      }
      vnode.elm = vnode.componentInstance.$el;
      if (isPatchable(vnode)) {
        invokeCreateHooks(vnode, insertedVnodeQueue);
        setScope(vnode);
      } else {
        // empty component root.
        // skip all element-related modules except for ref (#3455)
        registerRef(vnode);
        // make sure to invoke the insert hook
        insertedVnodeQueue.push(vnode);
      }
    }

    function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
      var i;
      // hack for #4339: a reactivated component with inner transition
      // does not trigger because the inner node's created hooks are not called
      // again. It's not ideal to involve module-specific logic in here but
      // there doesn't seem to be a better way to do it.
      var innerNode = vnode;
      while (innerNode.componentInstance) {
        innerNode = innerNode.componentInstance._vnode;
        if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
          for (i = 0; i < cbs.activate.length; ++i) {
            cbs.activate[i](emptyNode, innerNode);
          }
          insertedVnodeQueue.push(innerNode);
          break;
        }
      }
      // unlike a newly created component,
      // a reactivated keep-alive component doesn't insert itself
      insert(parentElm, vnode.elm, refElm);
    }

    function insert(parent, elm, ref$$1) {
      if (isDef(parent)) {
        if (isDef(ref$$1)) {
          if (ref$$1.parentNode === parent) {
            nodeOps.insertBefore(parent, elm, ref$$1);
          }
        } else {
          nodeOps.appendChild(parent, elm);
        }
      }
    }

    function createChildren(vnode, children, insertedVnodeQueue) {
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; ++i) {
          createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
        }
      } else if (isPrimitive(vnode.text)) {
        nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));
      }
    }

    function isPatchable(vnode) {
      while (vnode.componentInstance) {
        vnode = vnode.componentInstance._vnode;
      }
      return isDef(vnode.tag);
    }

    function invokeCreateHooks(vnode, insertedVnodeQueue) {
      for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
        cbs.create[i$1](emptyNode, vnode);
      }
      i = vnode.data.hook; // Reuse variable
      if (isDef(i)) {
        if (isDef(i.create)) {
          i.create(emptyNode, vnode);
        }
        if (isDef(i.insert)) {
          insertedVnodeQueue.push(vnode);
        }
      }
    }

    // set scope id attribute for scoped CSS.
    // this is implemented as a special case to avoid the overhead
    // of going through the normal attribute patching process.
    function setScope(vnode) {
      var i;
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setAttribute(vnode.elm, i, '');
        }
        ancestor = ancestor.parent;
      }
      // for slot content they should also get the scopeId from the host instance.
      if (isDef(i = activeInstance) && i !== vnode.context && isDef(i = i.$options._scopeId)) {
        nodeOps.setAttribute(vnode.elm, i, '');
      }
    }

    function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
      for (; startIdx <= endIdx; ++startIdx) {
        createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
      }
    }

    function invokeDestroyHook(vnode) {
      var i, j;
      var data = vnode.data;
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.destroy)) {
          i(vnode);
        }
        for (i = 0; i < cbs.destroy.length; ++i) {
          cbs.destroy[i](vnode);
        }
      }
      if (isDef(i = vnode.children)) {
        for (j = 0; j < vnode.children.length; ++j) {
          invokeDestroyHook(vnode.children[j]);
        }
      }
    }

    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
      for (; startIdx <= endIdx; ++startIdx) {
        var ch = vnodes[startIdx];
        if (isDef(ch)) {
          if (isDef(ch.tag)) {
            removeAndInvokeRemoveHook(ch);
            invokeDestroyHook(ch);
          } else {
            // Text node
            removeNode(ch.elm);
          }
        }
      }
    }

    function removeAndInvokeRemoveHook(vnode, rm) {
      if (isDef(rm) || isDef(vnode.data)) {
        var i;
        var listeners = cbs.remove.length + 1;
        if (isDef(rm)) {
          // we have a recursively passed down rm callback
          // increase the listeners count
          rm.listeners += listeners;
        } else {
          // directly removing
          rm = createRmCb(vnode.elm, listeners);
        }
        // recursively invoke hooks on child component root node
        if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
          removeAndInvokeRemoveHook(i, rm);
        }
        for (i = 0; i < cbs.remove.length; ++i) {
          cbs.remove[i](vnode, rm);
        }
        if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
          i(vnode, rm);
        } else {
          rm();
        }
      } else {
        removeNode(vnode.elm);
      }
    }

    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
      var oldStartIdx = 0;
      var newStartIdx = 0;
      var oldEndIdx = oldCh.length - 1;
      var oldStartVnode = oldCh[0];
      var oldEndVnode = oldCh[oldEndIdx];
      var newEndIdx = newCh.length - 1;
      var newStartVnode = newCh[0];
      var newEndVnode = newCh[newEndIdx];
      var oldKeyToIdx, idxInOld, elmToMove, refElm;

      // removeOnly is a special flag used only by <transition-group>
      // to ensure removed elements stay in correct relative positions
      // during leaving transitions
      var canMove = !removeOnly;

      while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
        if (isUndef(oldStartVnode)) {
          oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
        } else if (isUndef(oldEndVnode)) {
          oldEndVnode = oldCh[--oldEndIdx];
        } else if (sameVnode(oldStartVnode, newStartVnode)) {
          patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
          oldStartVnode = oldCh[++oldStartIdx];
          newStartVnode = newCh[++newStartIdx];
        } else if (sameVnode(oldEndVnode, newEndVnode)) {
          patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
          oldEndVnode = oldCh[--oldEndIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldStartVnode, newEndVnode)) {
          // Vnode moved right
          patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
          canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
          oldStartVnode = oldCh[++oldStartIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldEndVnode, newStartVnode)) {
          // Vnode moved left
          patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
          canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
          oldEndVnode = oldCh[--oldEndIdx];
          newStartVnode = newCh[++newStartIdx];
        } else {
          if (isUndef(oldKeyToIdx)) {
            oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
          }
          idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
          if (isUndef(idxInOld)) {
            // New element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
          } else {
            elmToMove = oldCh[idxInOld];
            /* istanbul ignore if */
            if ("development" !== 'production' && !elmToMove) {
              warn('It seems there are duplicate keys that is causing an update error. ' + 'Make sure each v-for item has a unique key.');
            }
            if (sameVnode(elmToMove, newStartVnode)) {
              patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
              oldCh[idxInOld] = undefined;
              canMove && nodeOps.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);
            } else {
              // same key but different element. treat as new element
              createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
            }
          }
          newStartVnode = newCh[++newStartIdx];
        }
      }
      if (oldStartIdx > oldEndIdx) {
        refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
      } else if (newStartIdx > newEndIdx) {
        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
      }
    }

    function findIdxInOld(node, oldCh, start, end) {
      for (var i = start; i < end; i++) {
        var c = oldCh[i];
        if (isDef(c) && sameVnode(node, c)) {
          return i;
        }
      }
    }

    function patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {
      if (oldVnode === vnode) {
        return;
      }

      var elm = vnode.elm = oldVnode.elm;

      if (isTrue(oldVnode.isAsyncPlaceholder)) {
        if (isDef(vnode.asyncFactory.resolved)) {
          hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
        } else {
          vnode.isAsyncPlaceholder = true;
        }
        return;
      }

      // reuse element for static trees.
      // note we only do this if the vnode is cloned -
      // if the new node is not cloned it means the render functions have been
      // reset by the hot-reload-api and we need to do a proper re-render.
      if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
        vnode.componentInstance = oldVnode.componentInstance;
        return;
      }

      var i;
      var data = vnode.data;
      if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
        i(oldVnode, vnode);
      }

      var oldCh = oldVnode.children;
      var ch = vnode.children;
      if (isDef(data) && isPatchable(vnode)) {
        for (i = 0; i < cbs.update.length; ++i) {
          cbs.update[i](oldVnode, vnode);
        }
        if (isDef(i = data.hook) && isDef(i = i.update)) {
          i(oldVnode, vnode);
        }
      }
      if (isUndef(vnode.text)) {
        if (isDef(oldCh) && isDef(ch)) {
          if (oldCh !== ch) {
            updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
          }
        } else if (isDef(ch)) {
          if (isDef(oldVnode.text)) {
            nodeOps.setTextContent(elm, '');
          }
          addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
        } else if (isDef(oldCh)) {
          removeVnodes(elm, oldCh, 0, oldCh.length - 1);
        } else if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }
      } else if (oldVnode.text !== vnode.text) {
        nodeOps.setTextContent(elm, vnode.text);
      }
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
          i(oldVnode, vnode);
        }
      }
    }

    function invokeInsertHook(vnode, queue, initial) {
      // delay insert hooks for component root nodes, invoke them after the
      // element is really inserted
      if (isTrue(initial) && isDef(vnode.parent)) {
        vnode.parent.data.pendingInsert = queue;
      } else {
        for (var i = 0; i < queue.length; ++i) {
          queue[i].data.hook.insert(queue[i]);
        }
      }
    }

    var bailed = false;
    // list of modules that can skip create hook during hydration because they
    // are already rendered on the client or has no need for initialization
    var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');

    // Note: this is a browser-only function so we can assume elms are DOM nodes.
    function hydrate(elm, vnode, insertedVnodeQueue) {
      if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
        vnode.elm = elm;
        vnode.isAsyncPlaceholder = true;
        return true;
      }
      {
        if (!assertNodeMatch(elm, vnode)) {
          return false;
        }
      }
      vnode.elm = elm;
      var tag = vnode.tag;
      var data = vnode.data;
      var children = vnode.children;
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.init)) {
          i(vnode, true /* hydrating */);
        }
        if (isDef(i = vnode.componentInstance)) {
          // child component. it should have hydrated its own tree.
          initComponent(vnode, insertedVnodeQueue);
          return true;
        }
      }
      if (isDef(tag)) {
        if (isDef(children)) {
          // empty element, allow client to pick up and populate children
          if (!elm.hasChildNodes()) {
            createChildren(vnode, children, insertedVnodeQueue);
          } else {
            // v-html and domProps: innerHTML
            if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
              if (i !== elm.innerHTML) {
                /* istanbul ignore if */
                if ("development" !== 'production' && typeof console !== 'undefined' && !bailed) {
                  bailed = true;
                  console.warn('Parent: ', elm);
                  console.warn('server innerHTML: ', i);
                  console.warn('client innerHTML: ', elm.innerHTML);
                }
                return false;
              }
            } else {
              // iterate and compare children lists
              var childrenMatch = true;
              var childNode = elm.firstChild;
              for (var i$1 = 0; i$1 < children.length; i$1++) {
                if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {
                  childrenMatch = false;
                  break;
                }
                childNode = childNode.nextSibling;
              }
              // if childNode is not null, it means the actual childNodes list is
              // longer than the virtual children list.
              if (!childrenMatch || childNode) {
                /* istanbul ignore if */
                if ("development" !== 'production' && typeof console !== 'undefined' && !bailed) {
                  bailed = true;
                  console.warn('Parent: ', elm);
                  console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
                }
                return false;
              }
            }
          }
        }
        if (isDef(data)) {
          for (var key in data) {
            if (!isRenderedModule(key)) {
              invokeCreateHooks(vnode, insertedVnodeQueue);
              break;
            }
          }
        }
      } else if (elm.data !== vnode.text) {
        elm.data = vnode.text;
      }
      return true;
    }

    function assertNodeMatch(node, vnode) {
      if (isDef(vnode.tag)) {
        return vnode.tag.indexOf('vue-component') === 0 || vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
      } else {
        return node.nodeType === (vnode.isComment ? 8 : 3);
      }
    }

    return function patch(oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
      if (isUndef(vnode)) {
        if (isDef(oldVnode)) {
          invokeDestroyHook(oldVnode);
        }
        return;
      }

      var isInitialPatch = false;
      var insertedVnodeQueue = [];

      if (isUndef(oldVnode)) {
        // empty mount (likely as component), create new root element
        isInitialPatch = true;
        createElm(vnode, insertedVnodeQueue, parentElm, refElm);
      } else {
        var isRealElement = isDef(oldVnode.nodeType);
        if (!isRealElement && sameVnode(oldVnode, vnode)) {
          // patch existing root node
          patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
        } else {
          if (isRealElement) {
            // mounting to a real element
            // check if this is server-rendered content and if we can perform
            // a successful hydration.
            if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
              oldVnode.removeAttribute(SSR_ATTR);
              hydrating = true;
            }
            if (isTrue(hydrating)) {
              if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                invokeInsertHook(vnode, insertedVnodeQueue, true);
                return oldVnode;
              } else {
                warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
              }
            }
            // either not server-rendered, or hydration failed.
            // create an empty node and replace it
            oldVnode = emptyNodeAt(oldVnode);
          }
          // replacing existing element
          var oldElm = oldVnode.elm;
          var parentElm$1 = nodeOps.parentNode(oldElm);
          createElm(vnode, insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm$1, nodeOps.nextSibling(oldElm));

          if (isDef(vnode.parent)) {
            // component root element replaced.
            // update parent placeholder node element, recursively
            var ancestor = vnode.parent;
            var patchable = isPatchable(vnode);
            while (ancestor) {
              for (var i = 0; i < cbs.destroy.length; ++i) {
                cbs.destroy[i](ancestor);
              }
              ancestor.elm = vnode.elm;
              if (patchable) {
                for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                  cbs.create[i$1](emptyNode, ancestor);
                }
                // #6513
                // invoke insert hooks that may have been merged by create hooks.
                // e.g. for directives that uses the "inserted" hook.
                var insert = ancestor.data.hook.insert;
                if (insert.merged) {
                  // start at index 1 to avoid re-invoking component mounted hook
                  for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                    insert.fns[i$2]();
                  }
                }
              }
              ancestor = ancestor.parent;
            }
          }

          if (isDef(parentElm$1)) {
            removeVnodes(parentElm$1, [oldVnode], 0, 0);
          } else if (isDef(oldVnode.tag)) {
            invokeDestroyHook(oldVnode);
          }
        }
      }

      invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
      return vnode.elm;
    };
  }

  /*  */

  var directives = {
    create: updateDirectives,
    update: updateDirectives,
    destroy: function unbindDirectives(vnode) {
      updateDirectives(vnode, emptyNode);
    }
  };

  function updateDirectives(oldVnode, vnode) {
    if (oldVnode.data.directives || vnode.data.directives) {
      _update(oldVnode, vnode);
    }
  }

  function _update(oldVnode, vnode) {
    var isCreate = oldVnode === emptyNode;
    var isDestroy = vnode === emptyNode;
    var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
    var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

    var dirsWithInsert = [];
    var dirsWithPostpatch = [];

    var key, oldDir, dir;
    for (key in newDirs) {
      oldDir = oldDirs[key];
      dir = newDirs[key];
      if (!oldDir) {
        // new directive, bind
        callHook$1(dir, 'bind', vnode, oldVnode);
        if (dir.def && dir.def.inserted) {
          dirsWithInsert.push(dir);
        }
      } else {
        // existing directive, update
        dir.oldValue = oldDir.value;
        callHook$1(dir, 'update', vnode, oldVnode);
        if (dir.def && dir.def.componentUpdated) {
          dirsWithPostpatch.push(dir);
        }
      }
    }

    if (dirsWithInsert.length) {
      var callInsert = function callInsert() {
        for (var i = 0; i < dirsWithInsert.length; i++) {
          callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
        }
      };
      if (isCreate) {
        mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);
      } else {
        callInsert();
      }
    }

    if (dirsWithPostpatch.length) {
      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {
        for (var i = 0; i < dirsWithPostpatch.length; i++) {
          callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
        }
      });
    }

    if (!isCreate) {
      for (key in oldDirs) {
        if (!newDirs[key]) {
          // no longer present, unbind
          callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
        }
      }
    }
  }

  var emptyModifiers = Object.create(null);

  function normalizeDirectives$1(dirs, vm) {
    var res = Object.create(null);
    if (!dirs) {
      return res;
    }
    var i, dir;
    for (i = 0; i < dirs.length; i++) {
      dir = dirs[i];
      if (!dir.modifiers) {
        dir.modifiers = emptyModifiers;
      }
      res[getRawDirName(dir)] = dir;
      dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
    }
    return res;
  }

  function getRawDirName(dir) {
    return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
  }

  function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
    var fn = dir.def && dir.def[hook];
    if (fn) {
      try {
        fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
      } catch (e) {
        handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
      }
    }
  }

  var baseModules = [ref, directives];

  /*  */

  function updateAttrs(oldVnode, vnode) {
    var opts = vnode.componentOptions;
    if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
      return;
    }
    if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
      return;
    }
    var key, cur, old;
    var elm = vnode.elm;
    var oldAttrs = oldVnode.data.attrs || {};
    var attrs = vnode.data.attrs || {};
    // clone observed objects, as the user probably wants to mutate it
    if (isDef(attrs.__ob__)) {
      attrs = vnode.data.attrs = extend({}, attrs);
    }

    for (key in attrs) {
      cur = attrs[key];
      old = oldAttrs[key];
      if (old !== cur) {
        setAttr(elm, key, cur);
      }
    }
    // #4391: in IE9, setting type can reset value for input[type=radio]
    /* istanbul ignore if */
    if (isIE9 && attrs.value !== oldAttrs.value) {
      setAttr(elm, 'value', attrs.value);
    }
    for (key in oldAttrs) {
      if (isUndef(attrs[key])) {
        if (isXlink(key)) {
          elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
        } else if (!isEnumeratedAttr(key)) {
          elm.removeAttribute(key);
        }
      }
    }
  }

  function setAttr(el, key, value) {
    if (isBooleanAttr(key)) {
      // set attribute for blank value
      // e.g. <option disabled>Select one</option>
      if (isFalsyAttrValue(value)) {
        el.removeAttribute(key);
      } else {
        // technically allowfullscreen is a boolean attribute for <iframe>,
        // but Flash expects a value of "true" when used on <embed> tag
        value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
        el.setAttribute(key, value);
      }
    } else if (isEnumeratedAttr(key)) {
      el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
    } else if (isXlink(key)) {
      if (isFalsyAttrValue(value)) {
        el.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else {
        el.setAttributeNS(xlinkNS, key, value);
      }
    } else {
      if (isFalsyAttrValue(value)) {
        el.removeAttribute(key);
      } else {
        el.setAttribute(key, value);
      }
    }
  }

  var attrs = {
    create: updateAttrs,
    update: updateAttrs
  };

  /*  */

  function updateClass(oldVnode, vnode) {
    var el = vnode.elm;
    var data = vnode.data;
    var oldData = oldVnode.data;
    if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
      return;
    }

    var cls = genClassForVnode(vnode);

    // handle transition classes
    var transitionClass = el._transitionClasses;
    if (isDef(transitionClass)) {
      cls = concat(cls, stringifyClass(transitionClass));
    }

    // set the class
    if (cls !== el._prevClass) {
      el.setAttribute('class', cls);
      el._prevClass = cls;
    }
  }

  var klass = {
    create: updateClass,
    update: updateClass
  };

  /*  */

  var validDivisionCharRE = /[\w).+\-_$\]]/;

  function parseFilters(exp) {
    var inSingle = false;
    var inDouble = false;
    var inTemplateString = false;
    var inRegex = false;
    var curly = 0;
    var square = 0;
    var paren = 0;
    var lastFilterIndex = 0;
    var c, prev, i, expression, filters;

    for (i = 0; i < exp.length; i++) {
      prev = c;
      c = exp.charCodeAt(i);
      if (inSingle) {
        if (c === 0x27 && prev !== 0x5C) {
          inSingle = false;
        }
      } else if (inDouble) {
        if (c === 0x22 && prev !== 0x5C) {
          inDouble = false;
        }
      } else if (inTemplateString) {
        if (c === 0x60 && prev !== 0x5C) {
          inTemplateString = false;
        }
      } else if (inRegex) {
        if (c === 0x2f && prev !== 0x5C) {
          inRegex = false;
        }
      } else if (c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {
        if (expression === undefined) {
          // first filter, end of expression
          lastFilterIndex = i + 1;
          expression = exp.slice(0, i).trim();
        } else {
          pushFilter();
        }
      } else {
        switch (c) {
          case 0x22:
            inDouble = true;break; // "
          case 0x27:
            inSingle = true;break; // '
          case 0x60:
            inTemplateString = true;break; // `
          case 0x28:
            paren++;break; // (
          case 0x29:
            paren--;break; // )
          case 0x5B:
            square++;break; // [
          case 0x5D:
            square--;break; // ]
          case 0x7B:
            curly++;break; // {
          case 0x7D:
            curly--;break; // }
        }
        if (c === 0x2f) {
          // /
          var j = i - 1;
          var p = void 0;
          // find first non-whitespace prev char
          for (; j >= 0; j--) {
            p = exp.charAt(j);
            if (p !== ' ') {
              break;
            }
          }
          if (!p || !validDivisionCharRE.test(p)) {
            inRegex = true;
          }
        }
      }
    }

    if (expression === undefined) {
      expression = exp.slice(0, i).trim();
    } else if (lastFilterIndex !== 0) {
      pushFilter();
    }

    function pushFilter() {
      (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
      lastFilterIndex = i + 1;
    }

    if (filters) {
      for (i = 0; i < filters.length; i++) {
        expression = wrapFilter(expression, filters[i]);
      }
    }

    return expression;
  }

  function wrapFilter(exp, filter) {
    var i = filter.indexOf('(');
    if (i < 0) {
      // _f: resolveFilter
      return "_f(\"" + filter + "\")(" + exp + ")";
    } else {
      var name = filter.slice(0, i);
      var args = filter.slice(i + 1);
      return "_f(\"" + name + "\")(" + exp + "," + args;
    }
  }

  /*  */

  function baseWarn(msg) {
    console.error("[Vue compiler]: " + msg);
  }

  function pluckModuleFunction(modules, key) {
    return modules ? modules.map(function (m) {
      return m[key];
    }).filter(function (_) {
      return _;
    }) : [];
  }

  function addProp(el, name, value) {
    (el.props || (el.props = [])).push({ name: name, value: value });
  }

  function addAttr(el, name, value) {
    (el.attrs || (el.attrs = [])).push({ name: name, value: value });
  }

  function addDirective(el, name, rawName, value, arg, modifiers) {
    (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });
  }

  function addHandler(el, name, value, modifiers, important, warn) {
    // warn prevent and passive modifier
    /* istanbul ignore if */
    if ("development" !== 'production' && warn && modifiers && modifiers.prevent && modifiers.passive) {
      warn('passive and prevent can\'t be used together. ' + 'Passive handler can\'t prevent default event.');
    }
    // check capture modifier
    if (modifiers && modifiers.capture) {
      delete modifiers.capture;
      name = '!' + name; // mark the event as captured
    }
    if (modifiers && modifiers.once) {
      delete modifiers.once;
      name = '~' + name; // mark the event as once
    }
    /* istanbul ignore if */
    if (modifiers && modifiers.passive) {
      delete modifiers.passive;
      name = '&' + name; // mark the event as passive
    }
    var events;
    if (modifiers && modifiers.native) {
      delete modifiers.native;
      events = el.nativeEvents || (el.nativeEvents = {});
    } else {
      events = el.events || (el.events = {});
    }
    var newHandler = { value: value, modifiers: modifiers };
    var handlers = events[name];
    /* istanbul ignore if */
    if (Array.isArray(handlers)) {
      important ? handlers.unshift(newHandler) : handlers.push(newHandler);
    } else if (handlers) {
      events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
    } else {
      events[name] = newHandler;
    }
  }

  function getBindingAttr(el, name, getStatic) {
    var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);
    if (dynamicValue != null) {
      return parseFilters(dynamicValue);
    } else if (getStatic !== false) {
      var staticValue = getAndRemoveAttr(el, name);
      if (staticValue != null) {
        return JSON.stringify(staticValue);
      }
    }
  }

  function getAndRemoveAttr(el, name) {
    var val;
    if ((val = el.attrsMap[name]) != null) {
      var list = el.attrsList;
      for (var i = 0, l = list.length; i < l; i++) {
        if (list[i].name === name) {
          list.splice(i, 1);
          break;
        }
      }
    }
    return val;
  }

  /*  */

  /**
   * Cross-platform code generation for component v-model
   */
  function genComponentModel(el, value, modifiers) {
    var ref = modifiers || {};
    var number = ref.number;
    var trim = ref.trim;

    var baseValueExpression = '$$v';
    var valueExpression = baseValueExpression;
    if (trim) {
      valueExpression = "(typeof " + baseValueExpression + " === 'string'" + "? " + baseValueExpression + ".trim()" + ": " + baseValueExpression + ")";
    }
    if (number) {
      valueExpression = "_n(" + valueExpression + ")";
    }
    var assignment = genAssignmentCode(value, valueExpression);

    el.model = {
      value: "(" + value + ")",
      expression: "\"" + value + "\"",
      callback: "function (" + baseValueExpression + ") {" + assignment + "}"
    };
  }

  /**
   * Cross-platform codegen helper for generating v-model value assignment code.
   */
  function genAssignmentCode(value, assignment) {
    var modelRs = parseModel(value);
    if (modelRs.idx === null) {
      return value + "=" + assignment;
    } else {
      return "$set(" + modelRs.exp + ", " + modelRs.idx + ", " + assignment + ")";
    }
  }

  /**
   * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)
   *
   * for loop possible cases:
   *
   * - test
   * - test[idx]
   * - test[test1[idx]]
   * - test["a"][idx]
   * - xxx.test[a[a].test1[idx]]
   * - test.xxx.a["asa"][test1[idx]]
   *
   */

  var len;
  var str;
  var chr;
  var index$1;
  var expressionPos;
  var expressionEndPos;

  function parseModel(val) {
    str = val;
    len = str.length;
    index$1 = expressionPos = expressionEndPos = 0;

    if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
      return {
        exp: val,
        idx: null
      };
    }

    while (!eof()) {
      chr = next();
      /* istanbul ignore if */
      if (isStringStart(chr)) {
        parseString(chr);
      } else if (chr === 0x5B) {
        parseBracket(chr);
      }
    }

    return {
      exp: val.substring(0, expressionPos),
      idx: val.substring(expressionPos + 1, expressionEndPos)
    };
  }

  function next() {
    return str.charCodeAt(++index$1);
  }

  function eof() {
    return index$1 >= len;
  }

  function isStringStart(chr) {
    return chr === 0x22 || chr === 0x27;
  }

  function parseBracket(chr) {
    var inBracket = 1;
    expressionPos = index$1;
    while (!eof()) {
      chr = next();
      if (isStringStart(chr)) {
        parseString(chr);
        continue;
      }
      if (chr === 0x5B) {
        inBracket++;
      }
      if (chr === 0x5D) {
        inBracket--;
      }
      if (inBracket === 0) {
        expressionEndPos = index$1;
        break;
      }
    }
  }

  function parseString(chr) {
    var stringQuote = chr;
    while (!eof()) {
      chr = next();
      if (chr === stringQuote) {
        break;
      }
    }
  }

  /*  */

  var warn$1;

  // in some cases, the event used has to be determined at runtime
  // so we used some reserved tokens during compile.
  var RANGE_TOKEN = '__r';
  var CHECKBOX_RADIO_TOKEN = '__c';

  function model(el, dir, _warn) {
    warn$1 = _warn;
    var value = dir.value;
    var modifiers = dir.modifiers;
    var tag = el.tag;
    var type = el.attrsMap.type;

    {
      var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
      if (tag === 'input' && dynamicType) {
        warn$1("<input :type=\"" + dynamicType + "\" v-model=\"" + value + "\">:\n" + "v-model does not support dynamic input types. Use v-if branches instead.");
      }
      // inputs with type="file" are read only and setting the input's
      // value will throw an error.
      if (tag === 'input' && type === 'file') {
        warn$1("<" + el.tag + " v-model=\"" + value + "\" type=\"file\">:\n" + "File inputs are read only. Use a v-on:change listener instead.");
      }
    }

    if (el.component) {
      genComponentModel(el, value, modifiers);
      // component v-model doesn't need extra runtime
      return false;
    } else if (tag === 'select') {
      genSelect(el, value, modifiers);
    } else if (tag === 'input' && type === 'checkbox') {
      genCheckboxModel(el, value, modifiers);
    } else if (tag === 'input' && type === 'radio') {
      genRadioModel(el, value, modifiers);
    } else if (tag === 'input' || tag === 'textarea') {
      genDefaultModel(el, value, modifiers);
    } else if (!config.isReservedTag(tag)) {
      genComponentModel(el, value, modifiers);
      // component v-model doesn't need extra runtime
      return false;
    } else {
      warn$1("<" + el.tag + " v-model=\"" + value + "\">: " + "v-model is not supported on this element type. " + 'If you are working with contenteditable, it\'s recommended to ' + 'wrap a library dedicated for that purpose inside a custom component.');
    }

    // ensure runtime directive metadata
    return true;
  }

  function genCheckboxModel(el, value, modifiers) {
    var number = modifiers && modifiers.number;
    var valueBinding = getBindingAttr(el, 'value') || 'null';
    var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
    var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
    addProp(el, 'checked', "Array.isArray(" + value + ")" + "?_i(" + value + "," + valueBinding + ")>-1" + (trueValueBinding === 'true' ? ":(" + value + ")" : ":_q(" + value + "," + trueValueBinding + ")"));
    addHandler(el, CHECKBOX_RADIO_TOKEN, "var $$a=" + value + "," + '$$el=$event.target,' + "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" + 'if(Array.isArray($$a)){' + "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," + '$$i=_i($$a,$$v);' + "if($$el.checked){$$i<0&&(" + value + "=$$a.concat([$$v]))}" + "else{$$i>-1&&(" + value + "=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}" + "}else{" + genAssignmentCode(value, '$$c') + "}", null, true);
  }

  function genRadioModel(el, value, modifiers) {
    var number = modifiers && modifiers.number;
    var valueBinding = getBindingAttr(el, 'value') || 'null';
    valueBinding = number ? "_n(" + valueBinding + ")" : valueBinding;
    addProp(el, 'checked', "_q(" + value + "," + valueBinding + ")");
    addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);
  }

  function genSelect(el, value, modifiers) {
    var number = modifiers && modifiers.number;
    var selectedVal = "Array.prototype.filter" + ".call($event.target.options,function(o){return o.selected})" + ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" + "return " + (number ? '_n(val)' : 'val') + "})";

    var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
    var code = "var $$selectedVal = " + selectedVal + ";";
    code = code + " " + genAssignmentCode(value, assignment);
    addHandler(el, 'change', code, null, true);
  }

  function genDefaultModel(el, value, modifiers) {
    var type = el.attrsMap.type;
    var ref = modifiers || {};
    var lazy = ref.lazy;
    var number = ref.number;
    var trim = ref.trim;
    var needCompositionGuard = !lazy && type !== 'range';
    var event = lazy ? 'change' : type === 'range' ? RANGE_TOKEN : 'input';

    var valueExpression = '$event.target.value';
    if (trim) {
      valueExpression = "$event.target.value.trim()";
    }
    if (number) {
      valueExpression = "_n(" + valueExpression + ")";
    }

    var code = genAssignmentCode(value, valueExpression);
    if (needCompositionGuard) {
      code = "if($event.target.composing)return;" + code;
    }

    addProp(el, 'value', "(" + value + ")");
    addHandler(el, event, code, null, true);
    if (trim || number) {
      addHandler(el, 'blur', '$forceUpdate()');
    }
  }

  /*  */

  // normalize v-model event tokens that can only be determined at runtime.
  // it's important to place the event as the first in the array because
  // the whole point is ensuring the v-model callback gets called before
  // user-attached handlers.
  function normalizeEvents(on) {
    var event;
    /* istanbul ignore if */
    if (isDef(on[RANGE_TOKEN])) {
      // IE input[type=range] only supports `change` event
      event = isIE ? 'change' : 'input';
      on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
      delete on[RANGE_TOKEN];
    }
    if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
      // Chrome fires microtasks in between click/change, leads to #4521
      event = isChrome ? 'click' : 'change';
      on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);
      delete on[CHECKBOX_RADIO_TOKEN];
    }
  }

  var target$1;

  function add$1(event, _handler, once$$1, capture, passive) {
    if (once$$1) {
      var oldHandler = _handler;
      var _target = target$1; // save current target element in closure
      _handler = function handler(ev) {
        var res = arguments.length === 1 ? oldHandler(ev) : oldHandler.apply(null, arguments);
        if (res !== null) {
          remove$2(event, _handler, capture, _target);
        }
      };
    }
    target$1.addEventListener(event, _handler, supportsPassive ? { capture: capture, passive: passive } : capture);
  }

  function remove$2(event, handler, capture, _target) {
    (_target || target$1).removeEventListener(event, handler, capture);
  }

  function updateDOMListeners(oldVnode, vnode) {
    if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
      return;
    }
    var on = vnode.data.on || {};
    var oldOn = oldVnode.data.on || {};
    target$1 = vnode.elm;
    normalizeEvents(on);
    updateListeners(on, oldOn, add$1, remove$2, vnode.context);
  }

  var events = {
    create: updateDOMListeners,
    update: updateDOMListeners
  };

  /*  */

  function updateDOMProps(oldVnode, vnode) {
    if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
      return;
    }
    var key, cur;
    var elm = vnode.elm;
    var oldProps = oldVnode.data.domProps || {};
    var props = vnode.data.domProps || {};
    // clone observed objects, as the user probably wants to mutate it
    if (isDef(props.__ob__)) {
      props = vnode.data.domProps = extend({}, props);
    }

    for (key in oldProps) {
      if (isUndef(props[key])) {
        elm[key] = '';
      }
    }
    for (key in props) {
      cur = props[key];
      // ignore children if the node has textContent or innerHTML,
      // as these will throw away existing DOM nodes and cause removal errors
      // on subsequent patches (#3360)
      if (key === 'textContent' || key === 'innerHTML') {
        if (vnode.children) {
          vnode.children.length = 0;
        }
        if (cur === oldProps[key]) {
          continue;
        }
      }

      if (key === 'value') {
        // store value as _value as well since
        // non-string values will be stringified
        elm._value = cur;
        // avoid resetting cursor position when value is the same
        var strCur = isUndef(cur) ? '' : String(cur);
        if (shouldUpdateValue(elm, vnode, strCur)) {
          elm.value = strCur;
        }
      } else {
        elm[key] = cur;
      }
    }
  }

  // check platforms/web/util/attrs.js acceptValue


  function shouldUpdateValue(elm, vnode, checkVal) {
    return !elm.composing && (vnode.tag === 'option' || isDirty(elm, checkVal) || isInputChanged(elm, checkVal));
  }

  function isDirty(elm, checkVal) {
    // return true when textbox (.number and .trim) loses focus and its value is
    // not equal to the updated value
    var notInFocus = true;
    // #6157
    // work around IE bug when accessing document.activeElement in an iframe
    try {
      notInFocus = document.activeElement !== elm;
    } catch (e) {}
    return notInFocus && elm.value !== checkVal;
  }

  function isInputChanged(elm, newVal) {
    var value = elm.value;
    var modifiers = elm._vModifiers; // injected by v-model runtime
    if (isDef(modifiers) && modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }
    if (isDef(modifiers) && modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
    return value !== newVal;
  }

  var domProps = {
    create: updateDOMProps,
    update: updateDOMProps
  };

  /*  */

  var parseStyleText = cached(function (cssText) {
    var res = {};
    var listDelimiter = /;(?![^(]*\))/g;
    var propertyDelimiter = /:(.+)/;
    cssText.split(listDelimiter).forEach(function (item) {
      if (item) {
        var tmp = item.split(propertyDelimiter);
        tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
      }
    });
    return res;
  });

  // merge static and dynamic style data on the same vnode
  function normalizeStyleData(data) {
    var style = normalizeStyleBinding(data.style);
    // static style is pre-processed into an object during compilation
    // and is always a fresh object, so it's safe to merge into it
    return data.staticStyle ? extend(data.staticStyle, style) : style;
  }

  // normalize possible array / string values into Object
  function normalizeStyleBinding(bindingStyle) {
    if (Array.isArray(bindingStyle)) {
      return toObject(bindingStyle);
    }
    if (typeof bindingStyle === 'string') {
      return parseStyleText(bindingStyle);
    }
    return bindingStyle;
  }

  /**
   * parent component style should be after child's
   * so that parent component's style could override it
   */
  function getStyle(vnode, checkChild) {
    var res = {};
    var styleData;

    if (checkChild) {
      var childNode = vnode;
      while (childNode.componentInstance) {
        childNode = childNode.componentInstance._vnode;
        if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {
          extend(res, styleData);
        }
      }
    }

    if (styleData = normalizeStyleData(vnode.data)) {
      extend(res, styleData);
    }

    var parentNode = vnode;
    while (parentNode = parentNode.parent) {
      if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
        extend(res, styleData);
      }
    }
    return res;
  }

  /*  */

  var cssVarRE = /^--/;
  var importantRE = /\s*!important$/;
  var setProp = function setProp(el, name, val) {
    /* istanbul ignore if */
    if (cssVarRE.test(name)) {
      el.style.setProperty(name, val);
    } else if (importantRE.test(val)) {
      el.style.setProperty(name, val.replace(importantRE, ''), 'important');
    } else {
      var normalizedName = normalize(name);
      if (Array.isArray(val)) {
        // Support values array created by autoprefixer, e.g.
        // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
        // Set them one by one, and the browser will only set those it can recognize
        for (var i = 0, len = val.length; i < len; i++) {
          el.style[normalizedName] = val[i];
        }
      } else {
        el.style[normalizedName] = val;
      }
    }
  };

  var vendorNames = ['Webkit', 'Moz', 'ms'];

  var emptyStyle;
  var normalize = cached(function (prop) {
    emptyStyle = emptyStyle || document.createElement('div').style;
    prop = camelize(prop);
    if (prop !== 'filter' && prop in emptyStyle) {
      return prop;
    }
    var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
    for (var i = 0; i < vendorNames.length; i++) {
      var name = vendorNames[i] + capName;
      if (name in emptyStyle) {
        return name;
      }
    }
  });

  function updateStyle(oldVnode, vnode) {
    var data = vnode.data;
    var oldData = oldVnode.data;

    if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
      return;
    }

    var cur, name;
    var el = vnode.elm;
    var oldStaticStyle = oldData.staticStyle;
    var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

    // if static style exists, stylebinding already merged into it when doing normalizeStyleData
    var oldStyle = oldStaticStyle || oldStyleBinding;

    var style = normalizeStyleBinding(vnode.data.style) || {};

    // store normalized style under a different key for next diff
    // make sure to clone it if it's reactive, since the user likely wants
    // to mutate it.
    vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;

    var newStyle = getStyle(vnode, true);

    for (name in oldStyle) {
      if (isUndef(newStyle[name])) {
        setProp(el, name, '');
      }
    }
    for (name in newStyle) {
      cur = newStyle[name];
      if (cur !== oldStyle[name]) {
        // ie9 setting to null has no effect, must use empty string
        setProp(el, name, cur == null ? '' : cur);
      }
    }
  }

  var style = {
    create: updateStyle,
    update: updateStyle
  };

  /*  */

  /**
   * Add class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */
  function addClass(el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
      return;
    }

    /* istanbul ignore else */
    if (el.classList) {
      if (cls.indexOf(' ') > -1) {
        cls.split(/\s+/).forEach(function (c) {
          return el.classList.add(c);
        });
      } else {
        el.classList.add(cls);
      }
    } else {
      var cur = " " + (el.getAttribute('class') || '') + " ";
      if (cur.indexOf(' ' + cls + ' ') < 0) {
        el.setAttribute('class', (cur + cls).trim());
      }
    }
  }

  /**
   * Remove class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */
  function removeClass(el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
      return;
    }

    /* istanbul ignore else */
    if (el.classList) {
      if (cls.indexOf(' ') > -1) {
        cls.split(/\s+/).forEach(function (c) {
          return el.classList.remove(c);
        });
      } else {
        el.classList.remove(cls);
      }
      if (!el.classList.length) {
        el.removeAttribute('class');
      }
    } else {
      var cur = " " + (el.getAttribute('class') || '') + " ";
      var tar = ' ' + cls + ' ';
      while (cur.indexOf(tar) >= 0) {
        cur = cur.replace(tar, ' ');
      }
      cur = cur.trim();
      if (cur) {
        el.setAttribute('class', cur);
      } else {
        el.removeAttribute('class');
      }
    }
  }

  /*  */

  function resolveTransition(def$$1) {
    if (!def$$1) {
      return;
    }
    /* istanbul ignore else */
    if ((typeof def$$1 === 'undefined' ? 'undefined' : _typeof(def$$1)) === 'object') {
      var res = {};
      if (def$$1.css !== false) {
        extend(res, autoCssTransition(def$$1.name || 'v'));
      }
      extend(res, def$$1);
      return res;
    } else if (typeof def$$1 === 'string') {
      return autoCssTransition(def$$1);
    }
  }

  var autoCssTransition = cached(function (name) {
    return {
      enterClass: name + "-enter",
      enterToClass: name + "-enter-to",
      enterActiveClass: name + "-enter-active",
      leaveClass: name + "-leave",
      leaveToClass: name + "-leave-to",
      leaveActiveClass: name + "-leave-active"
    };
  });

  var hasTransition = inBrowser && !isIE9;
  var TRANSITION = 'transition';
  var ANIMATION = 'animation';

  // Transition property/event sniffing
  var transitionProp = 'transition';
  var transitionEndEvent = 'transitionend';
  var animationProp = 'animation';
  var animationEndEvent = 'animationend';
  if (hasTransition) {
    /* istanbul ignore if */
    if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
      transitionProp = 'WebkitTransition';
      transitionEndEvent = 'webkitTransitionEnd';
    }
    if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
      animationProp = 'WebkitAnimation';
      animationEndEvent = 'webkitAnimationEnd';
    }
  }

  // binding to window is necessary to make hot reload work in IE in strict mode
  var raf = inBrowser && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout;

  function nextFrame(fn) {
    raf(function () {
      raf(fn);
    });
  }

  function addTransitionClass(el, cls) {
    var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
    if (transitionClasses.indexOf(cls) < 0) {
      transitionClasses.push(cls);
      addClass(el, cls);
    }
  }

  function removeTransitionClass(el, cls) {
    if (el._transitionClasses) {
      remove(el._transitionClasses, cls);
    }
    removeClass(el, cls);
  }

  function whenTransitionEnds(el, expectedType, cb) {
    var ref = getTransitionInfo(el, expectedType);
    var type = ref.type;
    var timeout = ref.timeout;
    var propCount = ref.propCount;
    if (!type) {
      return cb();
    }
    var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
    var ended = 0;
    var end = function end() {
      el.removeEventListener(event, onEnd);
      cb();
    };
    var onEnd = function onEnd(e) {
      if (e.target === el) {
        if (++ended >= propCount) {
          end();
        }
      }
    };
    setTimeout(function () {
      if (ended < propCount) {
        end();
      }
    }, timeout + 1);
    el.addEventListener(event, onEnd);
  }

  var transformRE = /\b(transform|all)(,|$)/;

  function getTransitionInfo(el, expectedType) {
    var styles = window.getComputedStyle(el);
    var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
    var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
    var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    var animationDelays = styles[animationProp + 'Delay'].split(', ');
    var animationDurations = styles[animationProp + 'Duration'].split(', ');
    var animationTimeout = getTimeout(animationDelays, animationDurations);

    var type;
    var timeout = 0;
    var propCount = 0;
    /* istanbul ignore if */
    if (expectedType === TRANSITION) {
      if (transitionTimeout > 0) {
        type = TRANSITION;
        timeout = transitionTimeout;
        propCount = transitionDurations.length;
      }
    } else if (expectedType === ANIMATION) {
      if (animationTimeout > 0) {
        type = ANIMATION;
        timeout = animationTimeout;
        propCount = animationDurations.length;
      }
    } else {
      timeout = Math.max(transitionTimeout, animationTimeout);
      type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
      propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
    }
    var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
    return {
      type: type,
      timeout: timeout,
      propCount: propCount,
      hasTransform: hasTransform
    };
  }

  function getTimeout(delays, durations) {
    /* istanbul ignore next */
    while (delays.length < durations.length) {
      delays = delays.concat(delays);
    }

    return Math.max.apply(null, durations.map(function (d, i) {
      return toMs(d) + toMs(delays[i]);
    }));
  }

  function toMs(s) {
    return Number(s.slice(0, -1)) * 1000;
  }

  /*  */

  function enter(vnode, toggleDisplay) {
    var el = vnode.elm;

    // call leave callback now
    if (isDef(el._leaveCb)) {
      el._leaveCb.cancelled = true;
      el._leaveCb();
    }

    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data)) {
      return;
    }

    /* istanbul ignore if */
    if (isDef(el._enterCb) || el.nodeType !== 1) {
      return;
    }

    var css = data.css;
    var type = data.type;
    var enterClass = data.enterClass;
    var enterToClass = data.enterToClass;
    var enterActiveClass = data.enterActiveClass;
    var appearClass = data.appearClass;
    var appearToClass = data.appearToClass;
    var appearActiveClass = data.appearActiveClass;
    var beforeEnter = data.beforeEnter;
    var enter = data.enter;
    var afterEnter = data.afterEnter;
    var enterCancelled = data.enterCancelled;
    var beforeAppear = data.beforeAppear;
    var appear = data.appear;
    var afterAppear = data.afterAppear;
    var appearCancelled = data.appearCancelled;
    var duration = data.duration;

    // activeInstance will always be the <transition> component managing this
    // transition. One edge case to check is when the <transition> is placed
    // as the root node of a child component. In that case we need to check
    // <transition>'s parent for appear check.
    var context = activeInstance;
    var transitionNode = activeInstance.$vnode;
    while (transitionNode && transitionNode.parent) {
      transitionNode = transitionNode.parent;
      context = transitionNode.context;
    }

    var isAppear = !context._isMounted || !vnode.isRootInsert;

    if (isAppear && !appear && appear !== '') {
      return;
    }

    var startClass = isAppear && appearClass ? appearClass : enterClass;
    var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
    var toClass = isAppear && appearToClass ? appearToClass : enterToClass;

    var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
    var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
    var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
    var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;

    var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

    if ("development" !== 'production' && explicitEnterDuration != null) {
      checkDuration(explicitEnterDuration, 'enter', vnode);
    }

    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(enterHook);

    var cb = el._enterCb = once(function () {
      if (expectsCSS) {
        removeTransitionClass(el, toClass);
        removeTransitionClass(el, activeClass);
      }
      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, startClass);
        }
        enterCancelledHook && enterCancelledHook(el);
      } else {
        afterEnterHook && afterEnterHook(el);
      }
      el._enterCb = null;
    });

    if (!vnode.data.show) {
      // remove pending leave element on enter by injecting an insert hook
      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {
        var parent = el.parentNode;
        var pendingNode = parent && parent._pending && parent._pending[vnode.key];
        if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
          pendingNode.elm._leaveCb();
        }
        enterHook && enterHook(el, cb);
      });
    }

    // start enter transition
    beforeEnterHook && beforeEnterHook(el);
    if (expectsCSS) {
      addTransitionClass(el, startClass);
      addTransitionClass(el, activeClass);
      nextFrame(function () {
        addTransitionClass(el, toClass);
        removeTransitionClass(el, startClass);
        if (!cb.cancelled && !userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      });
    }

    if (vnode.data.show) {
      toggleDisplay && toggleDisplay();
      enterHook && enterHook(el, cb);
    }

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }

  function leave(vnode, rm) {
    var el = vnode.elm;

    // call enter callback now
    if (isDef(el._enterCb)) {
      el._enterCb.cancelled = true;
      el._enterCb();
    }

    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data)) {
      return rm();
    }

    /* istanbul ignore if */
    if (isDef(el._leaveCb) || el.nodeType !== 1) {
      return;
    }

    var css = data.css;
    var type = data.type;
    var leaveClass = data.leaveClass;
    var leaveToClass = data.leaveToClass;
    var leaveActiveClass = data.leaveActiveClass;
    var beforeLeave = data.beforeLeave;
    var leave = data.leave;
    var afterLeave = data.afterLeave;
    var leaveCancelled = data.leaveCancelled;
    var delayLeave = data.delayLeave;
    var duration = data.duration;

    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(leave);

    var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

    if ("development" !== 'production' && isDef(explicitLeaveDuration)) {
      checkDuration(explicitLeaveDuration, 'leave', vnode);
    }

    var cb = el._leaveCb = once(function () {
      if (el.parentNode && el.parentNode._pending) {
        el.parentNode._pending[vnode.key] = null;
      }
      if (expectsCSS) {
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
      }
      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, leaveClass);
        }
        leaveCancelled && leaveCancelled(el);
      } else {
        rm();
        afterLeave && afterLeave(el);
      }
      el._leaveCb = null;
    });

    if (delayLeave) {
      delayLeave(performLeave);
    } else {
      performLeave();
    }

    function performLeave() {
      // the delayed leave may have already been cancelled
      if (cb.cancelled) {
        return;
      }
      // record leaving element
      if (!vnode.data.show) {
        (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
      }
      beforeLeave && beforeLeave(el);
      if (expectsCSS) {
        addTransitionClass(el, leaveClass);
        addTransitionClass(el, leaveActiveClass);
        nextFrame(function () {
          addTransitionClass(el, leaveToClass);
          removeTransitionClass(el, leaveClass);
          if (!cb.cancelled && !userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        });
      }
      leave && leave(el, cb);
      if (!expectsCSS && !userWantsControl) {
        cb();
      }
    }
  }

  // only used in dev mode
  function checkDuration(val, name, vnode) {
    if (typeof val !== 'number') {
      warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
    } else if (isNaN(val)) {
      warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
    }
  }

  function isValidDuration(val) {
    return typeof val === 'number' && !isNaN(val);
  }

  /**
   * Normalize a transition hook's argument length. The hook may be:
   * - a merged hook (invoker) with the original in .fns
   * - a wrapped component method (check ._length)
   * - a plain function (.length)
   */
  function getHookArgumentsLength(fn) {
    if (isUndef(fn)) {
      return false;
    }
    var invokerFns = fn.fns;
    if (isDef(invokerFns)) {
      // invoker
      return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
    } else {
      return (fn._length || fn.length) > 1;
    }
  }

  function _enter(_, vnode) {
    if (vnode.data.show !== true) {
      enter(vnode);
    }
  }

  var transition = inBrowser ? {
    create: _enter,
    activate: _enter,
    remove: function remove$$1(vnode, rm) {
      /* istanbul ignore else */
      if (vnode.data.show !== true) {
        leave(vnode, rm);
      } else {
        rm();
      }
    }
  } : {};

  var platformModules = [attrs, klass, events, domProps, style, transition];

  /*  */

  // the directive module should be applied last, after all
  // built-in modules have been applied.
  var modules = platformModules.concat(baseModules);

  var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

  /**
   * Not type checking this file because flow doesn't like attaching
   * properties to Elements.
   */

  /* istanbul ignore if */
  if (isIE9) {
    // http://www.matts411.com/post/internet-explorer-9-oninput/
    document.addEventListener('selectionchange', function () {
      var el = document.activeElement;
      if (el && el.vmodel) {
        trigger(el, 'input');
      }
    });
  }

  var model$1 = {
    inserted: function inserted(el, binding, vnode) {
      if (vnode.tag === 'select') {
        setSelected(el, binding, vnode.context);
        el._vOptions = [].map.call(el.options, getValue);
      } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
        el._vModifiers = binding.modifiers;
        if (!binding.modifiers.lazy) {
          // Safari < 10.2 & UIWebView doesn't fire compositionend when
          // switching focus before confirming composition choice
          // this also fixes the issue where some browsers e.g. iOS Chrome
          // fires "change" instead of "input" on autocomplete.
          el.addEventListener('change', onCompositionEnd);
          if (!isAndroid) {
            el.addEventListener('compositionstart', onCompositionStart);
            el.addEventListener('compositionend', onCompositionEnd);
          }
          /* istanbul ignore if */
          if (isIE9) {
            el.vmodel = true;
          }
        }
      }
    },
    componentUpdated: function componentUpdated(el, binding, vnode) {
      if (vnode.tag === 'select') {
        setSelected(el, binding, vnode.context);
        // in case the options rendered by v-for have changed,
        // it's possible that the value is out-of-sync with the rendered options.
        // detect such cases and filter out values that no longer has a matching
        // option in the DOM.
        var prevOptions = el._vOptions;
        var curOptions = el._vOptions = [].map.call(el.options, getValue);
        if (curOptions.some(function (o, i) {
          return !looseEqual(o, prevOptions[i]);
        })) {
          // trigger change event if
          // no matching option found for at least one value
          var needReset = el.multiple ? binding.value.some(function (v) {
            return hasNoMatchingOption(v, curOptions);
          }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
          if (needReset) {
            trigger(el, 'change');
          }
        }
      }
    }
  };

  function setSelected(el, binding, vm) {
    actuallySetSelected(el, binding, vm);
    /* istanbul ignore if */
    if (isIE || isEdge) {
      setTimeout(function () {
        actuallySetSelected(el, binding, vm);
      }, 0);
    }
  }

  function actuallySetSelected(el, binding, vm) {
    var value = binding.value;
    var isMultiple = el.multiple;
    if (isMultiple && !Array.isArray(value)) {
      "development" !== 'production' && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
      return;
    }
    var selected, option;
    for (var i = 0, l = el.options.length; i < l; i++) {
      option = el.options[i];
      if (isMultiple) {
        selected = looseIndexOf(value, getValue(option)) > -1;
        if (option.selected !== selected) {
          option.selected = selected;
        }
      } else {
        if (looseEqual(getValue(option), value)) {
          if (el.selectedIndex !== i) {
            el.selectedIndex = i;
          }
          return;
        }
      }
    }
    if (!isMultiple) {
      el.selectedIndex = -1;
    }
  }

  function hasNoMatchingOption(value, options) {
    return options.every(function (o) {
      return !looseEqual(o, value);
    });
  }

  function getValue(option) {
    return '_value' in option ? option._value : option.value;
  }

  function onCompositionStart(e) {
    e.target.composing = true;
  }

  function onCompositionEnd(e) {
    // prevent triggering an input event for no reason
    if (!e.target.composing) {
      return;
    }
    e.target.composing = false;
    trigger(e.target, 'input');
  }

  function trigger(el, type) {
    var e = document.createEvent('HTMLEvents');
    e.initEvent(type, true, true);
    el.dispatchEvent(e);
  }

  /*  */

  // recursively search for possible transition defined inside the component root
  function locateNode(vnode) {
    return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
  }

  var show = {
    bind: function bind(el, ref, vnode) {
      var value = ref.value;

      vnode = locateNode(vnode);
      var transition$$1 = vnode.data && vnode.data.transition;
      var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;
      if (value && transition$$1) {
        vnode.data.show = true;
        enter(vnode, function () {
          el.style.display = originalDisplay;
        });
      } else {
        el.style.display = value ? originalDisplay : 'none';
      }
    },

    update: function update(el, ref, vnode) {
      var value = ref.value;
      var oldValue = ref.oldValue;

      /* istanbul ignore if */
      if (value === oldValue) {
        return;
      }
      vnode = locateNode(vnode);
      var transition$$1 = vnode.data && vnode.data.transition;
      if (transition$$1) {
        vnode.data.show = true;
        if (value) {
          enter(vnode, function () {
            el.style.display = el.__vOriginalDisplay;
          });
        } else {
          leave(vnode, function () {
            el.style.display = 'none';
          });
        }
      } else {
        el.style.display = value ? el.__vOriginalDisplay : 'none';
      }
    },

    unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
      if (!isDestroy) {
        el.style.display = el.__vOriginalDisplay;
      }
    }
  };

  var platformDirectives = {
    model: model$1,
    show: show
  };

  /*  */

  // Provides transition support for a single element/component.
  // supports transition mode (out-in / in-out)

  var transitionProps = {
    name: String,
    appear: Boolean,
    css: Boolean,
    mode: String,
    type: String,
    enterClass: String,
    leaveClass: String,
    enterToClass: String,
    leaveToClass: String,
    enterActiveClass: String,
    leaveActiveClass: String,
    appearClass: String,
    appearActiveClass: String,
    appearToClass: String,
    duration: [Number, String, Object]
  };

  // in case the child is also an abstract component, e.g. <keep-alive>
  // we want to recursively retrieve the real component to be rendered
  function getRealChild(vnode) {
    var compOptions = vnode && vnode.componentOptions;
    if (compOptions && compOptions.Ctor.options.abstract) {
      return getRealChild(getFirstComponentChild(compOptions.children));
    } else {
      return vnode;
    }
  }

  function extractTransitionData(comp) {
    var data = {};
    var options = comp.$options;
    // props
    for (var key in options.propsData) {
      data[key] = comp[key];
    }
    // events.
    // extract listeners and pass them directly to the transition methods
    var listeners = options._parentListeners;
    for (var key$1 in listeners) {
      data[camelize(key$1)] = listeners[key$1];
    }
    return data;
  }

  function placeholder(h, rawChild) {
    if (/\d-keep-alive$/.test(rawChild.tag)) {
      return h('keep-alive', {
        props: rawChild.componentOptions.propsData
      });
    }
  }

  function hasParentTransition(vnode) {
    while (vnode = vnode.parent) {
      if (vnode.data.transition) {
        return true;
      }
    }
  }

  function isSameChild(child, oldChild) {
    return oldChild.key === child.key && oldChild.tag === child.tag;
  }

  var Transition = {
    name: 'transition',
    props: transitionProps,
    abstract: true,

    render: function render(h) {
      var this$1 = this;

      var children = this.$options._renderChildren;
      if (!children) {
        return;
      }

      // filter out text nodes (possible whitespaces)
      children = children.filter(function (c) {
        return c.tag || isAsyncPlaceholder(c);
      });
      /* istanbul ignore if */
      if (!children.length) {
        return;
      }

      // warn multiple elements
      if ("development" !== 'production' && children.length > 1) {
        warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
      }

      var mode = this.mode;

      // warn invalid mode
      if ("development" !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {
        warn('invalid <transition> mode: ' + mode, this.$parent);
      }

      var rawChild = children[0];

      // if this is a component root node and the component's
      // parent container node also has transition, skip.
      if (hasParentTransition(this.$vnode)) {
        return rawChild;
      }

      // apply transition data to child
      // use getRealChild() to ignore abstract components e.g. keep-alive
      var child = getRealChild(rawChild);
      /* istanbul ignore if */
      if (!child) {
        return rawChild;
      }

      if (this._leaving) {
        return placeholder(h, rawChild);
      }

      // ensure a key that is unique to the vnode type and to this transition
      // component instance. This key will be used to remove pending leaving nodes
      // during entering.
      var id = "__transition-" + this._uid + "-";
      child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;

      var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
      var oldRawChild = this._vnode;
      var oldChild = getRealChild(oldRawChild);

      // mark v-show
      // so that the transition module can hand over the control to the directive
      if (child.data.directives && child.data.directives.some(function (d) {
        return d.name === 'show';
      })) {
        child.data.show = true;
      }

      if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild)) {
        // replace old child transition data with fresh one
        // important for dynamic transitions!
        var oldData = oldChild && (oldChild.data.transition = extend({}, data));
        // handle transition mode
        if (mode === 'out-in') {
          // return placeholder node and queue update when leave finishes
          this._leaving = true;
          mergeVNodeHook(oldData, 'afterLeave', function () {
            this$1._leaving = false;
            this$1.$forceUpdate();
          });
          return placeholder(h, rawChild);
        } else if (mode === 'in-out') {
          if (isAsyncPlaceholder(child)) {
            return oldRawChild;
          }
          var delayedLeave;
          var performLeave = function performLeave() {
            delayedLeave();
          };
          mergeVNodeHook(data, 'afterEnter', performLeave);
          mergeVNodeHook(data, 'enterCancelled', performLeave);
          mergeVNodeHook(oldData, 'delayLeave', function (leave) {
            delayedLeave = leave;
          });
        }
      }

      return rawChild;
    }
  };

  /*  */

  // Provides transition support for list items.
  // supports move transitions using the FLIP technique.

  // Because the vdom's children update algorithm is "unstable" - i.e.
  // it doesn't guarantee the relative positioning of removed elements,
  // we force transition-group to update its children into two passes:
  // in the first pass, we remove all nodes that need to be removed,
  // triggering their leaving transition; in the second pass, we insert/move
  // into the final desired state. This way in the second pass removed
  // nodes will remain where they should be.

  var props = extend({
    tag: String,
    moveClass: String
  }, transitionProps);

  delete props.mode;

  var TransitionGroup = {
    props: props,

    render: function render(h) {
      var tag = this.tag || this.$vnode.data.tag || 'span';
      var map = Object.create(null);
      var prevChildren = this.prevChildren = this.children;
      var rawChildren = this.$slots.default || [];
      var children = this.children = [];
      var transitionData = extractTransitionData(this);

      for (var i = 0; i < rawChildren.length; i++) {
        var c = rawChildren[i];
        if (c.tag) {
          if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
            children.push(c);
            map[c.key] = c;(c.data || (c.data = {})).transition = transitionData;
          } else {
            var opts = c.componentOptions;
            var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
            warn("<transition-group> children must be keyed: <" + name + ">");
          }
        }
      }

      if (prevChildren) {
        var kept = [];
        var removed = [];
        for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
          var c$1 = prevChildren[i$1];
          c$1.data.transition = transitionData;
          c$1.data.pos = c$1.elm.getBoundingClientRect();
          if (map[c$1.key]) {
            kept.push(c$1);
          } else {
            removed.push(c$1);
          }
        }
        this.kept = h(tag, null, kept);
        this.removed = removed;
      }

      return h(tag, null, children);
    },

    beforeUpdate: function beforeUpdate() {
      // force removing pass
      this.__patch__(this._vnode, this.kept, false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
      );
      this._vnode = this.kept;
    },

    updated: function updated() {
      var children = this.prevChildren;
      var moveClass = this.moveClass || (this.name || 'v') + '-move';
      if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
        return;
      }

      // we divide the work into three loops to avoid mixing DOM reads and writes
      // in each iteration - which helps prevent layout thrashing.
      children.forEach(callPendingCbs);
      children.forEach(recordPosition);
      children.forEach(applyTranslation);

      // force reflow to put everything in position
      var body = document.body;
      var f = body.offsetHeight; // eslint-disable-line

      children.forEach(function (c) {
        if (c.data.moved) {
          var el = c.elm;
          var s = el.style;
          addTransitionClass(el, moveClass);
          s.transform = s.WebkitTransform = s.transitionDuration = '';
          el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
            if (!e || /transform$/.test(e.propertyName)) {
              el.removeEventListener(transitionEndEvent, cb);
              el._moveCb = null;
              removeTransitionClass(el, moveClass);
            }
          });
        }
      });
    },

    methods: {
      hasMove: function hasMove(el, moveClass) {
        /* istanbul ignore if */
        if (!hasTransition) {
          return false;
        }
        /* istanbul ignore if */
        if (this._hasMove) {
          return this._hasMove;
        }
        // Detect whether an element with the move class applied has
        // CSS transitions. Since the element may be inside an entering
        // transition at this very moment, we make a clone of it and remove
        // all other transition classes applied to ensure only the move class
        // is applied.
        var clone = el.cloneNode();
        if (el._transitionClasses) {
          el._transitionClasses.forEach(function (cls) {
            removeClass(clone, cls);
          });
        }
        addClass(clone, moveClass);
        clone.style.display = 'none';
        this.$el.appendChild(clone);
        var info = getTransitionInfo(clone);
        this.$el.removeChild(clone);
        return this._hasMove = info.hasTransform;
      }
    }
  };

  function callPendingCbs(c) {
    /* istanbul ignore if */
    if (c.elm._moveCb) {
      c.elm._moveCb();
    }
    /* istanbul ignore if */
    if (c.elm._enterCb) {
      c.elm._enterCb();
    }
  }

  function recordPosition(c) {
    c.data.newPos = c.elm.getBoundingClientRect();
  }

  function applyTranslation(c) {
    var oldPos = c.data.pos;
    var newPos = c.data.newPos;
    var dx = oldPos.left - newPos.left;
    var dy = oldPos.top - newPos.top;
    if (dx || dy) {
      c.data.moved = true;
      var s = c.elm.style;
      s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
      s.transitionDuration = '0s';
    }
  }

  var platformComponents = {
    Transition: Transition,
    TransitionGroup: TransitionGroup
  };

  /*  */

  // install platform specific utils
  Vue$3.config.mustUseProp = mustUseProp;
  Vue$3.config.isReservedTag = isReservedTag;
  Vue$3.config.isReservedAttr = isReservedAttr;
  Vue$3.config.getTagNamespace = getTagNamespace;
  Vue$3.config.isUnknownElement = isUnknownElement;

  // install platform runtime directives & components
  extend(Vue$3.options.directives, platformDirectives);
  extend(Vue$3.options.components, platformComponents);

  // install platform patch function
  Vue$3.prototype.__patch__ = inBrowser ? patch : noop;

  // public mount method
  Vue$3.prototype.$mount = function (el, hydrating) {
    el = el && inBrowser ? query(el) : undefined;
    return mountComponent(this, el, hydrating);
  };

  // devtools global hook
  /* istanbul ignore next */
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue$3);
      } else if ("development" !== 'production' && isChrome) {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }
    if ("development" !== 'production' && config.productionTip !== false && inBrowser && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);

  /*  */

  // check whether current browser encodes a char inside attribute values
  function shouldDecode(content, encoded) {
    var div = document.createElement('div');
    div.innerHTML = "<div a=\"" + content + "\"/>";
    return div.innerHTML.indexOf(encoded) > 0;
  }

  // #3663
  // IE encodes newlines inside attribute values while other browsers don't
  var shouldDecodeNewlines = inBrowser ? shouldDecode('\n', '&#10;') : false;

  /*  */

  var defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g;
  var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

  var buildRegex = cached(function (delimiters) {
    var open = delimiters[0].replace(regexEscapeRE, '\\$&');
    var close = delimiters[1].replace(regexEscapeRE, '\\$&');
    return new RegExp(open + '((?:.|\\n)+?)' + close, 'g');
  });

  function parseText(text, delimiters) {
    var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
    if (!tagRE.test(text)) {
      return;
    }
    var tokens = [];
    var lastIndex = tagRE.lastIndex = 0;
    var match, index;
    while (match = tagRE.exec(text)) {
      index = match.index;
      // push text token
      if (index > lastIndex) {
        tokens.push(JSON.stringify(text.slice(lastIndex, index)));
      }
      // tag token
      var exp = parseFilters(match[1].trim());
      tokens.push("_s(" + exp + ")");
      lastIndex = index + match[0].length;
    }
    if (lastIndex < text.length) {
      tokens.push(JSON.stringify(text.slice(lastIndex)));
    }
    return tokens.join('+');
  }

  /*  */

  function transformNode(el, options) {
    var warn = options.warn || baseWarn;
    var staticClass = getAndRemoveAttr(el, 'class');
    if ("development" !== 'production' && staticClass) {
      var expression = parseText(staticClass, options.delimiters);
      if (expression) {
        warn("class=\"" + staticClass + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class="{{ val }}">, use <div :class="val">.');
      }
    }
    if (staticClass) {
      el.staticClass = JSON.stringify(staticClass);
    }
    var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
    if (classBinding) {
      el.classBinding = classBinding;
    }
  }

  function genData(el) {
    var data = '';
    if (el.staticClass) {
      data += "staticClass:" + el.staticClass + ",";
    }
    if (el.classBinding) {
      data += "class:" + el.classBinding + ",";
    }
    return data;
  }

  var klass$1 = {
    staticKeys: ['staticClass'],
    transformNode: transformNode,
    genData: genData
  };

  /*  */

  function transformNode$1(el, options) {
    var warn = options.warn || baseWarn;
    var staticStyle = getAndRemoveAttr(el, 'style');
    if (staticStyle) {
      /* istanbul ignore if */
      {
        var expression = parseText(staticStyle, options.delimiters);
        if (expression) {
          warn("style=\"" + staticStyle + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div style="{{ val }}">, use <div :style="val">.');
        }
      }
      el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
    }

    var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
    if (styleBinding) {
      el.styleBinding = styleBinding;
    }
  }

  function genData$1(el) {
    var data = '';
    if (el.staticStyle) {
      data += "staticStyle:" + el.staticStyle + ",";
    }
    if (el.styleBinding) {
      data += "style:(" + el.styleBinding + "),";
    }
    return data;
  }

  var style$1 = {
    staticKeys: ['staticStyle'],
    transformNode: transformNode$1,
    genData: genData$1
  };

  var modules$1 = [klass$1, style$1];

  /*  */

  function text(el, dir) {
    if (dir.value) {
      addProp(el, 'textContent', "_s(" + dir.value + ")");
    }
  }

  /*  */

  function html(el, dir) {
    if (dir.value) {
      addProp(el, 'innerHTML', "_s(" + dir.value + ")");
    }
  }

  var directives$1 = {
    model: model,
    text: text,
    html: html
  };

  /*  */

  var isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr');

  // Elements that you can, intentionally, leave open
  // (and which close themselves)
  var canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source');

  // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
  // Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
  var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');

  /*  */

  var baseOptions = {
    expectHTML: true,
    modules: modules$1,
    directives: directives$1,
    isPreTag: isPreTag,
    isUnaryTag: isUnaryTag,
    mustUseProp: mustUseProp,
    canBeLeftOpenTag: canBeLeftOpenTag,
    isReservedTag: isReservedTag,
    getTagNamespace: getTagNamespace,
    staticKeys: genStaticKeys(modules$1)
  };

  /*  */

  var decoder;

  var he = {
    decode: function decode(html) {
      decoder = decoder || document.createElement('div');
      decoder.innerHTML = html;
      return decoder.textContent;
    }
  };

  /**
   * Not type-checking this file because it's mostly vendor code.
   */

  /*!
   * HTML Parser By John Resig (ejohn.org)
   * Modified by Juriy "kangax" Zaytsev
   * Original code by Erik Arvidsson, Mozilla Public License
   * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
   */

  // Regular Expressions for parsing tags and attributes
  var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
  // could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName
  // but for Vue templates we can enforce a simple charset
  var ncname = '[a-zA-Z_][\\w\\-\\.]*';
  var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
  var startTagOpen = new RegExp("^<" + qnameCapture);
  var startTagClose = /^\s*(\/?)>/;
  var endTag = new RegExp("^<\\/" + qnameCapture + "[^>]*>");
  var doctype = /^<!DOCTYPE [^>]+>/i;
  var comment = /^<!--/;
  var conditionalComment = /^<!\[/;

  var IS_REGEX_CAPTURING_BROKEN = false;
  'x'.replace(/x(.)?/g, function (m, g) {
    IS_REGEX_CAPTURING_BROKEN = g === '';
  });

  // Special Elements (can contain anything)
  var isPlainTextElement = makeMap('script,style,textarea', true);
  var reCache = {};

  var decodingMap = {
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&amp;': '&',
    '&#10;': '\n'
  };
  var encodedAttr = /&(?:lt|gt|quot|amp);/g;
  var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;

  // #5992
  var isIgnoreNewlineTag = makeMap('pre,textarea', true);
  var shouldIgnoreFirstNewline = function shouldIgnoreFirstNewline(tag, html) {
    return tag && isIgnoreNewlineTag(tag) && html[0] === '\n';
  };

  function decodeAttr(value, shouldDecodeNewlines) {
    var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
    return value.replace(re, function (match) {
      return decodingMap[match];
    });
  }

  function parseHTML(html, options) {
    var stack = [];
    var expectHTML = options.expectHTML;
    var isUnaryTag$$1 = options.isUnaryTag || no;
    var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
    var index = 0;
    var last, lastTag;
    while (html) {
      last = html;
      // Make sure we're not in a plaintext content element like script/style
      if (!lastTag || !isPlainTextElement(lastTag)) {
        var textEnd = html.indexOf('<');
        if (textEnd === 0) {
          // Comment:
          if (comment.test(html)) {
            var commentEnd = html.indexOf('-->');

            if (commentEnd >= 0) {
              if (options.shouldKeepComment) {
                options.comment(html.substring(4, commentEnd));
              }
              advance(commentEnd + 3);
              continue;
            }
          }

          // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
          if (conditionalComment.test(html)) {
            var conditionalEnd = html.indexOf(']>');

            if (conditionalEnd >= 0) {
              advance(conditionalEnd + 2);
              continue;
            }
          }

          // Doctype:
          var doctypeMatch = html.match(doctype);
          if (doctypeMatch) {
            advance(doctypeMatch[0].length);
            continue;
          }

          // End tag:
          var endTagMatch = html.match(endTag);
          if (endTagMatch) {
            var curIndex = index;
            advance(endTagMatch[0].length);
            parseEndTag(endTagMatch[1], curIndex, index);
            continue;
          }

          // Start tag:
          var startTagMatch = parseStartTag();
          if (startTagMatch) {
            handleStartTag(startTagMatch);
            if (shouldIgnoreFirstNewline(lastTag, html)) {
              advance(1);
            }
            continue;
          }
        }

        var text = void 0,
            rest = void 0,
            next = void 0;
        if (textEnd >= 0) {
          rest = html.slice(textEnd);
          while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {
            // < in plain text, be forgiving and treat it as text
            next = rest.indexOf('<', 1);
            if (next < 0) {
              break;
            }
            textEnd += next;
            rest = html.slice(textEnd);
          }
          text = html.substring(0, textEnd);
          advance(textEnd);
        }

        if (textEnd < 0) {
          text = html;
          html = '';
        }

        if (options.chars && text) {
          options.chars(text);
        }
      } else {
        var endTagLength = 0;
        var stackedTag = lastTag.toLowerCase();
        var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
        var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
          endTagLength = endTag.length;
          if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
            text = text.replace(/<!--([\s\S]*?)-->/g, '$1').replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
          }
          if (shouldIgnoreFirstNewline(stackedTag, text)) {
            text = text.slice(1);
          }
          if (options.chars) {
            options.chars(text);
          }
          return '';
        });
        index += html.length - rest$1.length;
        html = rest$1;
        parseEndTag(stackedTag, index - endTagLength, index);
      }

      if (html === last) {
        options.chars && options.chars(html);
        if ("development" !== 'production' && !stack.length && options.warn) {
          options.warn("Mal-formatted tag at end of template: \"" + html + "\"");
        }
        break;
      }
    }

    // Clean up any remaining tags
    parseEndTag();

    function advance(n) {
      index += n;
      html = html.substring(n);
    }

    function parseStartTag() {
      var start = html.match(startTagOpen);
      if (start) {
        var match = {
          tagName: start[1],
          attrs: [],
          start: index
        };
        advance(start[0].length);
        var end, attr;
        while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {
          advance(attr[0].length);
          match.attrs.push(attr);
        }
        if (end) {
          match.unarySlash = end[1];
          advance(end[0].length);
          match.end = index;
          return match;
        }
      }
    }

    function handleStartTag(match) {
      var tagName = match.tagName;
      var unarySlash = match.unarySlash;

      if (expectHTML) {
        if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
          parseEndTag(lastTag);
        }
        if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
          parseEndTag(tagName);
        }
      }

      var unary = isUnaryTag$$1(tagName) || !!unarySlash;

      var l = match.attrs.length;
      var attrs = new Array(l);
      for (var i = 0; i < l; i++) {
        var args = match.attrs[i];
        // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778
        if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
          if (args[3] === '') {
            delete args[3];
          }
          if (args[4] === '') {
            delete args[4];
          }
          if (args[5] === '') {
            delete args[5];
          }
        }
        var value = args[3] || args[4] || args[5] || '';
        attrs[i] = {
          name: args[1],
          value: decodeAttr(value, options.shouldDecodeNewlines)
        };
      }

      if (!unary) {
        stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });
        lastTag = tagName;
      }

      if (options.start) {
        options.start(tagName, attrs, unary, match.start, match.end);
      }
    }

    function parseEndTag(tagName, start, end) {
      var pos, lowerCasedTagName;
      if (start == null) {
        start = index;
      }
      if (end == null) {
        end = index;
      }

      if (tagName) {
        lowerCasedTagName = tagName.toLowerCase();
      }

      // Find the closest opened tag of the same type
      if (tagName) {
        for (pos = stack.length - 1; pos >= 0; pos--) {
          if (stack[pos].lowerCasedTag === lowerCasedTagName) {
            break;
          }
        }
      } else {
        // If no tag name is provided, clean shop
        pos = 0;
      }

      if (pos >= 0) {
        // Close all the open elements, up the stack
        for (var i = stack.length - 1; i >= pos; i--) {
          if ("development" !== 'production' && (i > pos || !tagName) && options.warn) {
            options.warn("tag <" + stack[i].tag + "> has no matching end tag.");
          }
          if (options.end) {
            options.end(stack[i].tag, start, end);
          }
        }

        // Remove the open elements from the stack
        stack.length = pos;
        lastTag = pos && stack[pos - 1].tag;
      } else if (lowerCasedTagName === 'br') {
        if (options.start) {
          options.start(tagName, [], true, start, end);
        }
      } else if (lowerCasedTagName === 'p') {
        if (options.start) {
          options.start(tagName, [], false, start, end);
        }
        if (options.end) {
          options.end(tagName, start, end);
        }
      }
    }
  }

  /*  */

  var onRE = /^@|^v-on:/;
  var dirRE = /^v-|^@|^:/;
  var forAliasRE = /(.*?)\s+(?:in|of)\s+(.*)/;
  var forIteratorRE = /\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/;

  var argRE = /:(.*)$/;
  var bindRE = /^:|^v-bind:/;
  var modifierRE = /\.[^.]+/g;

  var decodeHTMLCached = cached(he.decode);

  // configurable state
  var warn$2;
  var delimiters;
  var transforms;
  var preTransforms;
  var postTransforms;
  var platformIsPreTag;
  var platformMustUseProp;
  var platformGetTagNamespace;

  /**
   * Convert HTML string to AST.
   */
  function parse(template, options) {
    warn$2 = options.warn || baseWarn;

    platformIsPreTag = options.isPreTag || no;
    platformMustUseProp = options.mustUseProp || no;
    platformGetTagNamespace = options.getTagNamespace || no;

    transforms = pluckModuleFunction(options.modules, 'transformNode');
    preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
    postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

    delimiters = options.delimiters;

    var stack = [];
    var preserveWhitespace = options.preserveWhitespace !== false;
    var root;
    var currentParent;
    var inVPre = false;
    var inPre = false;
    var warned = false;

    function warnOnce(msg) {
      if (!warned) {
        warned = true;
        warn$2(msg);
      }
    }

    function endPre(element) {
      // check pre state
      if (element.pre) {
        inVPre = false;
      }
      if (platformIsPreTag(element.tag)) {
        inPre = false;
      }
    }

    parseHTML(template, {
      warn: warn$2,
      expectHTML: options.expectHTML,
      isUnaryTag: options.isUnaryTag,
      canBeLeftOpenTag: options.canBeLeftOpenTag,
      shouldDecodeNewlines: options.shouldDecodeNewlines,
      shouldKeepComment: options.comments,
      start: function start(tag, attrs, unary) {
        // check namespace.
        // inherit parent ns if there is one
        var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag);

        // handle IE svg bug
        /* istanbul ignore if */
        if (isIE && ns === 'svg') {
          attrs = guardIESVGBug(attrs);
        }

        var element = {
          type: 1,
          tag: tag,
          attrsList: attrs,
          attrsMap: makeAttrsMap(attrs),
          parent: currentParent,
          children: []
        };
        if (ns) {
          element.ns = ns;
        }

        if (isForbiddenTag(element) && !isServerRendering()) {
          element.forbidden = true;
          "development" !== 'production' && warn$2('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + "<" + tag + ">" + ', as they will not be parsed.');
        }

        // apply pre-transforms
        for (var i = 0; i < preTransforms.length; i++) {
          preTransforms[i](element, options);
        }

        if (!inVPre) {
          processPre(element);
          if (element.pre) {
            inVPre = true;
          }
        }
        if (platformIsPreTag(element.tag)) {
          inPre = true;
        }
        if (inVPre) {
          processRawAttrs(element);
        } else {
          processFor(element);
          processIf(element);
          processOnce(element);
          processKey(element);

          // determine whether this is a plain element after
          // removing structural attributes
          element.plain = !element.key && !attrs.length;

          processRef(element);
          processSlot(element);
          processComponent(element);
          for (var i$1 = 0; i$1 < transforms.length; i$1++) {
            transforms[i$1](element, options);
          }
          processAttrs(element);
        }

        function checkRootConstraints(el) {
          {
            if (el.tag === 'slot' || el.tag === 'template') {
              warnOnce("Cannot use <" + el.tag + "> as component root element because it may " + 'contain multiple nodes.');
            }
            if (el.attrsMap.hasOwnProperty('v-for')) {
              warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.');
            }
          }
        }

        // tree management
        if (!root) {
          root = element;
          checkRootConstraints(root);
        } else if (!stack.length) {
          // allow root elements with v-if, v-else-if and v-else
          if (root.if && (element.elseif || element.else)) {
            checkRootConstraints(element);
            addIfCondition(root, {
              exp: element.elseif,
              block: element
            });
          } else {
            warnOnce("Component template should contain exactly one root element. " + "If you are using v-if on multiple elements, " + "use v-else-if to chain them instead.");
          }
        }
        if (currentParent && !element.forbidden) {
          if (element.elseif || element.else) {
            processIfConditions(element, currentParent);
          } else if (element.slotScope) {
            // scoped slot
            currentParent.plain = false;
            var name = element.slotTarget || '"default"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
          } else {
            currentParent.children.push(element);
            element.parent = currentParent;
          }
        }
        if (!unary) {
          currentParent = element;
          stack.push(element);
        } else {
          endPre(element);
        }
        // apply post-transforms
        for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {
          postTransforms[i$2](element, options);
        }
      },

      end: function end() {
        // remove trailing whitespace
        var element = stack[stack.length - 1];
        var lastNode = element.children[element.children.length - 1];
        if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {
          element.children.pop();
        }
        // pop stack
        stack.length -= 1;
        currentParent = stack[stack.length - 1];
        endPre(element);
      },

      chars: function chars(text) {
        if (!currentParent) {
          {
            if (text === template) {
              warnOnce('Component template requires a root element, rather than just text.');
            } else if (text = text.trim()) {
              warnOnce("text \"" + text + "\" outside root element will be ignored.");
            }
          }
          return;
        }
        // IE textarea placeholder bug
        /* istanbul ignore if */
        if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {
          return;
        }
        var children = currentParent.children;
        text = inPre || text.trim() ? isTextTag(currentParent) ? text : decodeHTMLCached(text)
        // only preserve whitespace if its not right after a starting tag
        : preserveWhitespace && children.length ? ' ' : '';
        if (text) {
          var expression;
          if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {
            children.push({
              type: 2,
              expression: expression,
              text: text
            });
          } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
            children.push({
              type: 3,
              text: text
            });
          }
        }
      },
      comment: function comment(text) {
        currentParent.children.push({
          type: 3,
          text: text,
          isComment: true
        });
      }
    });
    return root;
  }

  function processPre(el) {
    if (getAndRemoveAttr(el, 'v-pre') != null) {
      el.pre = true;
    }
  }

  function processRawAttrs(el) {
    var l = el.attrsList.length;
    if (l) {
      var attrs = el.attrs = new Array(l);
      for (var i = 0; i < l; i++) {
        attrs[i] = {
          name: el.attrsList[i].name,
          value: JSON.stringify(el.attrsList[i].value)
        };
      }
    } else if (!el.pre) {
      // non root node in pre blocks with no attributes
      el.plain = true;
    }
  }

  function processKey(el) {
    var exp = getBindingAttr(el, 'key');
    if (exp) {
      if ("development" !== 'production' && el.tag === 'template') {
        warn$2("<template> cannot be keyed. Place the key on real elements instead.");
      }
      el.key = exp;
    }
  }

  function processRef(el) {
    var ref = getBindingAttr(el, 'ref');
    if (ref) {
      el.ref = ref;
      el.refInFor = checkInFor(el);
    }
  }

  function processFor(el) {
    var exp;
    if (exp = getAndRemoveAttr(el, 'v-for')) {
      var inMatch = exp.match(forAliasRE);
      if (!inMatch) {
        "development" !== 'production' && warn$2("Invalid v-for expression: " + exp);
        return;
      }
      el.for = inMatch[2].trim();
      var alias = inMatch[1].trim();
      var iteratorMatch = alias.match(forIteratorRE);
      if (iteratorMatch) {
        el.alias = iteratorMatch[1].trim();
        el.iterator1 = iteratorMatch[2].trim();
        if (iteratorMatch[3]) {
          el.iterator2 = iteratorMatch[3].trim();
        }
      } else {
        el.alias = alias;
      }
    }
  }

  function processIf(el) {
    var exp = getAndRemoveAttr(el, 'v-if');
    if (exp) {
      el.if = exp;
      addIfCondition(el, {
        exp: exp,
        block: el
      });
    } else {
      if (getAndRemoveAttr(el, 'v-else') != null) {
        el.else = true;
      }
      var elseif = getAndRemoveAttr(el, 'v-else-if');
      if (elseif) {
        el.elseif = elseif;
      }
    }
  }

  function processIfConditions(el, parent) {
    var prev = findPrevElement(parent.children);
    if (prev && prev.if) {
      addIfCondition(prev, {
        exp: el.elseif,
        block: el
      });
    } else {
      warn$2("v-" + (el.elseif ? 'else-if="' + el.elseif + '"' : 'else') + " " + "used on element <" + el.tag + "> without corresponding v-if.");
    }
  }

  function findPrevElement(children) {
    var i = children.length;
    while (i--) {
      if (children[i].type === 1) {
        return children[i];
      } else {
        if ("development" !== 'production' && children[i].text !== ' ') {
          warn$2("text \"" + children[i].text.trim() + "\" between v-if and v-else(-if) " + "will be ignored.");
        }
        children.pop();
      }
    }
  }

  function addIfCondition(el, condition) {
    if (!el.ifConditions) {
      el.ifConditions = [];
    }
    el.ifConditions.push(condition);
  }

  function processOnce(el) {
    var once$$1 = getAndRemoveAttr(el, 'v-once');
    if (once$$1 != null) {
      el.once = true;
    }
  }

  function processSlot(el) {
    if (el.tag === 'slot') {
      el.slotName = getBindingAttr(el, 'name');
      if ("development" !== 'production' && el.key) {
        warn$2("`key` does not work on <slot> because slots are abstract outlets " + "and can possibly expand into multiple elements. " + "Use the key on a wrapping element instead.");
      }
    } else {
      var slotTarget = getBindingAttr(el, 'slot');
      if (slotTarget) {
        el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
        // preserve slot as an attribute for native shadow DOM compat
        addAttr(el, 'slot', slotTarget);
      }
      if (el.tag === 'template') {
        el.slotScope = getAndRemoveAttr(el, 'scope');
      }
    }
  }

  function processComponent(el) {
    var binding;
    if (binding = getBindingAttr(el, 'is')) {
      el.component = binding;
    }
    if (getAndRemoveAttr(el, 'inline-template') != null) {
      el.inlineTemplate = true;
    }
  }

  function processAttrs(el) {
    var list = el.attrsList;
    var i, l, name, rawName, value, modifiers, isProp;
    for (i = 0, l = list.length; i < l; i++) {
      name = rawName = list[i].name;
      value = list[i].value;
      if (dirRE.test(name)) {
        // mark element as dynamic
        el.hasBindings = true;
        // modifiers
        modifiers = parseModifiers(name);
        if (modifiers) {
          name = name.replace(modifierRE, '');
        }
        if (bindRE.test(name)) {
          // v-bind
          name = name.replace(bindRE, '');
          value = parseFilters(value);
          isProp = false;
          if (modifiers) {
            if (modifiers.prop) {
              isProp = true;
              name = camelize(name);
              if (name === 'innerHtml') {
                name = 'innerHTML';
              }
            }
            if (modifiers.camel) {
              name = camelize(name);
            }
            if (modifiers.sync) {
              addHandler(el, "update:" + camelize(name), genAssignmentCode(value, "$event"));
            }
          }
          if (isProp || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
            addProp(el, name, value);
          } else {
            addAttr(el, name, value);
          }
        } else if (onRE.test(name)) {
          // v-on
          name = name.replace(onRE, '');
          addHandler(el, name, value, modifiers, false, warn$2);
        } else {
          // normal directives
          name = name.replace(dirRE, '');
          // parse arg
          var argMatch = name.match(argRE);
          var arg = argMatch && argMatch[1];
          if (arg) {
            name = name.slice(0, -(arg.length + 1));
          }
          addDirective(el, name, rawName, value, arg, modifiers);
          if ("development" !== 'production' && name === 'model') {
            checkForAliasModel(el, value);
          }
        }
      } else {
        // literal attribute
        {
          var expression = parseText(value, delimiters);
          if (expression) {
            warn$2(name + "=\"" + value + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id="{{ val }}">, use <div :id="val">.');
          }
        }
        addAttr(el, name, JSON.stringify(value));
      }
    }
  }

  function checkInFor(el) {
    var parent = el;
    while (parent) {
      if (parent.for !== undefined) {
        return true;
      }
      parent = parent.parent;
    }
    return false;
  }

  function parseModifiers(name) {
    var match = name.match(modifierRE);
    if (match) {
      var ret = {};
      match.forEach(function (m) {
        ret[m.slice(1)] = true;
      });
      return ret;
    }
  }

  function makeAttrsMap(attrs) {
    var map = {};
    for (var i = 0, l = attrs.length; i < l; i++) {
      if ("development" !== 'production' && map[attrs[i].name] && !isIE && !isEdge) {
        warn$2('duplicate attribute: ' + attrs[i].name);
      }
      map[attrs[i].name] = attrs[i].value;
    }
    return map;
  }

  // for script (e.g. type="x/template") or style, do not decode content
  function isTextTag(el) {
    return el.tag === 'script' || el.tag === 'style';
  }

  function isForbiddenTag(el) {
    return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');
  }

  var ieNSBug = /^xmlns:NS\d+/;
  var ieNSPrefix = /^NS\d+:/;

  /* istanbul ignore next */
  function guardIESVGBug(attrs) {
    var res = [];
    for (var i = 0; i < attrs.length; i++) {
      var attr = attrs[i];
      if (!ieNSBug.test(attr.name)) {
        attr.name = attr.name.replace(ieNSPrefix, '');
        res.push(attr);
      }
    }
    return res;
  }

  function checkForAliasModel(el, value) {
    var _el = el;
    while (_el) {
      if (_el.for && _el.alias === value) {
        warn$2("<" + el.tag + " v-model=\"" + value + "\">: " + "You are binding v-model directly to a v-for iteration alias. " + "This will not be able to modify the v-for source array because " + "writing to the alias is like modifying a function local variable. " + "Consider using an array of objects and use v-model on an object property instead.");
      }
      _el = _el.parent;
    }
  }

  /*  */

  var isStaticKey;
  var isPlatformReservedTag;

  var genStaticKeysCached = cached(genStaticKeys$1);

  /**
   * Goal of the optimizer: walk the generated template AST tree
   * and detect sub-trees that are purely static, i.e. parts of
   * the DOM that never needs to change.
   *
   * Once we detect these sub-trees, we can:
   *
   * 1. Hoist them into constants, so that we no longer need to
   *    create fresh nodes for them on each re-render;
   * 2. Completely skip them in the patching process.
   */
  function optimize(root, options) {
    if (!root) {
      return;
    }
    isStaticKey = genStaticKeysCached(options.staticKeys || '');
    isPlatformReservedTag = options.isReservedTag || no;
    // first pass: mark all non-static nodes.
    markStatic$1(root);
    // second pass: mark static roots.
    markStaticRoots(root, false);
  }

  function genStaticKeys$1(keys) {
    return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs' + (keys ? ',' + keys : ''));
  }

  function markStatic$1(node) {
    node.static = isStatic(node);
    if (node.type === 1) {
      // do not make component slot content static. this avoids
      // 1. components not able to mutate slot nodes
      // 2. static slot content fails for hot-reloading
      if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {
        return;
      }
      for (var i = 0, l = node.children.length; i < l; i++) {
        var child = node.children[i];
        markStatic$1(child);
        if (!child.static) {
          node.static = false;
        }
      }
      if (node.ifConditions) {
        for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
          var block = node.ifConditions[i$1].block;
          markStatic$1(block);
          if (!block.static) {
            node.static = false;
          }
        }
      }
    }
  }

  function markStaticRoots(node, isInFor) {
    if (node.type === 1) {
      if (node.static || node.once) {
        node.staticInFor = isInFor;
      }
      // For a node to qualify as a static root, it should have children that
      // are not just static text. Otherwise the cost of hoisting out will
      // outweigh the benefits and it's better off to just always render it fresh.
      if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
        node.staticRoot = true;
        return;
      } else {
        node.staticRoot = false;
      }
      if (node.children) {
        for (var i = 0, l = node.children.length; i < l; i++) {
          markStaticRoots(node.children[i], isInFor || !!node.for);
        }
      }
      if (node.ifConditions) {
        for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
          markStaticRoots(node.ifConditions[i$1].block, isInFor);
        }
      }
    }
  }

  function isStatic(node) {
    if (node.type === 2) {
      // expression
      return false;
    }
    if (node.type === 3) {
      // text
      return true;
    }
    return !!(node.pre || !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
  }

  function isDirectChildOfTemplateFor(node) {
    while (node.parent) {
      node = node.parent;
      if (node.tag !== 'template') {
        return false;
      }
      if (node.for) {
        return true;
      }
    }
    return false;
  }

  /*  */

  var fnExpRE = /^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
  var simplePathRE = /^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/;

  // keyCode aliases
  var keyCodes = {
    esc: 27,
    tab: 9,
    enter: 13,
    space: 32,
    up: 38,
    left: 37,
    right: 39,
    down: 40,
    'delete': [8, 46]
  };

  // #4868: modifiers that prevent the execution of the listener
  // need to explicitly return null so that we can determine whether to remove
  // the listener for .once
  var genGuard = function genGuard(condition) {
    return "if(" + condition + ")return null;";
  };

  var modifierCode = {
    stop: '$event.stopPropagation();',
    prevent: '$event.preventDefault();',
    self: genGuard("$event.target !== $event.currentTarget"),
    ctrl: genGuard("!$event.ctrlKey"),
    shift: genGuard("!$event.shiftKey"),
    alt: genGuard("!$event.altKey"),
    meta: genGuard("!$event.metaKey"),
    left: genGuard("'button' in $event && $event.button !== 0"),
    middle: genGuard("'button' in $event && $event.button !== 1"),
    right: genGuard("'button' in $event && $event.button !== 2")
  };

  function genHandlers(events, isNative, warn) {
    var res = isNative ? 'nativeOn:{' : 'on:{';
    for (var name in events) {
      var handler = events[name];
      // #5330: warn click.right, since right clicks do not actually fire click events.
      if ("development" !== 'production' && name === 'click' && handler && handler.modifiers && handler.modifiers.right) {
        warn("Use \"contextmenu\" instead of \"click.right\" since right clicks " + "do not actually fire \"click\" events.");
      }
      res += "\"" + name + "\":" + genHandler(name, handler) + ",";
    }
    return res.slice(0, -1) + '}';
  }

  function genHandler(name, handler) {
    if (!handler) {
      return 'function(){}';
    }

    if (Array.isArray(handler)) {
      return "[" + handler.map(function (handler) {
        return genHandler(name, handler);
      }).join(',') + "]";
    }

    var isMethodPath = simplePathRE.test(handler.value);
    var isFunctionExpression = fnExpRE.test(handler.value);

    if (!handler.modifiers) {
      return isMethodPath || isFunctionExpression ? handler.value : "function($event){" + handler.value + "}"; // inline statement
    } else {
      var code = '';
      var genModifierCode = '';
      var keys = [];
      for (var key in handler.modifiers) {
        if (modifierCode[key]) {
          genModifierCode += modifierCode[key];
          // left/right
          if (keyCodes[key]) {
            keys.push(key);
          }
        } else {
          keys.push(key);
        }
      }
      if (keys.length) {
        code += genKeyFilter(keys);
      }
      // Make sure modifiers like prevent and stop get executed after key filtering
      if (genModifierCode) {
        code += genModifierCode;
      }
      var handlerCode = isMethodPath ? handler.value + '($event)' : isFunctionExpression ? "(" + handler.value + ")($event)" : handler.value;
      return "function($event){" + code + handlerCode + "}";
    }
  }

  function genKeyFilter(keys) {
    return "if(!('button' in $event)&&" + keys.map(genFilterCode).join('&&') + ")return null;";
  }

  function genFilterCode(key) {
    var keyVal = parseInt(key, 10);
    if (keyVal) {
      return "$event.keyCode!==" + keyVal;
    }
    var alias = keyCodes[key];
    return "_k($event.keyCode," + JSON.stringify(key) + (alias ? ',' + JSON.stringify(alias) : '') + ")";
  }

  /*  */

  function on(el, dir) {
    if ("development" !== 'production' && dir.modifiers) {
      warn("v-on without argument does not support modifiers.");
    }
    el.wrapListeners = function (code) {
      return "_g(" + code + "," + dir.value + ")";
    };
  }

  /*  */

  function bind$1(el, dir) {
    el.wrapData = function (code) {
      return "_b(" + code + ",'" + el.tag + "'," + dir.value + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")";
    };
  }

  /*  */

  var baseDirectives = {
    on: on,
    bind: bind$1,
    cloak: noop
  };

  /*  */

  var CodegenState = function CodegenState(options) {
    this.options = options;
    this.warn = options.warn || baseWarn;
    this.transforms = pluckModuleFunction(options.modules, 'transformCode');
    this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
    this.directives = extend(extend({}, baseDirectives), options.directives);
    var isReservedTag = options.isReservedTag || no;
    this.maybeComponent = function (el) {
      return !isReservedTag(el.tag);
    };
    this.onceId = 0;
    this.staticRenderFns = [];
  };

  function generate(ast, options) {
    var state = new CodegenState(options);
    var code = ast ? genElement(ast, state) : '_c("div")';
    return {
      render: "with(this){return " + code + "}",
      staticRenderFns: state.staticRenderFns
    };
  }

  function genElement(el, state) {
    if (el.staticRoot && !el.staticProcessed) {
      return genStatic(el, state);
    } else if (el.once && !el.onceProcessed) {
      return genOnce(el, state);
    } else if (el.for && !el.forProcessed) {
      return genFor(el, state);
    } else if (el.if && !el.ifProcessed) {
      return genIf(el, state);
    } else if (el.tag === 'template' && !el.slotTarget) {
      return genChildren(el, state) || 'void 0';
    } else if (el.tag === 'slot') {
      return genSlot(el, state);
    } else {
      // component or element
      var code;
      if (el.component) {
        code = genComponent(el.component, el, state);
      } else {
        var data = el.plain ? undefined : genData$2(el, state);

        var children = el.inlineTemplate ? null : genChildren(el, state, true);
        code = "_c('" + el.tag + "'" + (data ? "," + data : '') + (children ? "," + children : '') + ")";
      }
      // module transforms
      for (var i = 0; i < state.transforms.length; i++) {
        code = state.transforms[i](el, code);
      }
      return code;
    }
  }

  // hoist static sub-trees out
  function genStatic(el, state) {
    el.staticProcessed = true;
    state.staticRenderFns.push("with(this){return " + genElement(el, state) + "}");
    return "_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")";
  }

  // v-once
  function genOnce(el, state) {
    el.onceProcessed = true;
    if (el.if && !el.ifProcessed) {
      return genIf(el, state);
    } else if (el.staticInFor) {
      var key = '';
      var parent = el.parent;
      while (parent) {
        if (parent.for) {
          key = parent.key;
          break;
        }
        parent = parent.parent;
      }
      if (!key) {
        "development" !== 'production' && state.warn("v-once can only be used inside v-for that is keyed. ");
        return genElement(el, state);
      }
      return "_o(" + genElement(el, state) + "," + state.onceId++ + "," + key + ")";
    } else {
      return genStatic(el, state);
    }
  }

  function genIf(el, state, altGen, altEmpty) {
    el.ifProcessed = true; // avoid recursion
    return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);
  }

  function genIfConditions(conditions, state, altGen, altEmpty) {
    if (!conditions.length) {
      return altEmpty || '_e()';
    }

    var condition = conditions.shift();
    if (condition.exp) {
      return "(" + condition.exp + ")?" + genTernaryExp(condition.block) + ":" + genIfConditions(conditions, state, altGen, altEmpty);
    } else {
      return "" + genTernaryExp(condition.block);
    }

    // v-if with v-once should generate code like (a)?_m(0):_m(1)
    function genTernaryExp(el) {
      return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);
    }
  }

  function genFor(el, state, altGen, altHelper) {
    var exp = el.for;
    var alias = el.alias;
    var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
    var iterator2 = el.iterator2 ? "," + el.iterator2 : '';

    if ("development" !== 'production' && state.maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {
      state.warn("<" + el.tag + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " + "v-for should have explicit keys. " + "See https://vuejs.org/guide/list.html#key for more info.", true /* tip */
      );
    }

    el.forProcessed = true; // avoid recursion
    return (altHelper || '_l') + "((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + (altGen || genElement)(el, state) + '})';
  }

  function genData$2(el, state) {
    var data = '{';

    // directives first.
    // directives may mutate the el's other properties before they are generated.
    var dirs = genDirectives(el, state);
    if (dirs) {
      data += dirs + ',';
    }

    // key
    if (el.key) {
      data += "key:" + el.key + ",";
    }
    // ref
    if (el.ref) {
      data += "ref:" + el.ref + ",";
    }
    if (el.refInFor) {
      data += "refInFor:true,";
    }
    // pre
    if (el.pre) {
      data += "pre:true,";
    }
    // record original tag name for components using "is" attribute
    if (el.component) {
      data += "tag:\"" + el.tag + "\",";
    }
    // module data generation functions
    for (var i = 0; i < state.dataGenFns.length; i++) {
      data += state.dataGenFns[i](el);
    }
    // attributes
    if (el.attrs) {
      data += "attrs:{" + genProps(el.attrs) + "},";
    }
    // DOM props
    if (el.props) {
      data += "domProps:{" + genProps(el.props) + "},";
    }
    // event handlers
    if (el.events) {
      data += genHandlers(el.events, false, state.warn) + ",";
    }
    if (el.nativeEvents) {
      data += genHandlers(el.nativeEvents, true, state.warn) + ",";
    }
    // slot target
    if (el.slotTarget) {
      data += "slot:" + el.slotTarget + ",";
    }
    // scoped slots
    if (el.scopedSlots) {
      data += genScopedSlots(el.scopedSlots, state) + ",";
    }
    // component v-model
    if (el.model) {
      data += "model:{value:" + el.model.value + ",callback:" + el.model.callback + ",expression:" + el.model.expression + "},";
    }
    // inline-template
    if (el.inlineTemplate) {
      var inlineTemplate = genInlineTemplate(el, state);
      if (inlineTemplate) {
        data += inlineTemplate + ",";
      }
    }
    data = data.replace(/,$/, '') + '}';
    // v-bind data wrap
    if (el.wrapData) {
      data = el.wrapData(data);
    }
    // v-on data wrap
    if (el.wrapListeners) {
      data = el.wrapListeners(data);
    }
    return data;
  }

  function genDirectives(el, state) {
    var dirs = el.directives;
    if (!dirs) {
      return;
    }
    var res = 'directives:[';
    var hasRuntime = false;
    var i, l, dir, needRuntime;
    for (i = 0, l = dirs.length; i < l; i++) {
      dir = dirs[i];
      needRuntime = true;
      var gen = state.directives[dir.name];
      if (gen) {
        // compile-time directive that manipulates AST.
        // returns true if it also needs a runtime counterpart.
        needRuntime = !!gen(el, dir, state.warn);
      }
      if (needRuntime) {
        hasRuntime = true;
        res += "{name:\"" + dir.name + "\",rawName:\"" + dir.rawName + "\"" + (dir.value ? ",value:(" + dir.value + "),expression:" + JSON.stringify(dir.value) : '') + (dir.arg ? ",arg:\"" + dir.arg + "\"" : '') + (dir.modifiers ? ",modifiers:" + JSON.stringify(dir.modifiers) : '') + "},";
      }
    }
    if (hasRuntime) {
      return res.slice(0, -1) + ']';
    }
  }

  function genInlineTemplate(el, state) {
    var ast = el.children[0];
    if ("development" !== 'production' && (el.children.length > 1 || ast.type !== 1)) {
      state.warn('Inline-template components must have exactly one child element.');
    }
    if (ast.type === 1) {
      var inlineRenderFns = generate(ast, state.options);
      return "inlineTemplate:{render:function(){" + inlineRenderFns.render + "},staticRenderFns:[" + inlineRenderFns.staticRenderFns.map(function (code) {
        return "function(){" + code + "}";
      }).join(',') + "]}";
    }
  }

  function genScopedSlots(slots, state) {
    return "scopedSlots:_u([" + Object.keys(slots).map(function (key) {
      return genScopedSlot(key, slots[key], state);
    }).join(',') + "])";
  }

  function genScopedSlot(key, el, state) {
    if (el.for && !el.forProcessed) {
      return genForScopedSlot(key, el, state);
    }
    return "{key:" + key + ",fn:function(" + String(el.attrsMap.scope) + "){" + "return " + (el.tag === 'template' ? genChildren(el, state) || 'void 0' : genElement(el, state)) + "}}";
  }

  function genForScopedSlot(key, el, state) {
    var exp = el.for;
    var alias = el.alias;
    var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
    var iterator2 = el.iterator2 ? "," + el.iterator2 : '';
    el.forProcessed = true; // avoid recursion
    return "_l((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + genScopedSlot(key, el, state) + '})';
  }

  function genChildren(el, state, checkSkip, altGenElement, altGenNode) {
    var children = el.children;
    if (children.length) {
      var el$1 = children[0];
      // optimize single v-for
      if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {
        return (altGenElement || genElement)(el$1, state);
      }
      var normalizationType = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;
      var gen = altGenNode || genNode;
      return "[" + children.map(function (c) {
        return gen(c, state);
      }).join(',') + "]" + (normalizationType ? "," + normalizationType : '');
    }
  }

  // determine the normalization needed for the children array.
  // 0: no normalization needed
  // 1: simple normalization needed (possible 1-level deep nested array)
  // 2: full normalization needed
  function getNormalizationType(children, maybeComponent) {
    var res = 0;
    for (var i = 0; i < children.length; i++) {
      var el = children[i];
      if (el.type !== 1) {
        continue;
      }
      if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {
        return needsNormalization(c.block);
      })) {
        res = 2;
        break;
      }
      if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {
        return maybeComponent(c.block);
      })) {
        res = 1;
      }
    }
    return res;
  }

  function needsNormalization(el) {
    return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';
  }

  function genNode(node, state) {
    if (node.type === 1) {
      return genElement(node, state);
    }if (node.type === 3 && node.isComment) {
      return genComment(node);
    } else {
      return genText(node);
    }
  }

  function genText(text) {
    return "_v(" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")";
  }

  function genComment(comment) {
    return "_e(" + JSON.stringify(comment.text) + ")";
  }

  function genSlot(el, state) {
    var slotName = el.slotName || '"default"';
    var children = genChildren(el, state);
    var res = "_t(" + slotName + (children ? "," + children : '');
    var attrs = el.attrs && "{" + el.attrs.map(function (a) {
      return camelize(a.name) + ":" + a.value;
    }).join(',') + "}";
    var bind$$1 = el.attrsMap['v-bind'];
    if ((attrs || bind$$1) && !children) {
      res += ",null";
    }
    if (attrs) {
      res += "," + attrs;
    }
    if (bind$$1) {
      res += (attrs ? '' : ',null') + "," + bind$$1;
    }
    return res + ')';
  }

  // componentName is el.component, take it as argument to shun flow's pessimistic refinement
  function genComponent(componentName, el, state) {
    var children = el.inlineTemplate ? null : genChildren(el, state, true);
    return "_c(" + componentName + "," + genData$2(el, state) + (children ? "," + children : '') + ")";
  }

  function genProps(props) {
    var res = '';
    for (var i = 0; i < props.length; i++) {
      var prop = props[i];
      res += "\"" + prop.name + "\":" + transformSpecialNewlines(prop.value) + ",";
    }
    return res.slice(0, -1);
  }

  // #3895, #4268
  function transformSpecialNewlines(text) {
    return text.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
  }

  /*  */

  // these keywords should not appear inside expressions, but operators like
  // typeof, instanceof and in are allowed
  var prohibitedKeywordRE = new RegExp('\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\b|\\b') + '\\b');

  // these unary operators should not be used as property/method names
  var unaryOperatorsRE = new RegExp('\\b' + 'delete,typeof,void'.split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

  // check valid identifier for v-for
  var identRE = /[A-Za-z_$][\w$]*/;

  // strip strings in expressions
  var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

  // detect problematic expressions in a template
  function detectErrors(ast) {
    var errors = [];
    if (ast) {
      checkNode(ast, errors);
    }
    return errors;
  }

  function checkNode(node, errors) {
    if (node.type === 1) {
      for (var name in node.attrsMap) {
        if (dirRE.test(name)) {
          var value = node.attrsMap[name];
          if (value) {
            if (name === 'v-for') {
              checkFor(node, "v-for=\"" + value + "\"", errors);
            } else if (onRE.test(name)) {
              checkEvent(value, name + "=\"" + value + "\"", errors);
            } else {
              checkExpression(value, name + "=\"" + value + "\"", errors);
            }
          }
        }
      }
      if (node.children) {
        for (var i = 0; i < node.children.length; i++) {
          checkNode(node.children[i], errors);
        }
      }
    } else if (node.type === 2) {
      checkExpression(node.expression, node.text, errors);
    }
  }

  function checkEvent(exp, text, errors) {
    var stipped = exp.replace(stripStringRE, '');
    var keywordMatch = stipped.match(unaryOperatorsRE);
    if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
      errors.push("avoid using JavaScript unary operator as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim());
    }
    checkExpression(exp, text, errors);
  }

  function checkFor(node, text, errors) {
    checkExpression(node.for || '', text, errors);
    checkIdentifier(node.alias, 'v-for alias', text, errors);
    checkIdentifier(node.iterator1, 'v-for iterator', text, errors);
    checkIdentifier(node.iterator2, 'v-for iterator', text, errors);
  }

  function checkIdentifier(ident, type, text, errors) {
    if (typeof ident === 'string' && !identRE.test(ident)) {
      errors.push("invalid " + type + " \"" + ident + "\" in expression: " + text.trim());
    }
  }

  function checkExpression(exp, text, errors) {
    try {
      new Function("return " + exp);
    } catch (e) {
      var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
      if (keywordMatch) {
        errors.push("avoid using JavaScript keyword as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim());
      } else {
        errors.push("invalid expression: " + text.trim());
      }
    }
  }

  /*  */

  function createFunction(code, errors) {
    try {
      return new Function(code);
    } catch (err) {
      errors.push({ err: err, code: code });
      return noop;
    }
  }

  function createCompileToFunctionFn(compile) {
    var cache = Object.create(null);

    return function compileToFunctions(template, options, vm) {
      options = options || {};

      /* istanbul ignore if */
      {
        // detect possible CSP restriction
        try {
          new Function('return 1');
        } catch (e) {
          if (e.toString().match(/unsafe-eval|CSP/)) {
            warn('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');
          }
        }
      }

      // check cache
      var key = options.delimiters ? String(options.delimiters) + template : template;
      if (cache[key]) {
        return cache[key];
      }

      // compile
      var compiled = compile(template, options);

      // check compilation errors/tips
      {
        if (compiled.errors && compiled.errors.length) {
          warn("Error compiling template:\n\n" + template + "\n\n" + compiled.errors.map(function (e) {
            return "- " + e;
          }).join('\n') + '\n', vm);
        }
        if (compiled.tips && compiled.tips.length) {
          compiled.tips.forEach(function (msg) {
            return tip(msg, vm);
          });
        }
      }

      // turn code into functions
      var res = {};
      var fnGenErrors = [];
      res.render = createFunction(compiled.render, fnGenErrors);
      res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
        return createFunction(code, fnGenErrors);
      });

      // check function generation errors.
      // this should only happen if there is a bug in the compiler itself.
      // mostly for codegen development use
      /* istanbul ignore if */
      {
        if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
          warn("Failed to generate render function:\n\n" + fnGenErrors.map(function (ref) {
            var err = ref.err;
            var code = ref.code;

            return err.toString() + " in\n\n" + code + "\n";
          }).join('\n'), vm);
        }
      }

      return cache[key] = res;
    };
  }

  /*  */

  function createCompilerCreator(baseCompile) {
    return function createCompiler(baseOptions) {
      function compile(template, options) {
        var finalOptions = Object.create(baseOptions);
        var errors = [];
        var tips = [];
        finalOptions.warn = function (msg, tip) {
          (tip ? tips : errors).push(msg);
        };

        if (options) {
          // merge custom modules
          if (options.modules) {
            finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
          }
          // merge custom directives
          if (options.directives) {
            finalOptions.directives = extend(Object.create(baseOptions.directives), options.directives);
          }
          // copy other options
          for (var key in options) {
            if (key !== 'modules' && key !== 'directives') {
              finalOptions[key] = options[key];
            }
          }
        }

        var compiled = baseCompile(template, finalOptions);
        {
          errors.push.apply(errors, detectErrors(compiled.ast));
        }
        compiled.errors = errors;
        compiled.tips = tips;
        return compiled;
      }

      return {
        compile: compile,
        compileToFunctions: createCompileToFunctionFn(compile)
      };
    };
  }

  /*  */

  // `createCompilerCreator` allows creating compilers that use alternative
  // parser/optimizer/codegen, e.g the SSR optimizing compiler.
  // Here we just export a default compiler using the default parts.
  var createCompiler = createCompilerCreator(function baseCompile(template, options) {
    var ast = parse(template.trim(), options);
    optimize(ast, options);
    var code = generate(ast, options);
    return {
      ast: ast,
      render: code.render,
      staticRenderFns: code.staticRenderFns
    };
  });

  /*  */

  var ref$1 = createCompiler(baseOptions);
  var compileToFunctions = ref$1.compileToFunctions;

  /*  */

  var idToTemplate = cached(function (id) {
    var el = query(id);
    return el && el.innerHTML;
  });

  var mount = Vue$3.prototype.$mount;
  Vue$3.prototype.$mount = function (el, hydrating) {
    el = el && query(el);

    /* istanbul ignore if */
    if (el === document.body || el === document.documentElement) {
      "development" !== 'production' && warn("Do not mount Vue to <html> or <body> - mount to normal elements instead.");
      return this;
    }

    var options = this.$options;
    // resolve template/el and convert to render function
    if (!options.render) {
      var template = options.template;
      if (template) {
        if (typeof template === 'string') {
          if (template.charAt(0) === '#') {
            template = idToTemplate(template);
            /* istanbul ignore if */
            if ("development" !== 'production' && !template) {
              warn("Template element not found or is empty: " + options.template, this);
            }
          }
        } else if (template.nodeType) {
          template = template.innerHTML;
        } else {
          {
            warn('invalid template option:' + template, this);
          }
          return this;
        }
      } else if (el) {
        template = getOuterHTML(el);
      }
      if (template) {
        /* istanbul ignore if */
        if ("development" !== 'production' && config.performance && mark) {
          mark('compile');
        }

        var ref = compileToFunctions(template, {
          shouldDecodeNewlines: shouldDecodeNewlines,
          delimiters: options.delimiters,
          comments: options.comments
        }, this);
        var render = ref.render;
        var staticRenderFns = ref.staticRenderFns;
        options.render = render;
        options.staticRenderFns = staticRenderFns;

        /* istanbul ignore if */
        if ("development" !== 'production' && config.performance && mark) {
          mark('compile end');
          measure(this._name + " compile", 'compile', 'compile end');
        }
      }
    }
    return mount.call(this, el, hydrating);
  };

  /**
   * Get outerHTML of elements, taking care
   * of SVG elements in IE as well.
   */
  function getOuterHTML(el) {
    if (el.outerHTML) {
      return el.outerHTML;
    } else {
      var container = document.createElement('div');
      container.appendChild(el.cloneNode(true));
      return container.innerHTML;
    }
  }

  Vue$3.compile = compileToFunctions;

  return Vue$3;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),

/***/ 32:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var store = {
  // Config
  config: {
    dateFormat: 'YYYY-MM-DD',
    debug: true,
    fixedDays: false
  },
  arrive: '',
  depart: '',
  rooms: 0,
  nights: '',
  promo: '',
  ratecode: '',
  codeType: '',
  codeId: '',
  dateProgress: '',

  deviceWidth: '',

  lang: '',

  loading: true,

  mobileFocused: false,

  facilitator: '',
  userInfo: {},
  pageInfo: {},
  brandInfo: {},
  brand: false,
  searchError: false,

  // Date statuses
  dateStatus: false,

  action: '/search-results',

  //search input
  query: '',
  trackingQuery: '',
  error: false,
  selectedItem: '',
  selectedItemURL: '',
  selectedItemCategory: '',
  selectedItemIcon: '',
  selectedItemSearchClick: '',
  keywordParam: '',

  searchType: '',
  searchCity: '',
  searchState: '',
  searchCountry: '',
  searchRegion: '',
  searchAction: '',

  recentsearchitems: [],
  staysitems: [],
  topdestinationsitems: [],
  locationitems: [],
  allhotelitems: [],
  hotelitems: [],
  airportitems: [],
  attractionitems: [],

  featuredpropertiesitems: [],
  mallfeaturedpropertiesitems: [],

  brandpropertiesitems: [],
  othercarlsonproperties: [],

  travelGuideitems: [],
  propertiesitems: [],

  showResults: false,
  recentsearches: [],
  cookieSet: false,
  cookiesAllowed: true,
  params: '',
  brandsparams: '',
  locenabled: false,

  //promo code variables
  promoClick: false,
  promocodes: {
    isOpen: false,
    modalIsOpen: false,
    codes: [],
    code: '',
    ecertCode: '',
    corporateAccountId: '',
    travelAgencyId: ''
  },

  //filters
  showFilters: false,
  amenitiesitems: [],
  amenitiescatsitems: [],
  amenitiesIds: [],
  filtersparams: [],

  branditems: [],
  brandfiltersparams: [],
  branditemsCodes: [],
  existingbrandfilters: [],

  // Points
  showPrice: false,
  displayIn: 'currency',
  hasPoints: false,
  hasPointsPlusCash: false,

  openDatepicker: false,
  openMonthpicker: false
};

module.exports = store;

/***/ }),

/***/ 366:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(367);


/***/ }),

/***/ 367:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(78);

/* globals TRANSLATIONS BRAND LANG PAGEINFO USERINFO */

var Vue = __webpack_require__(3);
var VeeValidate = __webpack_require__(109);
var moment = __webpack_require__(0);
var $ = __webpack_require__(2);
var Foundation = __webpack_require__(14);
var Flickity = __webpack_require__(81);
var Cookies = __webpack_require__(46);
var iswebview = __webpack_require__(27);

Vue.use(VeeValidate);

var store = __webpack_require__(32);

// Individual components
var Results = __webpack_require__(368);
var Promocodes = __webpack_require__(257);
var Dates = __webpack_require__(371);
var SearchResults = __webpack_require__(373);
var SearchMap = __webpack_require__(380);
var Loading = __webpack_require__(110);
var Filters = __webpack_require__(111);
var Tracking = __webpack_require__(382);

Vue.filter('translate', function (message, code, replaceArg) {
  if (!code) return message;
  var replace;
  if (!replaceArg) replace = {};else replace = replaceArg;
  var text = '';

  // Find text based on code
  if (TRANSLATIONS[code]) {
    text = TRANSLATIONS[code];
  }

  if (!text) {
    text = message;
  }

  // Replace ${} placeholders if any
  if (Object.keys(replace).length && text.length) {
    text = text.replace(/\$\{(.*?)\}/gi, function (match, p1) {
      return replace[p1];
    });
  }

  return text;
});

new Vue({
  el: '#searchapp',
  data: store,

  mixins: [Tracking],

  components: {
    results: Results,
    datepicker: Dates,
    promocodes: Promocodes,
    searchresults: SearchResults,
    searchmap: SearchMap,
    loading: Loading,
    filters: Filters,
    tracking: Tracking
  },

  created: function created() {
    //check if a cookie has been set or not. toggle the results dropdown panel based on cookie status.
    var recent = Cookies.get('CRZ_LOC');

    // Check if cookies are allowed
    var cookies = Cookies.get('cb-enabled');
    if (cookies == 'accepted') {
      this.cookiesAllowed = true;
    } else if (cookies == 'declined') {
      this.cookiesAllowed = false;
    }

    if (recent) {
      this.cookieSet = true;
      this.recentsearches = Array.isArray(recent) ? recent : JSON.parse(recent);
    } else {
      this.cookieSet = false;
    }

    if (PAGEINFO) {
      this.pageInfo = PAGEINFO;
    }

    if (BRAND) {
      this.brandInfo = BRAND;
    }

    if (LANG) {
      this.lang = LANG;
    }

    if (USERINFO) {
      this.userInfo = USERINFO;
    }
  },

  mounted: function mounted() {
    this.getURLParams();
    // Set lang
    if (PAGEINFO) {
      this.config.lang = PAGEINFO.language;
      if (this.config.lang != 'en') {
        moment.locale(this.config.lang);
      }
    }

    //featured properties for search dropdown
    if (this.brand == true) {
      $.ajax({
        url: '/ajax/brand?code=' + this.brandInfo.code,
        type: 'get',
        dataType: 'json',
        async: true,
        success: function (data) {
          if (!data.data) {
            this.error = true;
            return; // no results
          } else {
            var featuredproperties = [];
            if (data.data.record.featured_hotels && !$.isEmptyObject(data.data.record.featured_hotels)) featuredproperties = $.isArray(data.data.record.featured_hotels.record) ? data.data.record.featured_hotels.record : [data.data.record.featured_hotels.record];
            this.featuredpropertiescomputed(featuredproperties);

            // if (this.brandInfo.code === 'MALL') {
            //   this.mallfeaturedpropertiescomputed(featuredproperties.slice(0)); // clone
            // }
          }
        }.bind(this),
        error: function error(err) {
          console.log(err);
        }
      });
    } else {
      // mall featured properties for search dropdown
      $.ajax({
        url: '/ajax/brand?code=MALL',
        type: 'get',
        dataType: 'json',
        async: true,
        success: function (data) {
          if (!data.data) {
            this.error = true;
            return; // no results
          } else {
            var mallfeaturedproperties = [];
            if (data.data.record.featured_hotels && !$.isEmptyObject(data.data.record.featured_hotels)) mallfeaturedproperties = $.isArray(data.data.record.featured_hotels.record) ? data.data.record.featured_hotels.record : [data.data.record.featured_hotels.record];
            this.mallfeaturedpropertiescomputed(mallfeaturedproperties);
          }
        }.bind(this),
        error: function error(err) {
          console.log(err);
        }
      });
    }
  },

  methods: {
    getURLParams: function getURLParams() {
      // dates
      if (this.getQueryVariable("arrive") && this.getQueryVariable("depart")) {
        var arrive = this.parseDate(this.getQueryVariable("arrive"));
        var depart = this.parseDate(this.getQueryVariable("depart"));

        this.arrive = moment(arrive).format(this.config.dateFormat);
        this.depart = moment(depart).format(this.config.dateFormat);
      }
    },
    getQueryVariable: function getQueryVariable(variable) {
      var query = window.location.search.substring(1);
      var vars = query.split("&");
      for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split("=");
        if (pair[0] == variable) {
          return pair[1];
        }
      }
      return false;
    },
    parseDate: function parseDate(input) {
      var parts = input.match(/(\d+)/g);
      return new Date(parts[0], parts[1] - 1, parts[2]);
    },

    featuredPropertiesSlider: function featuredPropertiesSlider() {
      var flkty = document.querySelector('.search-feat-props-wrapper');
      if (flkty) {
        new Flickity(flkty, {
          // options
          cellAlign: 'left',
          contain: true,
          prevNextButtons: false,
          pageDots: false,
          setGallerySize: false,
          watchCSS: true
        });
      }
    },

    //search input focused
    mobileClose: function mobileClose() {
      if (Foundation.MediaQuery.current == 'small' || Foundation.MediaQuery.current == 'medium') {
        setTimeout(this.featuredPropertiesSlider, 250);
      }

      if (Foundation.MediaQuery.current == 'small' || Foundation.MediaQuery.current == 'medium') {
        $('.fa-search').hide();
        $('.search-close').show();

        $('.search-booking-open').show();
        $('.search-code-small').css('display', 'flex');
        $('.search-my-location').css('display', 'block');

        $('.search-field .field-errors').hide();
        this.clearitems();
      } else {
        $('.search-code-large').css('display', 'inline-block');

        $('.search-field .field-errors').hide();
      }

      //this.onClickQuery();
      this.showResults = true;
      this.openDatepicker = false;
      this.mobileFocused = true;

      setTimeout(function () {
        this.loading = false;
      }, 1000);
    },

    onBlur: function onBlur() {
      $('.search-field .field-errors').hide();

      if ($(window).width() > 1024 && this.showResults == false) {
        $('body').removeClass('search-focused');
      }
    },

    onKeyDown: function onKeyDown(event) {
      //assign brand slug if cookies are removed.
      if (this.brandInfo.code == 'MALL') {
        $('.searchform').attr('action', '/' + this.lang + '/search-results');
      } else {
        $('.searchform').attr('action', '/' + this.lang + '/' + this.brandInfo.slug + '/search-results');
      }

      if (this.keydownTimeout) clearTimeout(this.keydownTimeout);

      this.keydownTimeout = setTimeout(function () {
        if (event.which == 27) {
          this.cancel();
        } else {
          this.trackingQuery = this.query;
          var val = this.query;

          if (val.length >= 2) {
            this.clearitems();
            this.error = false;
            this.lookupQuery();
            this.showResults = true;
            this.openDatepicker = false;
            this.mobileFocused = true;
            this.searchError = true;
            $('.searchwrapper').addClass('results-open');
            $('.search-field .field-errors').hide();

            if (Foundation.MediaQuery.current == 'small' || Foundation.MediaQuery.current == 'medium') {
              $('.search-code-small').css('display', 'flex');
              $('.search-my-location').css('display', 'block');
            } else {
              $('.search-code-large').css('display', 'inline-block');
            }
          } else if (val.length > 0) {
            //$('.search-cancel').fadeIn(250);
            $('.search-booking-open').show();
            this.showResults = true;

            if (Foundation.MediaQuery.current == 'small' || Foundation.MediaQuery.current == 'medium') {
              $('.fa-search').hide();
              $('.search-close').show();
              $('.search-code-small').css('display', 'flex');
              $('.search-my-location').css('display', 'block');
            } else {
              $('.search-code-large').css('display', 'inline-block');
              //$('.search-field .field-errors').hide();
            }
          } else {
            this.showResults = true;
            $('.fa-search').show();
            //$('.search-cancel').fadeOut(250);
            $('.search-booking-open').show();
            $('.searchwrapper').removeClass('results-open');

            if (Foundation.MediaQuery.current == 'small' || Foundation.MediaQuery.current == 'medium') {
              $('.fa-search').hide();
              $('.search-close').show();
              $('.search-code-small').css('display', 'flex');
              $('.search-my-location').css('display', 'block');
            } else {
              //$('.search-field .field-errors').hide();
              $('.search-close').hide();
              $('.search-code').hide();
              $('.search-my-location').hide();
            }
          }
        }
      }.bind(this), 300);
    },

    clearstays: function clearstays() {
      this.staysitems = [];
      this.topdestinationsitems = [];
    },

    clearitems: function clearitems() {
      this.staysitems = [];
      this.topdestinationsitems = [];
      this.locationitems = [];
      this.hotelitems = [];
      this.airportitems = [];
      this.attractionitems = [];
    },

    // recent searches will load 10.
    recentsearchescomputed: function recentsearchescomputed(recentsearches) {
      if (typeof recentsearches == 'string') {
        this.recentsearchitems = JSON.parse(recentsearches).slice(0, 9).reverse();
      } else {
        this.recentsearchitems = recentsearches.slice(0, 9).reverse();
      }
    },
    stayscomputed: function stayscomputed(stays) {
      this.staysitems = stays.slice(0, 5);
    },
    topdestinationscomputed: function topdestinationscomputed(topdestinations) {
      this.topdestinationsitems = topdestinations.slice(0, 5);
    },
    locationscomputed: function locationscomputed(locations) {
      this.locationitems = locations.slice(0, 10);
    },
    hotelscomputed: function hotelscomputed(hotels) {
      this.allhotelitems = hotels;
      this.hotelitems = hotels.slice(0, 5);
    },
    airportscomputed: function airportscomputed(airports) {
      this.airportitems = airports.slice(0, 5);
    },
    attractionscomputed: function attractionscomputed(attractions) {
      this.attractionitems = attractions.slice(0, 5);
    },
    featuredpropertiescomputed: function featuredpropertiescomputed(featuredproperties) {
      this.featuredpropertiesitems = featuredproperties;
    },
    mallfeaturedpropertiescomputed: function mallfeaturedpropertiescomputed(mallfeaturedproperties) {
      this.mallfeaturedpropertiesitems = mallfeaturedproperties;
    },


    onClickQuery: function onClickQuery() {
      this.loading = true;

      var brandcode = this.brandInfo.code;
      var recentsearches = Cookies.get('CRZ_LOC');

      if (recentsearches) {
        this.recentsearchescomputed(recentsearches);
      }

      $.ajax({
        url: '/ajax/recent-stays?brand=' + brandcode,
        type: 'get',
        dataType: 'json',
        async: true,
        success: function (data) {

          this.loading = false;
          this.clearstays();

          if (!data.data) {
            this.error = true;
            return; // no results
          } else {

            var stays = [];
            if (data.data.RecentStays && !$.isEmptyObject(data.data.RecentStays)) stays = $.isArray(data.data.RecentStays.record) ? data.data.RecentStays.record : [data.data.RecentStays.record];
            this.stayscomputed(stays);

            var topdestinations = [];
            if (data.data.TopDestinations && !$.isEmptyObject(data.data.TopDestinations)) topdestinations = $.isArray(data.data.TopDestinations.record) ? data.data.TopDestinations.record : [data.data.TopDestinations.record];
            this.topdestinationscomputed(topdestinations);
          }
        }.bind(this),
        error: function error(err) {
          console.log(err);
        }
      });
    },

    lookupQuery: function lookupQuery() {
      this.loading = true;

      var keywords = this.query;
      var brandcode = this.brandInfo.code;

      var recentsearches = Cookies.get('CRZ_LOC');
      if (recentsearches) {
        this.recentsearchescomputed(recentsearches);
      }

      $.ajax({
        url: '/ajax/search?keywords=' + keywords + '&brand=' + brandcode,
        type: 'get',
        dataType: 'json',
        async: true,
        success: function (data) {

          this.loading = false;
          this.clearitems();

          if (!data.data) {
            return; // no results
          } else {

            var locations = [];
            if (data.data.Locations && !$.isEmptyObject(data.data.Locations)) locations = $.isArray(data.data.Locations.record) ? data.data.Locations.record : [data.data.Locations.record];
            this.locationscomputed(locations);

            var stays = [];
            if (data.data.RecentStays && !$.isEmptyObject(data.data.RecentStays)) stays = $.isArray(data.data.RecentStays.record) ? data.data.RecentStays.record : [data.data.RecentStays.record];
            this.stayscomputed(stays);

            var topdestinations = [];
            if (data.data.TopDestinations && !$.isEmptyObject(data.data.TopDestinations)) topdestinations = $.isArray(data.data.TopDestinations.record) ? data.data.TopDestinations.record : [data.data.TopDestinations.record];
            this.topdestinationscomputed(topdestinations);

            var hotels = [];
            if (data.data.Properties && !$.isEmptyObject(data.data.Properties)) hotels = $.isArray(data.data.Properties.record) ? data.data.Properties.record : [data.data.Properties.record];
            this.hotelscomputed(hotels);

            var airports = [];
            if (data.data.Airports && !$.isEmptyObject(data.data.Airports)) airports = $.isArray(data.data.Airports.record) ? data.data.Airports.record : [data.data.Airports.record];
            this.airportscomputed(airports);

            var attractions = [];
            if (data.data.Attractions && !$.isEmptyObject(data.data.Attractions)) attractions = $.isArray(data.data.Attractions.record) ? data.data.Attractions.record : [data.data.Attractions.record];
            this.attractionscomputed(attractions);
          }
        }.bind(this),
        error: function error(err) {
          console.log(err);
        }
      });
    },

    //search results promo code open
    promocodePanelOpen: function promocodePanelOpen() {
      if (this.promocodes.isOpen == false) {
        this.showResults = true;
        this.promocodes.isOpen = true;
        $('.show-results-panel').addClass('promo-active');
      } else {
        this.promocodes.isOpen = false;
        $('.show-results-panel').removeClass('promo-active');
      }

      var cities = [];
      var states = [];
      var hotels = [];
      var hotelsbrands = [];
      var hiLowContent = 0;

      if (this.propertiesitems.length > 0) {
        this.propertiesitems.forEach(function (element) {
          hotels.push(element.engineid);

          var brandsindex = hotelsbrands.indexOf(element.brand.record.code);
          if (brandsindex === -1) {
            hotelsbrands.push(element.brand.record.code);
          }

          var citiesindex = cities.indexOf(element.city);
          if (citiesindex === -1) {
            cities.push(element.city);
          }

          if (!$.isEmptyObject(element.state)) {
            var statesindex = states.indexOf(element.state);
            if (statesindex === -1) {
              states.push(element.state);
            }
          }
        });
      }

      var hotelsString = hotels.join('|');
      var hotelsbrandsString = hotelsbrands.join('|');
      var citiesString = cities.join('|');
      var statesString = states.join('|');

      if (this.travelGuideitems.length > 0) {
        if (this.travelGuideitems.attraction.length > 0) {
          hiLowContent = '1';
        } else {
          hiLowContent = '0';
        }
      } else {
        hiLowContent = '0';
      }

      var promocode = [];
      var promocodetype = [];
      if (store.promocodes.codes.length > 0) {
        store.promocodes.codes.forEach(function (promo) {
          promocode.push(promo.code);
          promocodetype.push(promo.name);
        });
      }

      var promoNames = promocode.join('|');
      var promoTypes = promocodetype.join('|');

      var searchLoc = '';
      if (this.searchType == 'state' || this.searchType == 'city' || this.searchType == 'country') {
        searchLoc = 'Location';
      } else if (this.searchType == 'attraction') {
        searchLoc = 'Attraction';
      } else if (this.searchType == 'airport') {
        searchLoc = 'Airport';
      }

      var searchResults = 0;
      if (store.brand == true) {
        if (store.brandpropertiesitems.length < 1 && store.othercarlsonproperties.length < 1 && store.propertiesitems.length < 1) {
          searchResults = 0;
        }
      } else {
        if (store.propertiesitems.length < 1) {
          searchResults = 0;
        }
      }

      var facilitator = '';
      if (this.getQueryParam("facilitator") || this.getQueryParam("facilitatorId") || this.getQueryParam("faciliatatorID") || this.getQueryParam("facilitatorid") || this.getQueryParam("facilitatorID")) {
        facilitator = this.getQueryParam("facilitator") || this.getQueryParam("facilitatorId") || this.getQueryParam("faciliatatorID") || this.getQueryParam("facilitatorid") || this.getQueryParam("facilitatorID");
      }
      this.facilitator = facilitator;

      var self = this;

      var webViewString;
      if (iswebview(navigator.userAgent)) {
        webViewString = 'Yes|' + self.getMobileOperatingSystem();
      } else {
        webViewString = 'No';
      }
      window.utag.view({
        'page.pageInfo.pageName': 'rateCodeAddToSearchOverlay',
        'page.pageInfo.pagePath': self.pageInfo.pagePath,
        'page.pageInfo.destinationURL': self.pageInfo.destinationURL,
        'page.pageInfo.referringURL': self.pageInfo.referringURL,
        'page.pageInfo.language': self.pageInfo.language,
        'page.pageInfo.geoRegion': self.pageInfo.geoRegion,
        'page.pageInfo.systemEnv': self.pageInfo.systemEnv,
        'page.pageInfo.effectiveDate': self.pageInfo.effectiveDate,
        'page.pageInfo.primaryCategory': 'Search',
        'page.pageInfo.dayOfWeek': self.pageInfo.dayOfWeek,
        'page.pageInfo.timeOfDay': self.pageInfo.timeOfDay,
        'page.pageInfo.timeZone': self.pageInfo.timezone,
        'page.pageInfo.brand': self.brandInfo.slug,
        'page.pageInfo.facilitatorID': self.facilitator,
        'page.pageInfo.currencyCode': self.pageInfo.currencyCode,
        'page.pageInfo.bvCode': self.pageInfo.bvCode,
        'page.pageInfo.isWebview': webViewString,
        'user.userInfo.userID': self.userInfo.userId,
        'user.userInfo.loyaltyTier': self.userInfo.userLoyaltyTier,
        'search.term': self.keywordParam,
        'search.searchCity': citiesString,
        'search.searchState': statesString,
        'search.searchCountry': self.searchCountry,
        'search.rateCodeSearchType': promoNames,
        'search.rateCodeSearchID': promoTypes,
        'search.searchDimension': searchLoc,
        'search.searchHotelCode': hotelsString,
        'search.searchHotelBrand': hotelsbrandsString,
        'search.contentType': hiLowContent,
        'search.noSearchResults': searchResults
      });
    },

    cancel: function cancel() {
      this.showResults = false;
      this.mobileFocused = false;
      $('.searchwrapper').removeClass('results-open');
      $('.search-booking-open').show();
      $('.search-code').hide();
      $('.search-my-location').hide();
    },

    // Datepicker methods
    closepanels: function closepanels() {
      this.showResults = false;
      this.openDatepicker = !this.openDatepicker;
    },

    searchMyLocation: function searchMyLocation() {
      var self = this;

      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(success, error);
      }

      //Get the latitude and the longitude;
      function success(position) {
        var lat = position.coords.latitude;
        var lng = position.coords.longitude;
        var actionUrl = '/' + self.lang + self.action;

        this.locenabled = true;

        if (self.brand == 'true') {
          actionUrl += '?brand=' + self.brandInfo.slug + '&latitude=' + lat + '&longitude=' + lng + '&distance=50';
        } else {
          actionUrl += '?latitude=' + lat + '&longitude=' + lng + '&distance=50';
        }

        // submit here
        $('.searchform').attr('action', actionUrl).submit();
      }

      function error() {
        alert('Please enable location settings on your device.');
        console.log("Geocoder failed");
      }
    },

    formatDate: function formatDate(value, format) {
      return moment(value, this.config.dateFormat).format(format);
    },


    //form submit
    checkSearch: function checkSearch(e) {
      // If no check in has been selected, set it to today
      if (!this.arrive) {
        var today = new Date();
        this.arrive = moment(today, this.config.dateFormat).format(this.config.dateFormat);
      }
      // If no check out has been selected, set it to the day after the arrival
      if (!this.depart) {
        var arrive = moment(this.arrive, this.config.dateFormat);
        var depart = arrive.add(1, 'days');
        this.depart = moment(depart, this.config.dateFormat).format(this.config.dateFormat);
      }

      if (this.query == '' || this.query.length < 2) {
        if (e) {
          e.preventDefault();
        }

        if (this.selectedItem == '' && (Foundation.MediaQuery.current == 'small' || Foundation.MediaQuery.current == 'medium')) {
          if ($('.search-results .list-group li').length < 1) {
            var self = this;
            window.utag.link({
              'eventTracking.eventName': 'autoSuggestSearch',
              'search.autoSuggSearchChars': self.trackingQuery.length,
              'search.autoSuggSearchTerm': self.trackingQuery
            });
            return;
          } else {
            var firstItemResult = $('.search-results .list-group:first li:nth-child(2) a').attr('data-name');
            var firstItemResultURL = $('.search-results .list-group:first li:nth-child(2) a').attr('data-url');
            var firstItemResultIcon = $('.search-results .list-group:first li:nth-child(2) a').attr('data-icon');
            var firstItemResultType = $('.search-results .list-group:first li:nth-child(2) a').attr('data-type');
            var firstItemResultKey = $('.search-results .list-group:first li:nth-child(2) a').attr('data-key');

            $('.search-field .field-errors').hide();
            this.query = firstItemResult;
            this.selectedItemSearchClick = firstItemResultKey;

            if (firstItemResultType == 'property' || firstItemResultType == 'Properties') {
              this.action = firstItemResultURL + this.actionUrl('?');
            } else {
              this.action = firstItemResultURL + this.actionUrl('&');
            }

            var _self = this;
            window.utag.link({
              'eventTracking.eventName': 'autoSuggestSearch',
              'search.autoSuggSearchChars': _self.trackingQuery.length,
              'search.autoSuggSearchTerm': _self.trackingQuery
            });

            this.updateRecentSearches(firstItemResult, firstItemResultURL, firstItemResultIcon, firstItemResultType, firstItemResultKey);
          }
        } else {
          $('.search-field .field-errors').css('display', 'block');
          $('.search-code').hide();
          $('.search-my-location').hide();
          var _self2 = this;
          window.utag.link({
            'eventTracking.eventName': 'autoSuggestSearch',
            'search.autoSuggSearchChars': _self2.trackingQuery.length,
            'search.autoSuggSearchTerm': _self2.trackingQuery
          });
          return false;
        }
      } else if (this.query.length >= 2 && this.selectedItem == '') {

        if ($('.search-results .list-group li').length < 1 && this.searchAction != '') {
          var promourl = '';
          if (this.promocodes.code) {
            promourl += '&promo=' + this.promocodes.code;
          }
          if (this.promocodes.corporateAccountId) {
            promourl += '&corp=' + this.promocodes.corporateAccountId;
          }
          if (this.promocodes.travelAgencyId) {
            promourl += '&iata=' + this.promocodes.travelAgencyId;
          }
          if (this.promocodes.ecertCode) {
            promourl += '&ecert=' + this.promocodes.ecertCode;
          }
          if (this.displayIn != 'currency') {
            promourl += '&displayIn=' + this.displayIn;
          } else if (this.getQueryParam('displayIn') != '' || this.getQueryParam('displayIn') != false) {
            promourl += '&displayIn=' + this.getQueryParam('displayIn');
          }
          if (this.getQueryParam("facilitator")) {
            promourl += '&facilitator=' + this.getQueryParam("facilitator");
          } else if (this.getQueryParam("facilitatorId")) {
            promourl += '&facilitatorId=' + this.getQueryParam("facilitatorId");
          }

          var _self3 = this;
          window.utag.link({
            'eventTracking.eventName': 'autoSuggestSearch',
            'search.autoSuggSearchChars': _self3.trackingQuery.length,
            'search.autoSuggSearchTerm': _self3.trackingQuery
          });
          this.action = this.searchAction + '&arrive=' + this.arrive + '&depart=' + this.depart + promourl;
        } else if ($('.search-results .list-group li').length < 1) {
          if (e) {
            e.preventDefault();
          }
          var _self4 = this;
          window.utag.link({
            'eventTracking.eventName': 'autoSuggestSearch',
            'search.autoSuggSearchChars': _self4.trackingQuery.length,
            'search.autoSuggSearchTerm': _self4.trackingQuery
          });
          return false;
        } else {
          if (e) {
            e.preventDefault();
          }
          firstItemResult = $('.search-results .list-group:first li:nth-child(2) a').attr('data-name');
          firstItemResultURL = $('.search-results .list-group:first li:nth-child(2) a').attr('data-url');
          firstItemResultIcon = $('.search-results .list-group:first li:nth-child(2) a').attr('data-icon');
          firstItemResultType = $('.search-results .list-group:first li:nth-child(2) a').attr('data-type');
          firstItemResultKey = $('.search-results .list-group:first li:nth-child(2) a').attr('data-key');

          $('.search-field .field-errors').hide();
          this.query = firstItemResult;
          this.selectedItemSearchClick = firstItemResultKey;

          if (firstItemResultType == 'property' || firstItemResultType == 'Properties') {
            this.action = firstItemResultURL + this.actionUrl('?');
          } else {
            this.action = firstItemResultURL + this.actionUrl('&');
          }
          var _self5 = this;
          window.utag.link({
            'eventTracking.eventName': 'autoSuggestSearch',
            'search.autoSuggSearchChars': _self5.trackingQuery.length,
            'search.autoSuggSearchTerm': _self5.trackingQuery
          });
          this.updateRecentSearches(firstItemResult, firstItemResultURL, firstItemResultIcon, firstItemResultType, firstItemResultKey);
        }
      } else if (this.query.length >= 2 && this.selectedItem.length > 0) {
        this.updateRecentSearches(this.selectedItem, this.selectedItemURL, this.selectedItemIcon, this.selectedItemCategory, this.selectedItemSearchClick);

        this.query = this.selectedItem;
        this.action = this.selectedItemURL + this.actionUrl('&');

        var _self6 = this;
        window.utag.link({
          'eventTracking.eventName': 'autoSuggestSearch',
          'search.autoSuggSearchChars': _self6.trackingQuery.length,
          'search.autoSuggSearchTerm': _self6.trackingQuery
        });

        if (this.selectedItemCategory == 'Properties' || this.selectedItemCategory == 'property') {
          this.action = this.selectedItemURL + this.actionUrl('?');
        } else {
          this.action = this.selectedItemURL + this.actionUrl('&');
        }
      }

      if (firstItemResultType == 'Cities' || firstItemResultType == 'Countries' || firstItemResultType == 'States' || firstItemResultType == 'Properties' || this.selectedItemCategory == 'Cities' || this.selectedItemCategory == 'Countries' || this.selectedItemCategory == 'States' || this.selectedItemCategory == 'Properties') {
        //update top results
        $.ajax({
          url: "/ajax/search-click?click=" + this.selectedItemSearchClick,
          type: 'post',
          dataType: 'json',
          async: true,
          success: function () {
            console.log('success');
          }.bind(this),
          error: function error(err) {
            console.log(err);
          }
        });
      }

      // add source
      if ($("body[data-brand]").length != 0 && $("body[data-brand]").attr('data-brand') != '' && $("body[data-brand]").attr('data-brand') != 'mall') {
        if (window.innerWidth < 737) {
          this.action += '&source=MW';
        } else {
          this.action += '&source=RW';
        }
      } else {
        if (window.innerWidth < 737) {
          this.action += '&source=CC';
        } else {
          this.action += '&source=GP';
        }
      }

      // submit here
      $('.searchform').attr('action', this.action).submit();
    },

    actionUrl: function actionUrl(symbol) {
      var url = symbol + 'arrive=' + this.arrive + '&depart=' + this.depart;
      if (this.promocodes.code) {
        var noCode = ["AAA", "GOVT", "SR CIT"];
        if (noCode.indexOf(this.promocodes.code) != -1) {
          url += '&rmccode=' + this.promocodes.code;
        } else {
          url += '&promo=' + this.promocodes.code;
        }
      }
      if (this.promocodes.corporateAccountId) {
        url += '&corp=' + this.promocodes.corporateAccountId;
      }
      if (this.promocodes.travelAgencyId) {
        url += '&iata=' + this.promocodes.travelAgencyId;
      }
      if (this.promocodes.ecertCode) {
        url += '&ecert=' + this.promocodes.ecertCode;
      }
      if (this.displayIn != 'currency') {
        url += '&displayIn=' + this.displayIn;
      } else if (this.getQueryParam('displayIn') != '' || this.getQueryParam('displayIn') != false) {
        url += '&displayIn=' + this.getQueryParam('displayIn');
      }
      if (this.getQueryParam("facilitator")) {
        url += '&facilitator=' + this.getQueryParam("facilitator");
      } else if (this.getQueryParam("facilitatorId")) {
        url += '&facilitatorId=' + this.getQueryParam("facilitatorId");
      }
      return url;
    },

    updateRecentSearches: function updateRecentSearches(name, url, icon, category, key) {
      //set cookie on search submit to update recent searches
      var recentsearches = Cookies.get('CRZ_LOC');
      var newSearch;

      if (recentsearches) {
        if (typeof recentsearches == 'string') {
          recentsearches = JSON.parse(recentsearches);
        } else {
          recentsearches = JSON.parse(JSON.stringify(recentsearches));
        }
      } else {
        recentsearches = [];
      }

      newSearch = {
        name: name,
        url: url,
        icon: icon,
        category: category,
        key: key
      };

      //map searches into new array, only the names
      var recentNames = recentsearches.map(function (search) {
        return search.name;
      });

      //check the index of the search
      var newSearchIndex = recentNames.indexOf(newSearch.name);

      // check if this search is not already the latest search
      if (newSearchIndex === -1) {
        recentsearches.push(newSearch);
        // remove the first if we're over the limit
        if (recentsearches.length > 4) {
          recentsearches.shift();
        }
        if (this.cookiesAllowed) {
          Cookies.set('CRZ_LOC', JSON.stringify(recentsearches), { expires: 365 });
        }
      } else if (newSearchIndex > 0) {
        recentsearches.splice(newSearchIndex, 1); // this removes the existing search
        recentsearches.push(newSearch);
        if (this.cookiesAllowed) {
          Cookies.set('CRZ_LOC', JSON.stringify(recentsearches), { expires: 365 });
        }
      }
    },

    getQueryParam: function getQueryParam(variableArg) {
      var variable = variableArg.toLowerCase();
      var query = window.location.search.substring(1);
      var vars = query.split("&");
      for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split("=");
        if (pair[0].toLowerCase() == variable) {
          return pair[1];
        }
      }
      return false;
    },

    promoOpen: function promoOpen() {
      if (this.sharedState.promocodes.isOpen == false) {
        this.sharedState.showResults = true;
        this.sharedState.promocodes.isOpen = true;
        $('.show-results-panel').addClass('promo-active');
      } else {
        this.sharedState.showResults = false;
        this.sharedState.promocodes.isOpen = false;
        $('.show-results-panel').removeClass('promo-active');
      }
    },
    promocodesOpen: function promocodesOpen() {
      this.promocodes.isOpen = true;
    },
    promocodesClose: function promocodesClose() {
      this.promocodes.isOpen = false;
    },

    getMobileOperatingSystem: function getMobileOperatingSystem() {
      var userAgent = navigator.userAgent || navigator.vendor || window.opera;
      if (/windows phone|IEMobile/i.test(userAgent)) {
        return 'Windows';
      } else if (/Android/i.test(userAgent)) {
        return 'Android';
      } else if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
        return 'iOS';
      } else if (/Opera Mini/i.test(userAgent)) {
        return 'Opera';
      } else if (/BlackBerry/i.test(userAgent)) {
        return 'BlackBerry';
      } else {
        return 'Unknown';
      }
    }
  },

  watch: {
    // Manage opening/closing of results and datepicker
    showResults: function showResults(newVal) {
      if (newVal) {
        // Open Results
        $('body').addClass('search-focused');
        if ($(window).width() < 1024) {
          // Only add no-scroll for smaller screens
          // The search console needs the header to stay in the same scrolled or
          // no scrolled state as when you opened it
          $('.wrapper').addClass('no-scroll');
        }
      } else {
        $('.wrapper').removeClass('no-scroll');

        if ($(window).width() > 1024) {
          $('body').removeClass('search-focused');
        }
      }
    },
    openDatepicker: function openDatepicker(newVal) {
      if (newVal) {
        // Open Datepicker
        $('body').addClass('search-focused');
        if ($(window).width() < 1024) {
          // Only add no-scroll for smaller screens
          // The datepicker needs the header to stay in the same scrolled or
          // no scrolled state as when you opened it
          $('.wrapper').addClass('no-scroll');
        }
      } else {
        // Close Datepicker
        if (this.showResults == false) {
          $('body').removeClass('search-focused');
          $('.wrapper').removeClass('no-scroll');
        }
      }
    },

    "depart": function depart() {
      if (this.arrive && this.depart) {
        this.openDatepicker = false;

        if (Foundation.MediaQuery.current == 'small' || Foundation.MediaQuery.current == 'medium') {
          if (this.query.length >= 2) {
            this.checkSearch();
          }
        }
      }
    }
  }
});

/***/ }),

/***/ 368:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Vue = __webpack_require__(3);
var moment = __webpack_require__(0);
var $ = __webpack_require__(2);
var Foundation = __webpack_require__(14);
var Cookies = __webpack_require__(46);

// Template
var template = __webpack_require__(369);
var store = __webpack_require__(32);

var HotelSearch = Vue.component('locationcolumn', {
  template: template,

  data: function data() {
    return store;
  },


  created: function created() {
    if (this.brandInfo.name === 'Mall' || this.brandInfo.name === '') {
      this.brand = false;
    } else {
      this.brand = true;
    }

    $(window).on('resize.devicewidth', function () {
      var width = window.innerWidth;

      if (width < 415) {
        //mobile portrait
        this.deviceWidth = 'mobilePortrait';
      } else if (width < 737) {
        //mobile landscape
        this.deviceWidth = 'mobileLandscape';
      } else if (width < 769) {
        //tablet portrait
        this.deviceWidth = 'tabletPortrait';
      } else if (width < 801) {
        //android tablet portrait
        this.deviceWidth = 'androidTabletPortrait';
      } else if (width < 1025) {
        //tablet landscape
        this.deviceWidth = 'tabletLandscape';
      } else if (width > 1024) {
        // desktop
        this.deviceWidth = 'desktop';
      }
    }.bind(this)).trigger('resize.devicewidth');
  },

  mounted: function mounted() {
    var width = window.innerWidth;

    //show the results dropdown panel when input field is clicked
    $('.search-field .search-loc').on('click', function () {
      $('.bookingview-dates').hide();

      if (this.query !== '') {
        this.showResults = true;
        if ($(window).width() < 767) {
          $('.wrapper').addClass('no-scroll');
        }
      }
    });

    $('.search-field .search-loc').on('keypress', function (ev) {
      if (ev.which === 13 || ev.which === 27) {
        $('.search-field .search-loc').click();
      }
    });

    $('.search-field .search-loc').on('blur', function () {
      if (this.query == undefined) {
        $('.wrapper').removeClass('no-scroll');
      }
    });

    //hide the results dropdown panel for mobile/tablet
    $('.search-cancel').on('click', function (e) {
      e.preventDefault();
      $('.search-loc').val('');
      $(this).fadeOut(250);
      $('.search-close').hide();
      $('.fa-search').show();
      $('.wrapper').removeClass('no-scroll');
      $('body').removeClass('search-focused');
      $('.searchwrapper').removeClass('results-open');
      $('div.show-results-panel').hide();
      $('.search-results').hide(); //test
    });

    $('.search-cancel').on('keypress', function (ev) {
      if (ev.which === 13 || ev.which === 27) {

        ev.preventDefault();
        setTimeout(function () {
          $('.search-loc').val('');
          $(this).fadeOut(250);
          $('.search-close').hide();
          $('.fa-search').show();
          $('.wrapper').removeClass('no-scroll');
          $('body').removeClass('search-focused');
          $('.searchwrapper').removeClass('results-open');
          $('div.show-results-panel').hide();
          $('.search-results').hide(); //test
        }, 500);
      }
    });

    $('.search-close').on('click', function () {

      $('.search-loc').val('');
      $(this).hide();
      this.mobileFocused = false;
      //$('.search-cancel').fadeOut(250);
      $('.search-booking-open').fadeOut(250);
      $('.fa-search').show();
      $('.wrapper').removeClass('no-scroll');
      $('body').removeClass('search-focused');
      $('.searchwrapper').removeClass('results-open');
      $('.search-code').hide();
      $('.search-my-location').hide();
      // $('.show-results-panel').hide();
    });
    $('.search-close').on('keypress', function (ev) {

      if (ev.which === 13 || ev.which === 27) {
        this.HotelSearch.methods.resultsPanelClose(); //closeResults()
      }
    });
  },

  methods: {
    //hide the results dropdown panel
    closeResults: function closeResults(item) {

      console.log('item: ', item);

      this.query = item.name;
      this.selectedItem = item.name;

      if (item.key) {
        this.selectedItemSearchClick = item.key;
      } else {
        this.selectedItemSearchClick = item['@attributes'].key;
      }

      if (!$.isEmptyObject(item.icon)) {
        this.selectedItemIcon = 'fa ' + item.icon;
      } else {
        var itemCat = '';

        // if (item['@attributes']) {
        //   itemCat = item['@attributes'].type;
        // } else if (item.category) {
        //   itemCat = item.category;
        // } else {
        //   itemCat = 'Properties';
        // }

        if (item.category) {
          itemCat = item.category;
        } else if (item['@attributes']) {
          if (item['@attributes'].type == 'RecentStays') {
            itemCat = 'Properties';
          } else {
            itemCat = item['@attributes'].type;
          }
        } else {
          itemCat = 'Properties';
        }

        if (itemCat == 'Cities' || itemCat == 'Countries' || itemCat == 'States') {
          this.selectedItemIcon = 'fa fa-map-marker';
        } else if (itemCat == 'Properties' || itemCat == 'RecentStays') {
          this.selectedItemIcon = 'fa fa-building-o';
        } else if (itemCat == 'Airports') {
          this.selectedItemIcon = 'fa fa-plane';
        } else {
          this.selectedItemIcon = 'fa fa-building-o';
        }
      }

      var itemCategory = '';
      if (item.category) {
        itemCategory = item.category;
      } else if (item['@attributes']) {
        if (item['@attributes'].type == 'RecentStays') {
          itemCategory = 'Properties';
        } else {
          itemCategory = item['@attributes'].type;
        }
      } else {
        itemCategory = 'Properties';
      }

      var itemURL = '';
      if (item.url) itemURL = item.url;else if (item['@attributes'].url) itemURL = item['@attributes'].url;
      // if ( itemCategory == 'Properties' || itemCategory == 'RecentStays') {
      //   if (item['@attributes'])
      //     itemURL = item['@attributes'].url
      //   else if (item.url)
      //     itemURL = item.url;
      // } else {
      //   if (item['@attributes'])
      //     itemURL = item['@attributes'].url
      //   else if (item.url)
      //     itemURL = item.url;
      // }

      this.selectedItemURL = itemURL;

      if ($(window).width() < 767) {
        $('.search-loc').attr('placeholder', '');
      }

      this.selectedItemCategory = itemCategory;
      this.showResults = false;
      $('.search-code-small').hide();
      $('.search-my-location').hide();
      $('.searchform').attr('action', itemURL);

      if (Foundation.MediaQuery.current == 'small' || Foundation.MediaQuery.current == 'medium') {

        if (this.arrive && this.depart) {
          this.mobilecheckSearch();
        } else {
          this.openDatepicker = true;
        }
      }
    },

    //form submit
    mobilecheckSearch: function mobilecheckSearch(e) {
      if (this.arrive == '') {
        var today = new Date();
        var todayFormatted = moment(today, this.config.dateFormat).format('YYYY-MM-DD');
        this.arrive = todayFormatted;
      }

      if (this.depart == '') {
        var tomorrow = new Date(new Date().valueOf() + 1000 * 3600 * 24);
        var tomorrowFormatted = moment(tomorrow, this.config.dateFormat).format('YYYY-MM-DD');
        this.depart = tomorrowFormatted;
      }

      if (this.query == '' || this.query.length < 2) {
        if (e) {
          e.preventDefault();
        }

        if (this.selectedItem == '' && (Foundation.MediaQuery.current == 'small' || Foundation.MediaQuery.current == 'medium')) {
          if ($('.search-results .list-group li').length < 1) {
            var self = this;
            window.utag.link({
              'eventTracking.eventName': 'autoSuggestSearch',
              'search.autoSuggSearchChars': self.trackingQuery.length,
              'search.autoSuggSearchTerm': self.trackingQuery
            });
            return;
          } else {
            var firstItemResult = $('.search-results .list-group:first li:nth-child(2) a').attr('data-name');
            var firstItemResultURL = $('.search-results .list-group:first li:nth-child(2) a').attr('data-url');
            var firstItemResultIcon = $('.search-results .list-group:first li:nth-child(2) a').attr('data-icon');
            var firstItemResultType = $('.search-results .list-group:first li:nth-child(2) a').attr('data-type');
            var firstItemResultKey = $('.search-results .list-group:first li:nth-child(2) a').attr('data-key');

            $('.search-field .field-errors').hide();
            this.query = firstItemResult;
            this.selectedItemSearchClick = firstItemResultKey;

            if (firstItemResultType == 'property' || firstItemResultType == 'Properties') {
              this.action = firstItemResultURL + this.actionUrl('?');
            } else {
              this.action = firstItemResultURL + this.actionUrl('&');
            }

            var _self = this;
            window.utag.link({
              'eventTracking.eventName': 'autoSuggestSearch',
              'search.autoSuggSearchChars': _self.trackingQuery.length,
              'search.autoSuggSearchTerm': _self.trackingQuery
            });

            this.updateRecentSearches(firstItemResult, firstItemResultURL, firstItemResultIcon, firstItemResultType, firstItemResultKey);
          }
        } else {
          $('.search-field .field-errors').css('display', 'block');
          $('.search-code').hide();
          $('.search-my-location').hide();
          var _self2 = this;
          window.utag.link({
            'eventTracking.eventName': 'autoSuggestSearch',
            'search.autoSuggSearchChars': _self2.trackingQuery.length,
            'search.autoSuggSearchTerm': _self2.trackingQuery
          });
          return false;
        }
      } else if (this.query.length >= 2 && this.selectedItem == '') {

        if ($('.search-results .list-group li').length < 1 && this.searchAction != '') {
          var promourl = '';
          if (this.promocodes.code) {
            promourl += '&promo=' + this.promocodes.code;
          }
          if (this.promocodes.corporateAccountId) {
            promourl += '&corp=' + this.promocodes.corporateAccountId;
          }
          if (this.promocodes.travelAgencyId) {
            promourl += '&iata=' + this.promocodes.travelAgencyId;
          }
          if (this.promocodes.ecertCode) {
            promourl += '&ecert=' + this.promocodes.ecertCode;
          }
          if (this.displayIn != 'currency') {
            promourl += '&displayIn=' + this.displayIn;
          } else if (this.getQueryParam('displayIn') != '' || this.getQueryParam('displayIn') != false) {
            promourl += '&displayIn=' + this.getQueryParam('displayIn');
          }
          if (this.getQueryParam("facilitator")) {
            promourl += '&facilitator=' + this.getQueryParam("facilitator");
          } else if (this.getQueryParam("facilitatorId")) {
            promourl += '&facilitatorId=' + this.getQueryParam("facilitatorId");
          }

          var _self3 = this;
          window.utag.link({
            'eventTracking.eventName': 'autoSuggestSearch',
            'search.autoSuggSearchChars': _self3.trackingQuery.length,
            'search.autoSuggSearchTerm': _self3.trackingQuery
          });
          this.action = this.searchAction + '&arrive=' + this.arrive + '&depart=' + this.depart + promourl;
        } else if ($('.search-results .list-group li').length < 1) {
          if (e) {
            e.preventDefault();
          }
          var _self4 = this;
          window.utag.link({
            'eventTracking.eventName': 'autoSuggestSearch',
            'search.autoSuggSearchChars': _self4.trackingQuery.length,
            'search.autoSuggSearchTerm': _self4.trackingQuery
          });
          return false;
        } else {
          if (e) {
            e.preventDefault();
          }
          firstItemResult = $('.search-results .list-group:first li:nth-child(2) a').attr('data-name');
          firstItemResultURL = $('.search-results .list-group:first li:nth-child(2) a').attr('data-url');
          firstItemResultIcon = $('.search-results .list-group:first li:nth-child(2) a').attr('data-icon');
          firstItemResultType = $('.search-results .list-group:first li:nth-child(2) a').attr('data-type');
          firstItemResultKey = $('.search-results .list-group:first li:nth-child(2) a').attr('data-key');

          $('.search-field .field-errors').hide();
          this.query = firstItemResult;
          this.selectedItemSearchClick = firstItemResultKey;

          if (firstItemResultType == 'property' || firstItemResultType == 'Properties') {
            this.action = firstItemResultURL + this.actionUrl('?');
          } else {
            this.action = firstItemResultURL + this.actionUrl('&');
          }

          var _self5 = this;
          window.utag.link({
            'eventTracking.eventName': 'autoSuggestSearch',
            'search.autoSuggSearchChars': _self5.trackingQuery.length,
            'search.autoSuggSearchTerm': _self5.trackingQuery
          });
          this.updateRecentSearches(firstItemResult, firstItemResultURL, firstItemResultIcon, firstItemResultType, firstItemResultKey);
        }
      } else if (this.query.length >= 2 && this.selectedItem.length > 0) {
        this.updateRecentSearches(this.selectedItem, this.selectedItemURL, this.selectedItemIcon, this.selectedItemCategory, this.selectedItemSearchClick);

        this.query = this.selectedItem;
        this.action = this.selectedItemURL + this.actionUrl('&');

        var _self6 = this;
        window.utag.link({
          'eventTracking.eventName': 'autoSuggestSearch',
          'search.autoSuggSearchChars': _self6.trackingQuery.length,
          'search.autoSuggSearchTerm': _self6.trackingQuery
        });

        if (this.selectedItemCategory == 'Properties' || this.selectedItemCategory == 'property') {
          this.action = this.selectedItemURL + this.actionUrl('?');
        } else {
          this.action = this.selectedItemURL + this.actionUrl('&');
        }
      }

      if (firstItemResultType == 'Cities' || firstItemResultType == 'Countries' || firstItemResultType == 'States' || firstItemResultType == 'Properties' || this.selectedItemCategory == 'Cities' || this.selectedItemCategory == 'Countries' || this.selectedItemCategory == 'States' || this.selectedItemCategory == 'Properties') {

        //update top results
        $.ajax({
          url: "/ajax/search-click?click=" + this.selectedItemSearchClick,
          type: 'post',
          dataType: 'json',
          async: true,
          success: function () {
            console.log('success');
          }.bind(this),
          error: function error(err) {
            console.log(err);
          }
        });
      }
      // add source
      if ($("body[data-brand]").length != 0 && $("body[data-brand]").attr('data-brand') != '' && $("body[data-brand]").attr('data-brand') != 'mall') {
        if (window.innerWidth < 737) {
          this.action += '&source=MW';
        } else {
          this.action += '&source=RW';
        }
      } else {
        if (window.innerWidth < 737) {
          this.action += '&source=CC';
        } else {
          this.action += '&source=GP';
        }
      }
      // submit here
      $('.searchform').attr('action', this.action).submit();
    },

    updateRecentSearches: function updateRecentSearches(name, url, icon, category, key) {
      //set cookie on search submit to update recent searches
      var recentsearches = Cookies.get('CRZ_LOC');
      var newSearch;

      if (recentsearches) {
        recentsearches = JSON.parse(recentsearches);
      } else {
        recentsearches = [];
      }

      newSearch = {
        name: name,
        url: url,
        icon: icon,
        category: category,
        key: key
      };

      //map searches into new array, only the names
      var recentNames = recentsearches.map(function (search) {
        return search.name;
      });

      //check the index of the search
      var newSearchIndex = recentNames.indexOf(newSearch.name);

      // check if this search is not already the latest search
      if (newSearchIndex === -1) {
        recentsearches.push(newSearch);
        // remove the first if we're over the limit
        if (recentsearches.length > 4) {
          recentsearches.shift();
        }
        Cookies.set('CRZ_LOC', JSON.stringify(recentsearches), { expires: 365 });
      } else if (newSearchIndex > 0) {
        recentsearches.splice(newSearchIndex, 1); // this removes the existing search
        recentsearches.push(newSearch);
        Cookies.set('CRZ_LOC', JSON.stringify(recentsearches), { expires: 365 });
      }
    },

    //search results dropdown panel x icon close
    resultsPanelClose: function resultsPanelClose() {
      var firstItemResult = $('.search-results .list-group:first li:nth-child(2) a').attr('data-name');
      var firstItemResultURL = $('.search-results .list-group:first li:nth-child(2) a').attr('data-url');
      var firstItemResultKey = $('.search-results .list-group:first li:nth-child(2) a').attr('data-key');

      this.promocodes.isOpen = false;
      this.showResults = false;

      if (firstItemResult != undefined && firstItemResultURL != undefined) {
        this.query = firstItemResult;
        this.selectedItemSearchClick = firstItemResultKey;
        $('.searchform').attr('action', firstItemResultURL);
      }

      $('.search-code').hide();
      $('.search-my-location').hide();
      $('.searchwrapper').removeClass('results-open');
    },

    highlightName: function highlightName(words) {
      var searchquery = this.query;
      var char;
      var specialChars = {
        "í": "i",
        "™": "",
        "®": "",
        "ö": "o",
        "@": "at",
        "á": "a",
        "Á": "a",
        "é": "e",
        "'": "",
        "ü": "u",
        "ñ": "n",
        "Ç": "c",
        "ç": "c",
        " ": "-",
        "&": "and",
        "---": "-",
        ".": "",
        ",": "",
        "/": "-",
        "â": "a",
        "É": "E",
        "apos;": ""
      };

      if (this.query) {
        for (char in specialChars) {
          if (char && words.indexOf(char) !== -1) {
            searchquery += '|' + this.query.replace(new RegExp(specialChars[char], 'g'), char);
          }
          if (specialChars[char] && words.indexOf(specialChars[char]) !== -1) {
            searchquery += '|' + this.query.replace(new RegExp(char, 'g'), specialChars[char]);
          }
        }
      }

      if (!searchquery) return words;

      searchquery = searchquery.replace(/\(|\)|\.|\?/g, '\\$&');
      var iQuery = new RegExp(searchquery, 'ig');

      return words.replace(iQuery, function (matchedTxt) {
        return '<span class="highlight">' + matchedTxt + '</span>';
      });
    },

    showRecentSearch: function showRecentSearch(name) {
      if (this.query && this.highlightName(name) === name) return false;

      return true;
    },

    getIcon: function getIcon(category, icon) {
      if (category == 'Cities' || category == 'Countries' || category == 'States') {
        return 'fa fa-map-marker';
      } else if (category == 'Properties' || category == 'RecentStays') {
        return 'fa fa-building-o';
      } else if (category == 'Airports') {
        return 'fa fa-plane';
      } else if (category == 'Attractions') {
        return 'fa ' + icon;
      } else {
        return 'fa fa-building-o';
      }
    },

    propertiesName: function propertiesName(name) {
      var w = this.deviceWidth;

      if (w == 'mobileLandscape') {
        if (name.length > 50) {
          return true;
        } else {
          return false;
        }
      } else if (w == 'tabletPortrait') {
        if (name.length > 68) {
          return true;
        } else {
          return false;
        }
      } else if (w == 'androidTabletPortrait') {
        if (name.length > 58) {
          return true;
        } else {
          return false;
        }
      } else if (w == 'tabletLandscape') {
        if (name.length > 53) {
          return true;
        } else {
          return false;
        }
      } else if (w == 'desktop') {
        if (name.length > 60) {
          return true;
        } else {
          return false;
        }
      }
    },

    rateCalc: function rateCalc(rate, curr) {
      if (curr == 'USD') {
        return '$' + parseFloat(rate).toFixed(2) + ' ' + curr;
      }if (curr == 'PTS') {
        return this.numberWithCommas(rate) + ' ' + curr;
      } else {
        return parseFloat(rate).toFixed(2) + ' ' + curr;
      }
    }
  },

  computed: {
    matchedrecentsearches: function matchedrecentsearches() {
      return this.recentsearchitems.filter(function (search) {
        return this.showRecentSearch(search.name);
      }.bind(this));
    },

    onBrand: function onBrand() {
      var hotelcount = 0;
      var brandhotelitems = this.allhotelitems;

      brandhotelitems.forEach(function (hotelitem) {
        if (hotelitem.on_brand == 'Yes') hotelcount++;
      });

      console.log('hotelcount: ' + hotelcount);
      return hotelcount;
    }
  }
});

module.exports = HotelSearch;

/***/ }),

/***/ 369:
/***/ (function(module, exports) {

module.exports = "<div class=\"show-results-panel\">\r\n<a v-on:click=\"resultsPanelClose()\" v-on:keyup.esc=\"resultsPanelClose()\" v-on:keyup.enter=\"resultsPanelClose()\"  class=\"close-results show-for-large\" v-show=\"showResults\" tabindex=\"0\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 68 68\" class=\"svg svg-close\"><path class=\"fill\" d=\"M43.9 34l23.334-23.335-9.9-9.9L34 24.1 10.666.766l-9.9 9.9L24.1 34 .767 57.334l9.9 9.9L34 43.9l23.335 23.334 9.9-9.9L43.9 34z\"/></svg></a>\r\n\r\n  <div class=\"search-results\" v-show=\"showResults\">\r\n    <loading v-show=\"loading\"></loading>\r\n    <promocodes v-bind:promocodes=\"promocodes\" v-if=\"promocodes.isOpen\"></promocodes>\r\n\r\n    <div v-if=\"!loading && query.length > 1 && brand && searchError && (onBrand < 1 || (locationitems.length < 1 && hotelitems.length < 1 && airportitems.length < 1 && attractionitems.length < 1))\" class=\"alert alert-danger\" role=\"alert\">\r\n      <div v-if=\"locationitems.length < 1 && hotelitems.length < 1 && airportitems.length < 1 && attractionitems.length < 1\"> <!-- if there are no results at all  -->\r\n        <span>{{ 'UH OH! IT LOOKS LIKE THERE ARE NO RESULTS THAT MATCH YOUR SEARCH.' | translate('no-results-generic') }}</span>\r\n        <h4>{{ 'NO WORRIES - CHECK OUT SOME OF OUR MOST POPULAR HOTELS' | translate('check-out-popular-hotels') }}</h4>\r\n      </div>\r\n      <div v-else> <!-- if there are no brand hotel results but there are non brand hotel results by checking number of properties with on_brand=yes -->\r\n        <span>{{ 'UH OH! IT LOOKS LIKE THERE ARE NO ${brandname} HOTELS HERE...' | translate('no-results-brand', { brandname: brandInfo.name }) }}</span>\r\n        <h4>{{ 'NO WORRIES - ENJOY A STAY AT ONE OF OUR PARTNER HOTELS' | translate('stay-at-partner-hotels') }}</h4>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- <div v-if=\"!loading && query.length > 1 && brand && searchError && (onBrand < 1 || (locationitems.length < 1 && hotelitems.length < 1 && airportitems.length < 1 && attractionitems.length < 1))\" class=\"search-featured-props\">\r\n      <div v-if=\"locationitems.length < 1 && hotelitems.length < 1 && airportitems.length < 1 && attractionitems.length < 1\"> \r\n        //if there are no results at all\r\n        <div class=\"search-feat-props-title\">\r\n          {{ '${brandname} Hotels' | translate('brand-name-hotels', { brandname: brandInfo.name }) }}\r\n          </div>\r\n          <div class=\"row search-feat-props-wrapper\">\r\n            <template v-for=\"featuredpropertiesitem in featuredpropertiesitems\">\r\n              <div class=\"reservations-card previous-card small-12 medium-4 large-3 columns\">\r\n                <a v-bind:href=\"featuredpropertiesitem.webextra_url\" class=\"card-link\">\r\n                  <figure>\r\n                    <img :src=\"featuredpropertiesitem.mediafile\" v-bind:alt=\"featuredpropertiesitem.name\" id=\"results01\" />\r\n                    <figcaption><span v-if=\"featuredpropertiesitem.city.length\"><i class=\"fa fa-map-marker\"></i> {{ featuredpropertiesitem.city }}</span></figcaption>\r\n                    <div class=\"shadow\"></div>\r\n                    <a v-bind:href=\"featuredpropertiesitem.booking_url\" class=\"previous-add-cart\">\r\n                      <svg class=\"svg-cart\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16.3 14.3\"><path class=\"fill\" d=\"M14.7 9.7H4.3L2.2 1H.5C.2 1 0 .8 0 .5S.2 0 .5 0H3l.4 1.7h12.8l-1.5 8zm-9.6-1h8.7L15 2.8H3.7l1.4 5.9zM6.7 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.3.6-.6.6zM12.5 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.2.6-.6.6z\"/></svg>\r\n                    </a>\r\n                  </figure>\r\n                  <article>\r\n                    <img :src=\"featuredpropertiesitem.brand_mediafile\" v-bind:alt=\"featuredpropertiesitem.name\" />\r\n                    <div class=\"card-hotel-name\">\r\n                      <p v-bind:class=\"{ changeFont: propertiesName(featuredpropertiesitem.name) }\">{{ featuredpropertiesitem.name }}</p>\r\n                    </div>\r\n                    <img v-bind:src=\"'/templates/main/images/tripadvisor/inline/rating-' + featuredpropertiesitem.rating + '.png'\" v-bind:alt=\"'TripAdvisor rating for ' + featuredpropertiesitem.name\" class=\"ta-logo\" />\r\n                  </article>\r\n                  <footer>\r\n                    <a v-bind:href=\"featuredpropertiesitem.webextra_url\">\r\n                      <p class=\"room-ratename\">{{ 'Lowest Available Rate' | translate('lowest-available-rate') }}</p>\r\n                      <p class=\"room-rateval\" v-if=\"featuredpropertiesitem.minrate.length\">{{ rateCalc(featuredpropertiesitem.minrate, featuredpropertiesitem.currency)}}</p>\r\n                    </a>\r\n                  </footer>\r\n                </a>\r\n              </div>\r\n            </template>\r\n          </div>\r\n      </div>\r\n      <div v-else>  //if there are no brand hotel results but there are non brand hotel results by checking number of properties with on_brand=yes\r\n        <div class=\"search-feat-props-title\">{{ 'CARLSON REZIDOR HOTELS' | translate('carlson-rezidor-hotels') }}</div>\r\n        <div class=\"row search-feat-props-wrapper\">\r\n          <template v-for=\"featuredpropertiesitem in featuredpropertiesitems\">\r\n            <div class=\"reservations-card previous-card small-12 medium-4 large-3 columns\">\r\n              <a v-bind:href=\"featuredpropertiesitem.webextra_url\" class=\"card-link\">\r\n                <figure>\r\n                  <img :src=\"featuredpropertiesitem.mediafile\" v-bind:alt=\"featuredpropertiesitem.name\" id=\"results01\" />\r\n                  <figcaption><span v-if=\"featuredpropertiesitem.city.length\"><i class=\"fa fa-map-marker\"></i> {{ featuredpropertiesitem.city }}</span></figcaption>\r\n                  <div class=\"shadow\"></div>\r\n                  <a v-bind:href=\"featuredpropertiesitem.booking_url\" class=\"previous-add-cart\">\r\n                    <svg class=\"svg-cart\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16.3 14.3\"><path class=\"fill\" d=\"M14.7 9.7H4.3L2.2 1H.5C.2 1 0 .8 0 .5S.2 0 .5 0H3l.4 1.7h12.8l-1.5 8zm-9.6-1h8.7L15 2.8H3.7l1.4 5.9zM6.7 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.3.6-.6.6zM12.5 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.2.6-.6.6z\"/></svg>\r\n                  </a>\r\n                </figure>\r\n                <article>\r\n                  <img :src=\"featuredpropertiesitem.brand_mediafile\" v-bind:alt=\"featuredpropertiesitem.name\" />\r\n                  <div class=\"card-hotel-name\">\r\n                    <p v-bind:class=\"{ changeFont: propertiesName(featuredpropertiesitem.name) }\">{{ featuredpropertiesitem.name }}</p>\r\n                  </div>\r\n                  <img v-bind:src=\"'/templates/main/images/tripadvisor/inline/rating-' + featuredpropertiesitem.rating + '.png'\" v-bind:alt=\"'TripAdvisor rating for ' + featuredpropertiesitem.name\" class=\"ta-logo\" />\r\n                </article>\r\n                <footer>\r\n                  <a v-bind:href=\"featuredpropertiesitem.webextra_url\">\r\n                    <p class=\"room-ratename\">{{ 'Lowest Available Rate' | translate('lowest-available-rate') }}</p>\r\n                    <p class=\"room-rateval\" v-if=\"featuredpropertiesitem.minrate.length\">{{ rateCalc(featuredpropertiesitem.minrate, featuredpropertiesitem.currency)}}</p>\r\n                  </a>\r\n                </footer>\r\n              </a>\r\n            </div>\r\n          </template>\r\n        </div>\r\n      </div>\r\n    </div> -->\r\n\r\n    <div v-if=\"!loading && query.length > 1 && !brand && searchError && (locationitems.length < 1 && hotelitems.length < 1 && airportitems.length < 1 && attractionitems.length < 1)\" class=\"alert alert-danger\" role=\"alert\">\r\n      <h4>{{ 'No results could be found for \"${searchquery}\"' | translate('no-results-query', { searchquery: query }) }}</h4>\r\n      <span>{{ 'TRY ONE OF OUR SUGGESTIONS BELOW OR PLEASE TRY ANOTHER SEARCH TERM' | translate('try-suggestions-below') }}</span>\r\n    </div>\r\n    <!-- <div v-if=\"!loading && query.length > 1 && !brand && searchError && (locationitems.length < 1 && hotelitems.length < 1 && airportitems.length < 1 && attractionitems.length < 1)\" class=\"search-featured-props\">\r\n      <div class=\"search-feat-props-title\">{{ 'CARLSON REZIDOR HOTELS' | translate('carlson-rezidor-hotels') }}</div>\r\n      <div class=\"row search-feat-props-wrapper\">\r\n        <template v-for=\"mallfeaturedpropertiesitem in mallfeaturedpropertiesitems\">\r\n          <div class=\"reservations-card previous-card small-12 medium-4 large-3 columns\">\r\n            <a v-bind:href=\"mallfeaturedpropertiesitem.webextra_url\" class=\"card-link\">\r\n              <figure>\r\n                <img :src=\"mallfeaturedpropertiesitem.mediafile\" v-bind:alt=\"mallfeaturedpropertiesitem.name\" id=\"results03\" />\r\n                <figcaption><span v-if=\"mallfeaturedpropertiesitem.city.length\"><i class=\"fa fa-map-marker\"></i> {{ mallfeaturedpropertiesitem.city }}</span></figcaption>\r\n                <div class=\"shadow\"></div>\r\n                <a v-bind:href=\"mallfeaturedpropertiesitem.booking_url\" class=\"previous-add-cart\">\r\n                  <svg class=\"svg-cart\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16.3 14.3\"><path class=\"fill\" d=\"M14.7 9.7H4.3L2.2 1H.5C.2 1 0 .8 0 .5S.2 0 .5 0H3l.4 1.7h12.8l-1.5 8zm-9.6-1h8.7L15 2.8H3.7l1.4 5.9zM6.7 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.3.6-.6.6zM12.5 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.2.6-.6.6z\"/></svg>\r\n                </a>\r\n              </figure>\r\n              <article>\r\n                <img :src=\"mallfeaturedpropertiesitem.brand_mediafile\" v-bind:alt=\"mallfeaturedpropertiesitem.name\" />\r\n                <div class=\"card-hotel-name\">\r\n                  <p v-bind:class=\"{ changeFont: propertiesName(mallfeaturedpropertiesitem.name) }\">{{ mallfeaturedpropertiesitem.name }}</p>\r\n                </div>\r\n                <img v-bind:src=\"'/templates/main/images/tripadvisor/inline/rating-' + mallfeaturedpropertiesitem.rating + '.png'\" v-bind:alt=\"'TripAdvisor rating for ' + mallfeaturedpropertiesitem.name\" class=\"ta-logo\" />\r\n              </article>\r\n              <footer>\r\n                <a v-bind:href=\"mallfeaturedpropertiesitem.webextra_url\">\r\n                  <p class=\"room-ratename\">{{ 'Lowest Available Rate' | translate('lowest-available-rate') }}</p>\r\n                  <p class=\"room-rateval\" v-if=\"mallfeaturedpropertiesitem.minrate.length\">{{ rateCalc(mallfeaturedpropertiesitem.minrate, mallfeaturedpropertiesitem.currency)}}</p>\r\n                </a>\r\n              </footer>\r\n            </a>\r\n          </div>\r\n        </template>\r\n      </div>\r\n    </div> -->\r\n\r\n    <!-- <div v-if=\"!loading && query.length < 2 && !cookieSet && !brand && !locenabled\" class=\"search-featured-props\">\r\n      <div class=\"search-feat-props-title\">{{ 'Popular Hotels' | translate('popular-hotels') }}</div>\r\n      <div class=\"row search-feat-props-wrapper\">\r\n        <template v-for=\"mallfeaturedpropertiesitem in mallfeaturedpropertiesitems\">\r\n          <div class=\"reservations-card previous-card small-12 medium-4 large-3 columns\">\r\n            <a v-bind:href=\"mallfeaturedpropertiesitem.webextra_url\" class=\"card-link\">\r\n              <figure>\r\n                <img :src=\"mallfeaturedpropertiesitem.mediafile\" v-bind:alt=\"mallfeaturedpropertiesitem.name\" id=\"featresults01\" />\r\n                <figcaption><span v-if=\"mallfeaturedpropertiesitem.city.length\"><i class=\"fa fa-map-marker\"></i> {{ mallfeaturedpropertiesitem.city }}</span></figcaption>\r\n                <div class=\"shadow\"></div>\r\n                <a v-bind:href=\"mallfeaturedpropertiesitem.booking_url\" class=\"previous-add-cart\">\r\n                  <svg class=\"svg-cart\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16.3 14.3\"><path class=\"fill\" d=\"M14.7 9.7H4.3L2.2 1H.5C.2 1 0 .8 0 .5S.2 0 .5 0H3l.4 1.7h12.8l-1.5 8zm-9.6-1h8.7L15 2.8H3.7l1.4 5.9zM6.7 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.3.6-.6.6zM12.5 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.2.6-.6.6z\"/></svg>\r\n                </a>\r\n              </figure>\r\n              <article>\r\n                <img :src=\"mallfeaturedpropertiesitem.brand_mediafile\" v-bind:alt=\"mallfeaturedpropertiesitem.name\" />\r\n                <div class=\"card-hotel-name\">\r\n                  <p v-bind:class=\"{ changeFont: propertiesName(mallfeaturedpropertiesitem.name) }\">{{ mallfeaturedpropertiesitem.name }}</p>\r\n                </div>\r\n                <img v-bind:src=\"'/templates/main/images/tripadvisor/inline/rating-' + mallfeaturedpropertiesitem.rating + '.png'\" v-bind:alt=\"'TripAdvisor rating for ' + mallfeaturedpropertiesitem.name\" class=\"ta-logo\" />\r\n              </article>\r\n              <footer>\r\n                <a v-bind:href=\"mallfeaturedpropertiesitem.webextra_url\">\r\n                  <p class=\"room-ratename\">{{ 'Lowest Available Rate' | translate('lowest-available-rate') }}</p>\r\n                  <p class=\"room-rateval\" v-if=\"mallfeaturedpropertiesitem.minrate.length\">{{ rateCalc(mallfeaturedpropertiesitem.minrate, mallfeaturedpropertiesitem.currency)}}</p>\r\n                </a>\r\n              </footer>\r\n            </a>\r\n          </div>\r\n        </template>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"!loading && query.length < 2 && !cookieSet && brand && !locenabled\" class=\"search-featured-props\">\r\n      <div class=\"search-feat-props-title\">{{ 'Popular Hotels' | translate('popular-hotels') }}</div>\r\n      <div class=\"row search-feat-props-wrapper\">\r\n        <template v-for=\"featuredpropertiesitem in featuredpropertiesitems\">\r\n          <div class=\"reservations-card previous-card small-12 medium-4 large-3 columns\">\r\n            <a v-bind:href=\"featuredpropertiesitem.webextra_url\" class=\"card-link\">\r\n              <figure>\r\n                <img :src=\"featuredpropertiesitem.mediafile\" v-bind:alt=\"featuredpropertiesitem.name\" id=\"featresults02\" />\r\n                <figcaption><span v-if=\"featuredpropertiesitem.city.length\"><i class=\"fa fa-map-marker\"></i> {{ featuredpropertiesitem.city }}</span></figcaption>\r\n                <div class=\"shadow\"></div>\r\n                <a v-bind:href=\"featuredpropertiesitem.booking_url\" class=\"previous-add-cart\">\r\n                  <svg class=\"svg-cart\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16.3 14.3\"><path class=\"fill\" d=\"M14.7 9.7H4.3L2.2 1H.5C.2 1 0 .8 0 .5S.2 0 .5 0H3l.4 1.7h12.8l-1.5 8zm-9.6-1h8.7L15 2.8H3.7l1.4 5.9zM6.7 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.3.6-.6.6zM12.5 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.2.6-.6.6z\"/></svg>\r\n                </a>\r\n              </figure>\r\n              <article>\r\n                <img :src=\"featuredpropertiesitem.brand_mediafile\" v-bind:alt=\"featuredpropertiesitem.name\" />\r\n                <div class=\"card-hotel-name\">\r\n                  <p v-bind:class=\"{ changeFont: propertiesName(featuredpropertiesitem.name) }\">{{ featuredpropertiesitem.name }}</p>\r\n                </div>\r\n                <img v-bind:src=\"'/templates/main/images/tripadvisor/inline/rating-' + featuredpropertiesitem.rating + '.png'\" v-bind:alt=\"'TripAdvisor rating for ' + featuredpropertiesitem.name\" class=\"ta-logo\" />\r\n              </article>\r\n              <footer>\r\n                <a v-bind:href=\"featuredpropertiesitem.webextra_url\">\r\n                  <p class=\"room-ratename\">{{ 'Lowest Available Rate' | translate('lowest-available-rate') }}</p>\r\n                  <p class=\"room-rateval\" v-if=\"featuredpropertiesitem.minrate.length\">{{ rateCalc(featuredpropertiesitem.minrate, featuredpropertiesitem.currency)}}</p>\r\n                </a>\r\n              </footer>\r\n            </a>\r\n          </div>\r\n        </template>\r\n      </div>\r\n    </div> -->\r\n\r\n    <ul v-if=\"cookiesAllowed && cookieSet && matchedrecentsearches.length\" class=\"list-group\">\r\n      <li><h3>{{ 'Recent Searches' | translate('recent-searches') }}</h3></li>\r\n      <li v-for=\"recentsearchitem in matchedrecentsearches\" class=\"list-group-item\">\r\n        <a v-on:click=\"closeResults(recentsearchitem)\" v-bind:data-name=\"recentsearchitem.name\" v-bind:data-url=\"recentsearchitem.url\"  v-bind:data-type=\"recentsearchitem.category\" v-bind:data-key=\"recentsearchitem.key\"><i v-if=\"recentsearchitem.category\" v-bind:class=\"getIcon(recentsearchitem.category,recentsearchitem.icon)\" aria-hidden=\"true\"></i><i v-else class=\"fa fa-building-o\" aria-hidden=\"true\"></i> <span v-html=\"highlightName(recentsearchitem.name)\"></span></a></a>\r\n      </li>\r\n    </ul>\r\n\r\n    <ul v-if=\"staysitems.length\" class=\"list-group\">\r\n      <li><h3>{{ 'Recent Stays' | translate('recent-stays') }}</h3></li>\r\n      <li v-for=\"staysitem in staysitems\"><a v-on:click=\"closeResults(staysitem)\" v-bind:data-name=\"staysitem.name\" data-category=\"property\" data-icon=\"fa fa-building-o\" v-bind:data-url=\"staysitem['@attributes'].url\" v-bind:data-type=\"staysitem['@attributes'].type\" v-bind:data-key=\"staysitem['@attributes'].url\"><i class=\"fa fa-building-o\" aria-hidden=\"true\"></i> <span v-html=\"highlightName(staysitem.name)\"></span></a></li>\r\n    </ul>\r\n\r\n    <ul v-if=\"topdestinationsitems.length\" class=\"list-group\">\r\n      <li v-if=\"cookieSet && matchedrecentsearches.length\"><h3>{{ 'Top Results' | translate('top-results') }}</h3></li>\r\n      <li v-else><h3>{{ 'Top Destinations' | translate('top-destinations') }}</h3></li>\r\n      <li v-for=\"topdestinationsitem in topdestinationsitems\"><a v-on:click=\"closeResults(topdestinationsitem)\" v-bind:data-name=\"topdestinationsitem.name\" v-bind:data-url=\"topdestinationsitem.url\" v-bind:data-type=\"topdestinationsitem.category\" v-bind:dat-icon=\"getIcon(topdestinationsitem.category,topdestinationsitem.icon)\" v-bind:data-key=\"topdestinationsitem['@attributes'].key\"><i v-if=\"topdestinationsitem.category\" v-bind:class=\"getIcon(topdestinationsitem.category,topdestinationsitem.icon)\" aria-hidden=\"true\"></i><i v-else class=\"fa fa-building-o\" aria-hidden=\"true\"></i> <span v-html=\"highlightName(topdestinationsitem.name)\"></span></a></li>\r\n    </ul>\r\n\r\n    <ul v-if=\"locationitems.length\" class=\"list-group\">\r\n      <li><h3>{{ 'City, State / Province, Country' | translate('search-city-state-country') }}</h3></li>\r\n      <li v-for=\"locationitem in locationitems\"><a v-on:click=\"closeResults(locationitem)\" v-bind:data-name=\"locationitem.name\" data-category=\"location\" data-icon=\"fa fa-map-marker\" v-bind:data-url=\"locationitem['@attributes'].url\" v-bind:data-type=\"locationitem['@attributes'].type\" v-bind:data-key=\"locationitem['@attributes'].key\"><i class=\"fa fa-map-marker\" aria-hidden=\"true\"></i> <span v-html=\"highlightName(locationitem.name)\"></span></a></li>\r\n    </ul>\r\n\r\n    <ul v-if=\"hotelitems.length\" class=\"list-group\">\r\n      <li><h3>{{ 'Hotels' | translate('hotels') }}</h3></li>\r\n      <li v-for=\"hotelitem in hotelitems\"><a v-on:click=\"closeResults(hotelitem)\" v-bind:data-name=\"hotelitem.name\" data-category=\"property\" data-icon=\"fa fa-building-o\" v-bind:data-url=\"hotelitem['@attributes'].url\" v-bind:data-type=\"hotelitem['@attributes'].type\" v-bind:data-key=\"hotelitem['@attributes'].key\"><i class=\"fa fa-building-o\" aria-hidden=\"true\"></i> <span v-html=\"highlightName(hotelitem.name)\"></span></a></li>\r\n    </ul>\r\n\r\n    <ul v-if=\"airportitems.length\" class=\"list-group\">\r\n      <li><h3>{{ 'Airports' | translate('airports') }}</h3></li>\r\n      <li v-for=\"airportitem in airportitems\"><a v-on:click=\"closeResults(airportitem)\" v-bind:data-name=\"airportitem.name\" data-category=\"airport\" data-icon=\"fa fa-plane\" v-bind:data-url=\"airportitem['@attributes'].url\" v-bind:data-type=\"airportitem['@attributes'].type\" v-bind:data-key=\"airportitem['@attributes'].key\"><i class=\"fa fa-plane\" aria-hidden=\"true\"></i> <span v-html=\"highlightName(airportitem.name)\"></span></a></li>\r\n    </ul>\r\n\r\n    <ul v-if=\"attractionitems.length\" class=\"list-group\">\r\n      <li><h3>{{ 'Attractions' | translate('attractions') }}</h3></li>\r\n      <li v-for=\"attractionitem in attractionitems\"><a v-on:click=\"closeResults(attractionitem)\" v-bind:data-name=\"attractionitem.name\" data-category=\"attraction\" v-bind:data-icon=\"attractionitem.icon\" v-bind:data-url=\"attractionitem['@attributes'].url\" v-bind:data-type=\"attractionitem['@attributes'].type\" v-bind:data-key=\"attractionitem['@attributes'].key\"><i :class=\"'fa ' + (attractionitem.icon ? attractionitem.icon : 'fa-bank')\" aria-hidden=\"true\"></i> <span v-html=\"highlightName(attractionitem.name)\"></span></a></li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n";

/***/ }),

/***/ 370:
/***/ (function(module, exports) {

module.exports = "<div class=\"bookingview-ratecode bookingview-full\">\n  <div class=\"bookingview-full-header\">\n    <button class=\"close-btn\" @click=\"promoClose()\" aria-label=\"Close Special Rate / Code\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 68 68\" class=\"svg svg-close\"><path class=\"fill\" fill=\"#000000\" d=\"M43.9 34l23.334-23.335-9.9-9.9L34 24.1 10.666.766l-9.9 9.9L24.1 34 .767 57.334l9.9 9.9L34 43.9l23.335 23.334 9.9-9.9L43.9 34z\"/></svg>\n    </button>\n    <h1 class=\"hide-for-large hide-for-small\">{{ 'Special Rates' | translate('special-rates') }}</h1>\n  </div>\n\n  <div v-if=\"!formOpen && promocodes.codes.length\" class=\"bookingview-full-body codes-applied\">\n    <div class=\"row\">\n      <div class=\"column small-12\">\n        <h2>{{ 'Codes Applied' | translate('codes-applied') }}</h2>\n        <div class=\"promo-code-button\" v-for=\"(promo, index) in promocodes.codes\" >\n          {{ promo.name }}\n          <div v-if=\"noCode.indexOf(promo.value) == -1\">{{ promo.code }}</div>\n          <button class=\"edit-promo-code\" @click=\"removePromo(index)\">{{ 'Remove' | translate('remove') }}</button>\n        </div>\n      </div>\n      <div class=\"column small-12\">\n        <button class=\"button primary\" @click=\"promoUpdatedClose()\">{{ 'Done' | translate('done') }}</button>\n        <button class=\"button secondary\" @click=\"formOpen=true\">{{ 'Add Another' | translate('add-another') }}</button>\n      </div>\n    </div>\n  </div>\n\n  <div v-else class=\"bookingview-full-body\">\n    <div class=\"row\">\n      <div class=\"column\" :class=\"{ 'codes-applied-open': promocodes.codes.length }\">\n        <h2 class=\"show-for-large\">{{ 'Special Rate / Code' | translate('special-rate-code') }}</h2>\n        <p>{{ 'Select a discount or rate and the corresponding code.' | translate('select-a-discount') }}</p>\n      </div>\n      <div v-if=\"promocodes.codes.length\" class=\"column modal-codes-applied codes-applied codes-applied-form\">\n        <h2>{{ 'Codes Applied' | translate('codes-applied') }}</h2>\n        <div class=\"promo-code-button\" v-for=\"(promo, index) in promocodes.codes\" >\n          {{ promo.name }}\n          <div v-if=\"noCode.indexOf(promo.value) == -1\">{{ promo.code }}</div>\n          <button class=\"edit-promo-code\" @click=\"removePromo(index)\">{{ 'Remove' | translate('remove') }}</button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row promocodes-wrapper\">\n      <form @submit.prevent=\"submit\" class=\"row promocodes-form\">\n        <div class=\"column small-12 medium-4\">\n          <label for=\"codetype\">{{ 'Rate / Code Type' | translate('rate-code-type') }}</label>\n          <div class=\"dropdown\">\n            <select class=\"codetype\" name=\"promoValue\" id=\"promoValue\" v-model=\"promoValue\" v-on:change=\"updateName($event.target)\" data-vv-as=\"Special Discount or Rate\" v-validate.inital=\"\" data-vv-rules=\"required|ratebased|ids|duplicate\">\n              <option value=\"\">{{ 'Select a rate / code type' | translate('select-rate-code-type') }}</option>\n              <option value=\"AAA\">{{ 'AAA-CAA Rate' | translate('aaa-rate') }}</option>\n              <option value=\"GOVT\">{{ 'Government Rate' | translate('gov-rate') }}</option>\n              <option value=\"SR CIT\">{{ 'Senior Citizen Rate' | translate('senior-citizen-rate') }}</option>\n              <option value=\"promotionalCode\">{{ 'Promotional Code' | translate('promotional-code') }}</option>\n              <option value=\"ecertCode\">{{ 'E-Cert' | translate('e-cert') }}</option>\n              <option value=\"corporateAccountId\">{{ 'Corporate Account ID' | translate('corporate-account-id') }}</option>\n              <option value=\"travelAgencyId\">{{ 'Travel Agency ID' | translate('travel-agency-id') }}</option>\n            </select>\n          </div>\n          <span class=\"field-errors\" v-show=\"errors.has('promoValue') && submitted\">{{ errors.first('promoValue') }}</span>\n        </div>\n\n        <div class=\"column small-12 medium-4 promoinput\" v-show=\"noCode.indexOf(promoValue) == -1\">\n          <label for=\"ratecode\">{{ 'Rate / Code ID' | translate('rate-code-id') }}</label>\n          <input type=\"text\" name=\"promoCode\" id=\"promoCode\" class=\"ratecode\" v-model=\"promoCode\" data-vv-as=\"Enter Code\" v-validate.inital=\"\" data-vv-rules=\"required\" />\n          <span class=\"field-errors\" v-show=\"errors.has('promoCode') && submitted\">{{ errors.first('promoCode') }}</span>\n        </div>\n        <div class=\"column small-5 medium-2\">\n          <input type=\"submit\" class=\"button primary apply-button\" :value=\"'Apply Code' | translate('apply-code')\" />\n        </div>\n      </form>\n      <div class=\"row applied-promos\">\n        <div v-if=\"promocodes.codes.length\" class=\"column inline-codes-applied codes-applied codes-applied-form\">\n          <h2>{{ 'Codes Applied' | translate('codes-applied') }}</h2>\n          <div class=\"promo-code-button\" v-for=\"(promo, index) in promocodes.codes\" >\n            {{ promo.name }}\n            <div v-if=\"noCode.indexOf(promo.value) == -1\">{{ promo.code }}</div>\n            <button class=\"edit-promo-code\" @click=\"removePromo(index)\">{{ 'Remove' | translate('remove') }}</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 371:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Vue = __webpack_require__(3);
var moment = __webpack_require__(0);
var $ = __webpack_require__(2);
var Foundation = __webpack_require__(14);

// Template
var template = __webpack_require__(372);
var store = __webpack_require__(32);

var Dates = void 0;

// Components
var datesMixin = __webpack_require__(71);

Dates = Vue.component('datepicker', {
  mixins: [datesMixin],
  template: template,
  data: function data() {
    return {
      sharedState: store,
      privateState: {
        openDatepicker: false,
        openMonthpicker: false
      },
      today: ''
    };
  },

  mounted: function mounted() {
    $('.search-datepick').scrollTop(0);
    if (this.arrive == '') {
      var today = new Date();
      var todayFormatted = moment(today, this.config.dateFormat).format('YYYY-MM-DD');
      $('.arrive').val(todayFormatted);
    }

    if (this.depart == '') {
      var tomorrow = new Date(new Date().valueOf() + 1000 * 3600 * 24);
      var tomorrowFormatted = moment(tomorrow, this.config.dateFormat).format('YYYY-MM-DD');

      $('.depart').val(tomorrowFormatted);
    }
  },

  watch: {
    "sharedState.depart": function sharedStateDepart() {
      if (this.sharedState.arrive && this.sharedState.depart) {
        this.sharedState.openDatepicker = false;

        if (Foundation.MediaQuery.current == 'small' || Foundation.MediaQuery.current == 'medium') {
          if (this.query.length < 2 && this.query.length > 0) {
            $('.search-loc').focus();
          }
        }
      }
    }
  },

  methods: {
    closepanels: function closepanels() {
      this.sharedState.showResults = false;
      this.sharedState.openDatepicker = false;
    },

    formatDate: function formatDate(value, format) {
      return moment(value, this.config.dateFormat).format(format);
    }
  }
});

module.exports = Dates;

/***/ }),

/***/ 372:
/***/ (function(module, exports) {

module.exports = "<div class=\"bookingview-dates search-datepick\" v-show=\"sharedState.openDatepicker\" v-bind:class=\"{ monthpickerOpen: privateState.openMonthpicker }\">\n  <a v-on:click=\"closepanels\"  v-on:keyup.enter=\"closepanels\" class=\"close-results show-for-large\" tabindex=\"0\" ><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 68 68\" class=\"svg svg-close\"><path class=\"fill\" fill=\"#000000\" d=\"M43.9 34l23.334-23.335-9.9-9.9L34 24.1 10.666.766l-9.9 9.9L24.1 34 .767 57.334l9.9 9.9L34 43.9l23.335 23.334 9.9-9.9L43.9 34z\"/></svg></a>\n\n  <div class=\"bookingview-datepicker\"></div>\n  <transition name=\"fade\">\n    <monthpicker v-if=\"privateState.openMonthpicker\" v-on:onMonthClick=\"openMonths\" v-on:onMonthSelect=\"selectMonth\"></monthpicker>\n  </transition>\n</div>\n";

/***/ }),

/***/ 373:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Vue = __webpack_require__(3);
var $ = __webpack_require__(2);
var moment = __webpack_require__(0);
var Foundation = __webpack_require__(14);
var iswebview = __webpack_require__(27);

// Template
var template = __webpack_require__(374);
var store = __webpack_require__(32);

// Components
var Loading = __webpack_require__(110);
var Filters = __webpack_require__(111);
var Price = __webpack_require__(258);
var Errors = __webpack_require__(378);
var Promocodes = __webpack_require__(257);
var responsiveImage = __webpack_require__(112);
var promoCertErrorText = "The promotional code you selected is not eligible for E-cert. Look for green strike through prices for rates where your E-cert can be applied.";

var getSourceInfo = function getSourceInfo() {
  var actionInfo = "GP";
  if ($("body[data-brand]").length != 0 && $("body[data-brand]").attr('data-brand') != '' && $("body[data-brand]").attr('data-brand') != 'mall') {
    if (window.innerWidth < 737) {
      actionInfo = 'MW';
    } else {
      actionInfo = 'RW';
    }
  } else {
    if (window.innerWidth < 737) {
      actionInfo = 'CC';
    } else {
      actionInfo == 'GP';
    }
  }
  return actionInfo;
};

function getErrorText(lineInSourceCode) {
  try {
    var promoErrorText = promoCertErrorText;
    var hasPromoInURL = this.getQueryParam('ecert') || this.getQueryParam('promo');
    var hasPromoInSharedState = this.sharedState.promocodes ? this.sharedState.promocodes.code || this.sharedState.promocodes.ecertCode : false;
    var hasPromo = hasPromoInSharedState || hasPromoInURL;
    //debugging:
    //if (typeof  lineInSourceCode !== 'undefined')  promoErrorText = promoErrorText + lineInSourceCode.toString();
    return hasPromo ? promoErrorText : "Removing filters may return more results.";
  } catch (err) {
    console.log('getErrorText function err');
  }
}

var searchResultsPage = Vue.component('searchresultscolumn', {
  template: template,
  components: {
    'loading': Loading,
    'filters': Filters,
    'price': Price,
    'errors': Errors,
    'promocodes': Promocodes,
    'responsiveimage': responsiveImage
  },

  data: function data() {
    return {
      sharedState: store,
      featuredCities: [],
      loading: false,
      computedHeader: '',
      computedSubHeader: '',
      nearin: '',
      locationSearch: '',
      error: '',
      offsiteurlTarget: false,
      showPromo: false
    };
  },

  filters: {
    lowercase: function lowercase(valueArg) {
      var value;
      if (!value) return '';
      value = valueArg.toString();
      return value.toLowerCase();
    }
  },

  created: function created() {
    if (this.sharedState.brandInfo.name === 'Mall' || this.sharedState.brandInfo.name === '') {
      this.sharedState.brand = false;
    } else {
      this.sharedState.brand = true;
    }

    $(window).on('resize.devicewidth', function () {
      var width = window.innerWidth;

      if (width < 415) {
        //mobile portrait
        this.sharedState.deviceWidth = 'mobilePortrait';
      } else if (width < 737) {
        //mobile landscape
        this.sharedState.deviceWidth = 'mobileLandscape';
      } else if (width < 769) {
        //tablet portrait
        this.sharedState.deviceWidth = 'tabletPortrait';
      } else if (width < 801) {
        //android tablet portrait
        this.sharedState.deviceWidth = 'androidTabletPortrait';
      } else if (width < 1025) {
        //tablet landscape
        this.sharedState.deviceWidth = 'tabletLandscape';
      } else if (width > 1024) {
        // desktop
        this.sharedState.deviceWidth = 'desktop';
      }
    }.bind(this)).trigger('resize.devicewidth');
  },

  mounted: function mounted() {
    $(window).scroll(function () {
      var isMobile = new RegExp('Android|webOS|iPhone', 'i').test(navigator.userAgent);
      if (isMobile) {
        var headerHeight = $('.header').outerHeight();
        var filtersHeight = $('.filters-top .filter-buttons').outerHeight();
        var filterTop = $(".filters-top .filter-buttons").position();
        var scroll = $(this).scrollTop() + headerHeight;
        if (scroll > filterTop.top) {
          $(".filters-top .filter-buttons").addClass('sticky');
          $('.filters-top .filter-buttons').css({ "top": headerHeight });
        } else {
          $('.filters-top .filter-buttons').removeClass('sticky');
          $('.filters-top .filter-buttons').removeAttr('style');
        }
      }
    });

    if (this.getQueryParam("arrive") != '' || this.getQueryParam("arrive") != false) {
      var arrive = this.parseDate(this.getQueryParam("arrive"));
      this.sharedState.arrive = moment(arrive).format(this.sharedState.config.dateFormat);
    }

    if (this.getQueryParam("depart") != '' || this.getQueryParam("depart") != false) {
      var depart = this.parseDate(this.getQueryParam("depart"));
      this.sharedState.depart = moment(depart).format(this.sharedState.config.dateFormat);
    }

    if (this.getQueryParam("arrive") && this.getQueryParam("depart")) {
      var _arrive = this.parseDate(this.getQueryParam("arrive"));
      var _depart = this.parseDate(this.getQueryParam("depart"));

      // Get difference between arrival and depature for # of nights
      this.sharedState.nights = moment(_depart).diff(moment(_arrive), 'days');
    }

    // Special codes
    if (this.getQueryParam('promo') != '' || this.getQueryParam('promo') != false) {
      this.sharedState.promocodes.code = this.getQueryParam('promo');
      this.sharedState.promocodes.codes.push({ 'code': this.getQueryParam('promo'), 'name': 'Promotional Code', value: this.getQueryParam('promo') });
    }

    if (this.getQueryParam('rmccode') != '' || this.getQueryParam('rmccode') != false) {
      this.sharedState.promocodes.code = this.getQueryParam('rmccode');
      if (this.getQueryParam('rmccode') == 'AAA') {
        this.sharedState.promocodes.codes.push({ 'code': this.getQueryParam('rmccode'), 'name': 'AAA-CAA Rate', value: this.getQueryParam('rmccode') });
      } else if (this.getQueryParam('rmccode') == 'GOVT') {
        this.sharedState.promocodes.codes.push({ 'code': this.getQueryParam('rmccode'), 'name': 'Government Rate', value: this.getQueryParam('rmccode') });
      } else if (this.getQueryParam('rmccode') == 'SR%20CIT') {
        this.sharedState.promocodes.codes.push({ 'code': 'SR CIT', 'name': 'Senior Citizen Rate', value: 'SR CIT' });
      }
    }

    if (this.getQueryParam('corp') != '' || this.getQueryParam('corp') != false) {
      this.sharedState.promocodes.corporateAccountId = this.getQueryParam('corp');
      this.sharedState.promocodes.codes.push({ 'code': this.getQueryParam('corp'), 'name': 'Corporate Account ID', value: 'corporateAccountId' });
    }
    if (this.getQueryParam('iata') != '' || this.getQueryParam('iata') != false) {
      this.sharedState.promocodes.travelAgencyId = this.getQueryParam('iata');
      this.sharedState.promocodes.codes.push({ 'code': this.getQueryParam('iata'), 'name': 'Travel Agency ID', value: 'travelAgencyId' });
    }
    if (this.getQueryParam('ecert') != '' || this.getQueryParam('ecert') != false) {
      this.sharedState.promocodes.ecertCode = this.getQueryParam('ecert');
      this.sharedState.promocodes.codes.push({ 'code': this.getQueryParam('ecert'), 'name': 'E-Cert', value: 'ecertCode' });
    }
    if (this.getQueryParam('ratecode') != '' || this.getQueryParam('ratecode') != false) {
      this.sharedState.ratecode = this.getQueryParam('ratecode');
    }

    if (this.getQueryParam('displayIn') != '' || this.getQueryParam('displayIn') != false) {
      this.sharedState.displayIn = this.getQueryParam('displayIn');
    }

    //brand specific properties
    if (this.sharedState.brand == true) {
      if (this.getQueryLength() > 0 && this.getQueryVariable()) {
        this.sharedState.params = this.getQueryVariable();
        this.loading = true;

        if (this.getQueryKeyword() == "city") {
          this.sharedState.searchType = 'city';
        } else if (this.getQueryKeyword() == "state") {
          this.sharedState.searchType = 'state';
        } else if (this.getQueryKeyword() == "country") {
          this.sharedState.searchType = 'country';
        } else if (this.getQueryKeyword() == "airport") {
          this.sharedState.searchType = 'airport';
        } else if (this.getQueryKeyword() == "attraction") {
          this.sharedState.searchType = 'attraction';
        } else if (this.getQueryKeyword() == "latitude") {
          this.sharedState.searchType = 'geolocation';
        } else {
          this.sharedState.searchType = 'property';
        }

        //brand specific properties
        $.ajax({
          url: '/ajax/properties?' + this.sharedState.params + '&radius=1' + '&brand=' + this.sharedState.brandInfo.code,
          type: 'get',
          dataType: 'json',
          async: true,
          success: function (data) {
            var promoErrorText = getErrorText.call(this, 193);
            if (!data && data.data == undefined && $.isEmptyObject(data.data.record)) {
              this.sharedState.error = "";
              this.loading = false;
              return; // no results
            } else if (data && $.isEmptyObject(data.data.record)) {
              this.sharedState.error = "";
              this.loading = false;

              if (data.data['@attributes'].search_item) {
                this.sharedState.keywordParam = data.data['@attributes'].search_item;
                $('.search-loc').attr('placeholder', '');
                this.sharedState.query = this.sharedState.keywordParam;
                this.sharedState.searchCity = data.data['@attributes'].city;
                this.sharedState.searchState = data.data['@attributes'].state;
                this.sharedState.searchCountry = data.data['@attributes'].country;
                this.sharedState.searchRegion = data.data['@attributes'].region;
                this.sharedState.searchAction = data.data['@attributes'].search_url;

                if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city') {
                  this.computedHeader = this.sharedState.searchCity;
                  this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                    return val;
                  }).join(', ');
                  this.nearin = 'near';
                } else if (this.sharedState.searchType == 'state') {
                  this.computedHeader = this.sharedState.searchState;
                  this.computedSubHeader = this.sharedState.searchCountry;
                  this.nearin = 'in';
                } else if (this.sharedState.searchType == 'country') {
                  this.computedHeader = this.sharedState.searchCountry;
                  this.nearin = 'in';
                }

                if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                  this.locationSearch = this.sharedState.keywordParam;
                } else {
                  this.locationSearch = this.computedHeader;
                }
              } else {
                if (this.sharedState.searchType == 'geolocation') {
                  this.locationSearch = 'Near Me';
                }
              }

              this.trackSearchResults('searchResultsPage', 'Successful Search Result');
              return; // no results
            } else {
              if (data.data['@attributes'].search_item) {
                this.sharedState.keywordParam = data.data['@attributes'].search_item;
                $('.search-loc').attr('placeholder', '');
                this.sharedState.query = this.sharedState.keywordParam;

                this.sharedState.searchCity = data.data['@attributes'].city;
                this.sharedState.searchState = data.data['@attributes'].state;
                this.sharedState.searchCountry = data.data['@attributes'].country;
                this.sharedState.searchRegion = data.data['@attributes'].region;
                this.sharedState.searchAction = data.data['@attributes'].search_url;

                if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city') {
                  this.computedHeader = this.sharedState.searchCity;
                  this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                    return val;
                  }).join(', ');
                  this.nearin = 'near';
                } else if (this.sharedState.searchType == 'state') {
                  this.computedHeader = this.sharedState.searchState;
                  this.computedSubHeader = this.sharedState.searchCountry;
                  this.nearin = 'in';
                } else if (this.sharedState.searchType == 'country') {
                  this.computedHeader = this.sharedState.searchCountry;
                  this.nearin = 'in';
                }

                if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                  this.locationSearch = this.sharedState.keywordParam;
                } else {
                  this.locationSearch = this.computedHeader;
                }
              } else {
                if (this.sharedState.searchType == 'geolocation') {
                  this.locationSearch = 'Near Me';
                }
              }

              this.loading = false;
              $('.results-number h2').animate({ opacity: 1 }, 650);

              var brandproperties = [];
              if (data.data.record) brandproperties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
              this.brandpropertiescomputed(brandproperties);
            }
          }.bind(this),
          error: function error(err) {
            console.log(err);
          }
        });

        $.ajax({
          url: '/ajax/properties?' + this.sharedState.params + '&radius=1' + this.sharedState.brandsparams,
          type: 'get',
          dataType: 'json',
          async: true,
          success: function (data) {
            if (!data && data.data == undefined && $.isEmptyObject(data.data.record)) {
              this.sharedState.error = getErrorText.call(this, 316); //"Removing filters may return more results.(295)";
              this.loading = false;
              return; // no results
            } else {
              if (data.data['@attributes'].search_item) {
                this.sharedState.keywordParam = data.data['@attributes'].search_item;
                this.sharedState.searchCountry = data.data['@attributes'].country;
              }
              this.loading = false;

              var travelGuide = [];
              if (data.data.TravelGuide) travelGuide = $.isArray(data.data.TravelGuide) ? data.data.TravelGuide : [data.data.TravelGuide];
              this.travelGuidecomputed(travelGuide);

              var featCities = [];
              if (data.data.Cities) featCities = $.isArray(data.data.Cities.record) ? data.data.Cities.record : [data.data.Cities.record];
              this.featuredCitiescomputed(featCities);

              var otherproperties = [];
              if (data.data.record) otherproperties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
              this.othercarlsonpropertiescomputed(otherproperties);

              var amenityFilters = [];
              if (data.data.amenity_filters && !$.isEmptyObject(data.data.amenity_filters)) amenityFilters = $.isArray(data.data.amenity_filters.record) ? data.data.amenity_filters.record : [data.data.amenity_filters.record];
              this.amenitiesfilterscomputed(amenityFilters);

              var brandFilters = [];
              if (data.data.brand_filters && !$.isEmptyObject(data.data.brand_filters)) brandFilters = $.isArray(data.data.brand_filters.record) ? data.data.brand_filters.record : [data.data.brand_filters.record];
              this.brandsfilterscomputed(brandFilters);

              if (this.sharedState.filtersparams.length > 0) {
                this.sharedState.amenitiesIds = this.sharedState.amenitiesIds.concat(this.sharedState.filtersparams);
              }

              if (this.sharedState.existingbrandfilters.length > 0) {
                this.sharedState.branditemsCodes = this.sharedState.branditemsCodes.concat(this.sharedState.existingbrandfilters);
              }

              var getAmenities = $.Deferred();

              if (this.sharedState.filtersparams.length > 0) {
                $.ajax({
                  url: '/ajax/amenity-categories?' + this.sharedState.params + this.sharedState.brandsparams,
                  type: 'get',
                  dataType: 'json',
                  async: true,
                  success: function (data) {

                    if (!data.data) {
                      this.error = true;
                      return; // no results
                    } else {

                      var amenitiesCats = [];
                      if (data.data.record) amenitiesCats = $.isArray(data.data.record) ? data.data.record : [data.data.record];
                      this.amenitiesCatscomputed(amenitiesCats);

                      getAmenities.resolve(); // .resolve means it will call .done(function), or the first function in .then
                    }
                  }.bind(this),
                  error: function error(err) {
                    getAmenities.reject(); // reject means it will call .fail(function), or the second function in .then
                    console.log(err);
                  }
                });
              }

              getAmenities.done(function () {
                var amenitiesList = this.sharedState.amenitiescatsitems;
                var catListParams = [];

                var selectedParams = this.sharedState.amenitiesIds;

                $.each(amenitiesList, function (key, value) {
                  if (value.amenities !== undefined) {
                    $.each(value.amenities, function (index, item) {
                      $.each(item, function (idx, val) {
                        catListParams.push(val);
                      });
                    });
                  }
                });

                var filterArray = [];

                $.each(catListParams, function (i, ele) {
                  var index = $.inArray(ele['@attributes'].id, selectedParams);
                  if (index != -1) {
                    filterArray.push(ele);
                  }
                });
                this.sharedState.amenitiesitems = this.sharedState.amenitiesitems.concat(filterArray);
              }.bind(this)).fail(function () {
                console.log('no brands');
              });

              var getBrands = $.Deferred();

              if (this.sharedState.existingbrandfilters.length > 0) {
                $.ajax({
                  url: '/ajax/get-brands',
                  type: 'get',
                  dataType: 'json',
                  async: true,
                  success: function (data) {

                    if (!data.data) {
                      this.error = true;
                      return; // no results
                    } else {

                      var brandsCats = [];
                      if (data.data.record) brandsCats = $.isArray(data.data.record) ? data.data.record : [data.data.record];
                      this.brandsCatscomputed(brandsCats);

                      getBrands.resolve(); // .resolve means it will call .done(function), or the first function in .then
                    }
                  }.bind(this),
                  error: function error(err) {
                    getBrands.reject(); // reject means it will call .fail(function), or the second function in .then
                    console.log(err);
                  }
                });
              }

              getBrands.done(function () {
                var amenitiesList = this.sharedState.brandfiltersparams;
                var selectedParams = this.sharedState.branditemsCodes;
                var brandArray = [];

                $.each(amenitiesList, function (i, ele) {
                  var index = $.inArray(ele.code, selectedParams);
                  if (index != -1) {
                    brandArray.push(ele);
                  }
                });
                this.sharedState.branditems = this.sharedState.branditems.concat(brandArray);
              }.bind(this)).fail(function () {
                console.log('no brands');
              });

              this.trackSearchResults('searchResultsPage', 'Successful Search Result');
            }
          }.bind(this),
          error: function error(err) {
            console.log(err);
          }
        });
      }
    } else {
      if (this.getQueryLength() > 0 && this.getQueryVariable()) {
        this.sharedState.params = this.getQueryVariable();
        this.loading = true;

        if (this.getQueryKeyword() == "city") {
          this.sharedState.searchType = 'city';
        } else if (this.getQueryKeyword() == "state") {
          this.sharedState.searchType = 'state';
        } else if (this.getQueryKeyword() == "country") {
          this.sharedState.searchType = 'country';
        } else if (this.getQueryKeyword() == "airport") {
          this.sharedState.searchType = 'airport';
        } else if (this.getQueryKeyword() == "attraction") {
          this.sharedState.searchType = 'attraction';
        } else if (this.getQueryKeyword() == "latitude") {
          this.sharedState.searchType = 'geolocation';
        } else {
          this.sharedState.searchType = 'property';
        }

        $.ajax({
          url: '/ajax/properties?' + this.sharedState.params + '&radius=1' + this.sharedState.brandsparams,
          type: 'get',
          dataType: 'json',
          async: true,
          success: function (data) {
            var promoErrorText = getErrorText.call(this, 491);
            if (!data && data.data == undefined && $.isEmptyObject(data.data.record)) {
              this.sharedState.error = "";
              this.loading = false;
              return; // no results
            } else if (data && $.isEmptyObject(data.data.record)) {
              this.sharedState.error = "";
              this.loading = false;

              if (data.data['@attributes'].search_item) {
                this.sharedState.keywordParam = data.data['@attributes'].search_item;
                $('.search-loc').attr('placeholder', '');
                this.sharedState.query = this.sharedState.keywordParam;

                this.sharedState.searchCity = data.data['@attributes'].city;
                this.sharedState.searchState = data.data['@attributes'].state;
                this.sharedState.searchCountry = data.data['@attributes'].country;
                this.sharedState.searchRegion = data.data['@attributes'].region;
                this.sharedState.searchAction = data.data['@attributes'].search_url;

                if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city' || this.sharedState.searchType == 'airport' || this.sharedState.searchType == 'attraction') {
                  this.computedHeader = this.sharedState.searchCity;
                  this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                    return val;
                  }).join(', ');
                  this.nearin = 'near';
                } else if (this.sharedState.searchType == 'state') {
                  this.computedHeader = this.sharedState.searchState;
                  this.computedSubHeader = this.sharedState.searchCountry;
                  this.nearin = 'in';
                } else if (this.sharedState.searchType == 'country') {
                  this.computedHeader = this.sharedState.searchCountry;
                  this.nearin = 'in';
                }

                if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                  this.locationSearch = this.sharedState.keywordParam;
                } else {
                  this.locationSearch = this.computedHeader;
                }
              } else {
                if (this.sharedState.searchType == 'geolocation') {
                  this.locationSearch = 'Near Me';
                }
              }

              this.trackSearchResults('searchResultsPage', 'Successful Search Result');

              return; // no results
            } else {
              if (data.data['@attributes'].search_item) {
                this.sharedState.keywordParam = data.data['@attributes'].search_item;
                $('.search-loc').attr('placeholder', '');
                this.sharedState.query = this.sharedState.keywordParam;

                this.sharedState.searchCity = data.data['@attributes'].city;
                this.sharedState.searchState = data.data['@attributes'].state;
                this.sharedState.searchCountry = data.data['@attributes'].country;
                this.sharedState.searchRegion = data.data['@attributes'].region;
                this.sharedState.searchAction = data.data['@attributes'].search_url;

                var travelGuide = [];
                if (data.data.TravelGuide) travelGuide = $.isArray(data.data.TravelGuide) ? data.data.TravelGuide : [data.data.TravelGuide];
                this.travelGuidecomputed(travelGuide);

                var featCities = [];
                if (data.data.Cities) featCities = $.isArray(data.data.Cities.record) ? data.data.Cities.record : [data.data.Cities.record];
                this.featuredCitiescomputed(featCities);

                if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city' || this.sharedState.searchType == 'airport' || this.sharedState.searchType == 'attraction') {
                  this.computedHeader = this.sharedState.searchCity;
                  this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                    return val;
                  }).join(', ');
                  this.nearin = 'near';
                } else if (this.sharedState.searchType == 'state') {
                  this.computedHeader = this.sharedState.searchState;
                  this.computedSubHeader = this.sharedState.searchCountry;
                  this.nearin = 'in';
                } else if (this.sharedState.searchType == 'country') {
                  this.computedHeader = this.sharedState.searchCountry;
                  this.nearin = 'in';
                }

                if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                  this.locationSearch = this.sharedState.keywordParam;
                } else {
                  this.locationSearch = this.computedHeader;
                }
              } else {
                if (this.sharedState.searchType == 'geolocation') {
                  this.locationSearch = 'Near Me';
                }
              }

              this.loading = false;
              $('.results-number h2').animate({ opacity: 1 }, 650);

              var properties = [];
              if (data.data.record) properties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
              this.propertiescomputed(properties);

              var amenityFilters = [];
              if (data.data.amenity_filters && !$.isEmptyObject(data.data.amenity_filters)) amenityFilters = $.isArray(data.data.amenity_filters.record) ? data.data.amenity_filters.record : [data.data.amenity_filters.record];
              this.amenitiesfilterscomputed(amenityFilters);

              var brandFilters = [];
              if (data.data.brand_filters && !$.isEmptyObject(data.data.brand_filters)) brandFilters = $.isArray(data.data.brand_filters.record) ? data.data.brand_filters.record : [data.data.brand_filters.record];
              this.brandsfilterscomputed(brandFilters);

              if (this.sharedState.filtersparams.length > 0) {
                this.sharedState.amenitiesIds = this.sharedState.amenitiesIds.concat(this.sharedState.filtersparams);
              }

              if (this.sharedState.existingbrandfilters.length > 0) {
                this.sharedState.branditemsCodes = this.sharedState.branditemsCodes.concat(this.sharedState.existingbrandfilters);
              }

              var getAmenities = $.Deferred();

              if (this.sharedState.filtersparams.length > 0) {
                $.ajax({
                  url: '/ajax/amenity-categories?' + this.sharedState.params + this.sharedState.brandsparams,
                  type: 'get',
                  dataType: 'json',
                  async: true,
                  success: function (data) {

                    if (!data.data) {
                      this.error = true;
                      return; // no results
                    } else {

                      var amenitiesCats = [];
                      if (data.data.record) amenitiesCats = $.isArray(data.data.record) ? data.data.record : [data.data.record];
                      this.amenitiesCatscomputed(amenitiesCats);

                      getAmenities.resolve(); // .resolve means it will call .done(function), or the first function in .then
                    }
                  }.bind(this),
                  error: function error(err) {
                    getAmenities.reject(); // reject means it will call .fail(function), or the second function in .then
                    console.log(err);
                  }
                });
              }

              getAmenities.done(function () {
                var amenitiesList = this.sharedState.amenitiescatsitems;
                var catListParams = [];

                var selectedParams = this.sharedState.amenitiesIds;

                $.each(amenitiesList, function (key, value) {
                  if (value.amenities !== undefined) {
                    $.each(value.amenities, function (index, item) {
                      $.each(item, function (idx, val) {
                        catListParams.push(val);
                      });
                    });
                  }
                });

                var filterArray = [];

                $.each(catListParams, function (i, ele) {
                  var index = $.inArray(ele['@attributes'].id, selectedParams);
                  if (index != -1) {
                    filterArray.push(ele);
                  }
                });
                this.sharedState.amenitiesitems = this.sharedState.amenitiesitems.concat(filterArray);
              }.bind(this)).fail(function () {
                console.log('no amenities');
              });

              var getBrands = $.Deferred();

              if (this.sharedState.existingbrandfilters.length > 0) {
                $.ajax({
                  url: '/ajax/get-brands',
                  type: 'get',
                  dataType: 'json',
                  async: true,
                  success: function (data) {

                    if (!data.data) {
                      this.error = true;
                      return; // no results
                    } else {

                      var brandsCats = [];
                      if (data.data.record) brandsCats = $.isArray(data.data.record) ? data.data.record : [data.data.record];
                      this.brandsCatscomputed(brandsCats);

                      getBrands.resolve(); // .resolve means it will call .done(function), or the first function in .then
                    }
                  }.bind(this),
                  error: function error(err) {
                    getBrands.reject(); // reject means it will call .fail(function), or the second function in .then
                    console.log(err);
                  }
                });
              }

              getBrands.done(function () {
                var amenitiesList = this.sharedState.brandfiltersparams;
                var selectedParams = this.sharedState.branditemsCodes;
                var brandArray = [];

                $.each(amenitiesList, function (i, ele) {
                  var index = $.inArray(ele.code, selectedParams);
                  if (index != -1) {
                    brandArray.push(ele);
                  }
                });
                this.sharedState.branditems = this.sharedState.branditems.concat(brandArray);
              }.bind(this)).fail(function () {
                console.log('no brands');
              });

              this.trackSearchResults('searchResultsPage', 'Successful Search Result');
            }
          }.bind(this),
          error: function error(err) {
            console.log(err);
          }
        });
      }
    }
  },

  watch: {
    "sharedState.params": {
      deep: true,
      handler: function handler() {
        this.loading = true;
        if (this.sharedState.brand == true) {
          $.ajax({
            url: '/ajax/properties?' + this.sharedState.params + '&radius=1' + '&brand=' + this.sharedState.brandInfo.code,
            type: 'get',
            dataType: 'json',
            async: true,
            success: function (data) {
              var promoErrorText = getErrorText.call(this, 743);
              if (!data && data.data == undefined && $.isEmptyObject(data.data.record)) {
                this.sharedState.error = "";
                this.loading = false;
                return; // no results
              } else if (data && $.isEmptyObject(data.data.record)) {
                this.sharedState.error = "";
                this.loading = false;

                if (data.data['@attributes'].search_item) {
                  this.sharedState.keywordParam = data.data['@attributes'].search_item;
                  $('.search-loc').attr('placeholder', '');
                  this.sharedState.query = this.sharedState.keywordParam;

                  this.sharedState.searchCity = data.data['@attributes'].city;
                  this.sharedState.searchState = data.data['@attributes'].state;
                  this.sharedState.searchCountry = data.data['@attributes'].country;
                  this.sharedState.searchRegion = data.data['@attributes'].region;
                  this.sharedState.searchAction = data.data['@attributes'].search_url;

                  if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city') {
                    this.computedHeader = this.sharedState.searchCity;
                    this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                      return val;
                    }).join(', ');
                    this.nearin = 'near';
                  } else if (this.sharedState.searchType == 'state') {
                    this.computedHeader = this.sharedState.searchState;
                    this.computedSubHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  } else if (this.sharedState.searchType == 'country') {
                    this.computedHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  }

                  if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                    this.locationSearch = this.sharedState.keywordParam;
                  } else {
                    this.locationSearch = this.computedHeader;
                  }
                } else {
                  if (this.sharedState.searchType == 'geolocation') {
                    this.locationSearch = 'Near Me';
                  }
                }
                if (this.sharedState.promocodes.isUpdated == true) {
                  this.trackSearchResults('rateCodeSearchRefineOverlay');
                  this.sharedState.promocodes.isUpdated = false;
                }
                return; // no results
              } else {
                if (data.data['@attributes'].search_item) {
                  this.sharedState.keywordParam = data.data['@attributes'].search_item;
                  $('.search-loc').attr('placeholder', '');
                  this.sharedState.query = this.sharedState.keywordParam;
                  this.sharedState.searchCity = data.data['@attributes'].city;
                  this.sharedState.searchState = data.data['@attributes'].state;
                  this.sharedState.searchCountry = data.data['@attributes'].country;
                  this.sharedState.searchRegion = data.data['@attributes'].region;
                  this.sharedState.searchAction = data.data['@attributes'].search_url;

                  if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city') {
                    this.computedHeader = this.sharedState.searchCity;
                    this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                      return val;
                    }).join(', ');
                    this.nearin = 'near';
                  } else if (this.sharedState.searchType == 'state') {
                    this.computedHeader = this.sharedState.searchState;
                    this.computedSubHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  } else if (this.sharedState.searchType == 'country') {
                    this.computedHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  }

                  if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                    this.locationSearch = this.sharedState.keywordParam;
                  } else {
                    this.locationSearch = this.computedHeader;
                  }
                } else {
                  if (this.sharedState.searchType == 'geolocation') {
                    this.locationSearch = 'Near Me';
                  }
                }

                this.loading = false;
                $('.results-number h2').animate({ opacity: 1 }, 650);

                var brandproperties = [];
                if (data.data.record) brandproperties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
                this.brandpropertiescomputed(brandproperties);

                var amenityFilters = [];
                if (data.data.amenity_filters && !$.isEmptyObject(data.data.amenity_filters)) amenityFilters = $.isArray(data.data.amenity_filters.record) ? data.data.amenity_filters.record : [data.data.amenity_filters.record];
                this.amenitiesfilterscomputed(amenityFilters);

                var brandFilters = [];
                if (data.data.brand_filters && !$.isEmptyObject(data.data.brand_filters)) brandFilters = $.isArray(data.data.brand_filters.record) ? data.data.brand_filters.record : [data.data.brand_filters.record];
                this.brandsfilterscomputed(brandFilters);
              }
              if (this.sharedState.promocodes.isUpdated == true) {
                this.trackSearchResults('rateCodeSearchRefineOverlay');
                this.sharedState.promocodes.isUpdated = false;
              }
            }.bind(this),
            error: function error(err) {
              console.log(err);
            }
          });

          $.ajax({
            url: '/ajax/properties?' + this.sharedState.params + '&radius=1' + this.sharedState.brandsparams,
            type: 'get',
            dataType: 'json',
            async: true,
            success: function (data) {
              var promoErrorText = getErrorText.call(this, 862);
              if (!data && data.data == undefined && $.isEmptyObject(data.data.record)) {
                this.sharedState.error = promoErrorText;
                this.loading = false;
                return; // no results
              } else if (data && $.isEmptyObject(data.data.record)) {
                this.sharedState.error = promoErrorText;
                this.loading = false;

                if (data.data['@attributes'].search_item) {
                  this.sharedState.keywordParam = data.data['@attributes'].search_item;
                  $('.search-loc').attr('placeholder', '');
                  this.sharedState.query = this.sharedState.keywordParam;
                  this.sharedState.searchCity = data.data['@attributes'].city;
                  this.sharedState.searchState = data.data['@attributes'].state;
                  this.sharedState.searchCountry = data.data['@attributes'].country;
                  this.sharedState.searchRegion = data.data['@attributes'].region;
                  this.sharedState.searchAction = data.data['@attributes'].search_url;

                  if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city' || this.sharedState.searchType == 'airport' || this.sharedState.searchType == 'attraction') {
                    this.computedHeader = this.sharedState.searchCity;
                    this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                      return val;
                    }).join(', ');
                    this.nearin = 'near';
                  } else if (this.sharedState.searchType == 'state') {
                    this.computedHeader = this.sharedState.searchState;
                    this.computedSubHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  } else if (this.sharedState.searchType == 'country') {
                    this.computedHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  }

                  if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                    this.locationSearch = this.sharedState.keywordParam;
                  } else {
                    this.locationSearch = this.computedHeader;
                  }
                } else {
                  if (this.sharedState.searchType == 'geolocation') {
                    this.locationSearch = 'Near Me';
                  }
                }
                if (this.sharedState.promocodes.isUpdated == true) {
                  this.trackSearchResults('rateCodeSearchRefineOverlay');
                  this.sharedState.promocodes.isUpdated = false;
                }
                return; // no results
              } else {
                if (data.data['@attributes'].search_item) {
                  this.sharedState.keywordParam = data.data['@attributes'].search_item;
                  $('.search-loc').attr('placeholder', '');
                  this.sharedState.query = this.sharedState.keywordParam;

                  var travelGuide = [];
                  if (data.data.TravelGuide) travelGuide = $.isArray(data.data.TravelGuide) ? data.data.TravelGuide : [data.data.TravelGuide];
                  this.travelGuidecomputed(travelGuide);

                  var featCities = [];
                  if (data.data.Cities) featCities = $.isArray(data.data.Cities.record) ? data.data.Cities.record : [data.data.Cities.record];
                  this.featuredCitiescomputed(featCities);

                  this.sharedState.searchCity = data.data['@attributes'].city;
                  this.sharedState.searchState = data.data['@attributes'].state;
                  this.sharedState.searchCountry = data.data['@attributes'].country;
                  this.sharedState.searchRegion = data.data['@attributes'].region;
                  this.sharedState.searchAction = data.data['@attributes'].search_url;

                  if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city' || this.sharedState.searchType == 'airport' || this.sharedState.searchType == 'attraction') {
                    this.computedHeader = this.sharedState.searchCity;
                    this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                      return val;
                    }).join(', ');
                    this.nearin = 'near';
                  } else if (this.sharedState.searchType == 'state') {
                    this.computedHeader = this.sharedState.searchState;
                    this.computedSubHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  } else if (this.sharedState.searchType == 'country') {
                    this.computedHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  }

                  if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                    this.locationSearch = this.sharedState.keywordParam;
                  } else {
                    this.locationSearch = this.computedHeader;
                  }
                } else {
                  if (this.sharedState.searchType == 'geolocation') {
                    this.locationSearch = 'Near Me';
                  }
                }

                this.loading = false;
                $('.results-number h2').animate({ opacity: 1 }, 650);

                var otherproperties = [];
                if (data.data.record) otherproperties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
                this.othercarlsonpropertiescomputed(otherproperties);
              }
              if (this.sharedState.promocodes.isUpdated == true) {
                this.trackSearchResults('rateCodeSearchRefineOverlay');
                this.sharedState.promocodes.isUpdated = false;
              }
            }.bind(this),
            error: function error(err) {
              console.log(err);
            }
          });
        } else {
          $.ajax({
            url: '/ajax/properties?' + this.sharedState.params + '&radius=1' + this.sharedState.brandsparams,
            type: 'get',
            dataType: 'json',
            async: true,
            success: function (data) {
              var promoErrorText = getErrorText.call(this, 986);
              if (!data && data.data == undefined && $.isEmptyObject(data.data.record)) {
                this.sharedState.error = promoErrorText;
                this.loading = false;
                return; // no results
              } else if (data && $.isEmptyObject(data.data.record)) {
                this.sharedState.error = promoErrorText;
                this.loading = false;

                if (data.data['@attributes'].search_item) {
                  this.sharedState.keywordParam = data.data['@attributes'].search_item;
                  $('.search-loc').attr('placeholder', '');
                  this.sharedState.query = this.sharedState.keywordParam;
                  this.sharedState.searchCity = data.data['@attributes'].city;
                  this.sharedState.searchState = data.data['@attributes'].state;
                  this.sharedState.searchCountry = data.data['@attributes'].country;
                  this.sharedState.searchRegion = data.data['@attributes'].region;
                  this.sharedState.searchAction = data.data['@attributes'].search_url;

                  if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city' || this.sharedState.searchType == 'airport' || this.sharedState.searchType == 'attraction') {
                    this.computedHeader = this.sharedState.searchCity;
                    this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                      return val;
                    }).join(', ');
                    this.nearin = 'near';
                  } else if (this.sharedState.searchType == 'state') {
                    this.computedHeader = this.sharedState.searchState;
                    this.computedSubHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  } else if (this.sharedState.searchType == 'country') {
                    this.computedHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  }

                  if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                    this.locationSearch = this.sharedState.keywordParam;
                  } else {
                    this.locationSearch = this.computedHeader;
                  }
                } else {
                  if (this.sharedState.searchType == 'geolocation') {
                    this.locationSearch = 'Near Me';
                  }
                }
                if (this.sharedState.promocodes.isUpdated == true) {
                  this.trackSearchResults('rateCodeSearchRefineOverlay');
                  this.sharedState.promocodes.isUpdated = false;
                }
                return; // no results
              } else {
                if (data.data['@attributes'].search_item) {
                  this.sharedState.keywordParam = data.data['@attributes'].search_item;
                  $('.search-loc').attr('placeholder', '');
                  this.sharedState.query = this.sharedState.keywordParam;

                  var travelGuide = [];
                  if (data.data.TravelGuide) travelGuide = $.isArray(data.data.TravelGuide) ? data.data.TravelGuide : [data.data.TravelGuide];
                  this.travelGuidecomputed(travelGuide);

                  var featCities = [];
                  if (data.data.Cities) featCities = $.isArray(data.data.Cities.record) ? data.data.Cities.record : [data.data.Cities.record];
                  this.featuredCitiescomputed(featCities);

                  this.sharedState.searchCity = data.data['@attributes'].city;
                  this.sharedState.searchState = data.data['@attributes'].state;
                  this.sharedState.searchCountry = data.data['@attributes'].country;
                  this.sharedState.searchRegion = data.data['@attributes'].region;
                  this.sharedState.searchAction = data.data['@attributes'].search_url;

                  if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city' || this.sharedState.searchType == 'airport' || this.sharedState.searchType == 'attraction') {
                    this.computedHeader = this.sharedState.searchCity;
                    this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                      return val;
                    }).join(', ');
                    this.nearin = 'near';
                  } else if (this.sharedState.searchType == 'state') {
                    this.computedHeader = this.sharedState.searchState;
                    this.computedSubHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  } else if (this.sharedState.searchType == 'country') {
                    this.computedHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  }

                  if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                    this.locationSearch = this.sharedState.keywordParam;
                  } else {
                    this.locationSearch = this.computedHeader;
                  }
                } else {
                  if (this.sharedState.searchType == 'geolocation') {
                    this.locationSearch = 'Near Me';
                  }
                }

                this.loading = false;
                $('.results-number h2').animate({ opacity: 1 }, 650);

                var properties = [];
                if (data.data.record) properties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
                this.propertiescomputed(properties);

                var amenityFilters = [];
                if (data.data.amenity_filters && !$.isEmptyObject(data.data.amenity_filters)) amenityFilters = $.isArray(data.data.amenity_filters.record) ? data.data.amenity_filters.record : [data.data.amenity_filters.record];
                this.amenitiesfilterscomputed(amenityFilters);

                var brandFilters = [];
                if (data.data.brand_filters && !$.isEmptyObject(data.data.brand_filters)) brandFilters = $.isArray(data.data.brand_filters.record) ? data.data.brand_filters.record : [data.data.brand_filters.record];
                this.brandsfilterscomputed(brandFilters);
              }
              if (this.sharedState.promocodes.isUpdated == true) {
                this.trackSearchResults('rateCodeSearchRefineOverlay');
                this.sharedState.promocodes.isUpdated = false;
              }
            }.bind(this),
            error: function error(err) {
              console.log(err);
            }
          });
        }

        // Save params for booking funnel
        this.saveParams();
      }
    },

    "sharedState.brandsparams": {
      deep: true,
      handler: function handler() {
        this.loading = true;

        if (this.sharedState.brand == true) {
          $.ajax({
            url: '/ajax/properties?' + this.sharedState.params + '&radius=1' + '&brand=' + this.sharedState.brandInfo.code,
            type: 'get',
            dataType: 'json',
            async: true,
            success: function (data) {
              var promoErrorText = getErrorText.call(this, 1128);
              if (!data && data.data == undefined && $.isEmptyObject(data.data.record)) {
                this.sharedState.error = promoErrorText;
                this.loading = false;
                return; // no results
              } else if (data && $.isEmptyObject(data.data.record)) {
                this.sharedState.error = promoErrorText;
                this.loading = false;
                if (data.data['@attributes'].search_item) {
                  this.sharedState.keywordParam = data.data['@attributes'].search_item;
                  $('.search-loc').attr('placeholder', '');
                  this.sharedState.query = this.sharedState.keywordParam;
                  this.sharedState.searchCity = data.data['@attributes'].city;
                  this.sharedState.searchState = data.data['@attributes'].state;
                  this.sharedState.searchCountry = data.data['@attributes'].country;
                  this.sharedState.searchRegion = data.data['@attributes'].region;
                  this.sharedState.searchAction = data.data['@attributes'].search_url;

                  if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city') {
                    this.computedHeader = this.sharedState.searchCity;
                    this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                      return val;
                    }).join(', ');
                    this.nearin = 'near';
                  } else if (this.sharedState.searchType == 'state') {
                    this.computedHeader = this.sharedState.searchState;
                    this.computedSubHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  } else if (this.sharedState.searchType == 'country') {
                    this.computedHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  }

                  if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                    this.locationSearch = this.sharedState.keywordParam;
                  } else {
                    this.locationSearch = this.computedHeader;
                  }
                } else {
                  if (this.sharedState.searchType == 'geolocation') {
                    this.locationSearch = 'Near Me';
                  }
                }
                return; // no results
              } else {
                if (data.data['@attributes'].search_item) {
                  this.sharedState.keywordParam = data.data['@attributes'].search_item;
                  $('.search-loc').attr('placeholder', '');
                  this.sharedState.query = this.sharedState.keywordParam;

                  this.sharedState.searchCity = data.data['@attributes'].city;
                  this.sharedState.searchState = data.data['@attributes'].state;
                  this.sharedState.searchCountry = data.data['@attributes'].country;
                  this.sharedState.searchRegion = data.data['@attributes'].region;
                  this.sharedState.searchAction = data.data['@attributes'].search_url;

                  if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city') {
                    this.computedHeader = this.sharedState.searchCity;
                    this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                      return val;
                    }).join(', ');
                    this.nearin = 'near';
                  } else if (this.sharedState.searchType == 'state') {
                    this.computedHeader = this.sharedState.searchState;
                    this.computedSubHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  } else if (this.sharedState.searchType == 'country') {
                    this.computedHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  }

                  if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                    this.locationSearch = this.sharedState.keywordParam;
                  } else {
                    this.locationSearch = this.computedHeader;
                  }
                } else {
                  if (this.sharedState.searchType == 'geolocation') {
                    this.locationSearch = 'Near Me';
                  }
                }

                this.loading = false;
                $('.results-number h2').animate({ opacity: 1 }, 650);

                var brandproperties = [];
                if (data.data.record) brandproperties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
                this.brandpropertiescomputed(brandproperties);

                var amenityFilters = [];
                if (data.data.amenity_filters && !$.isEmptyObject(data.data.amenity_filters)) amenityFilters = $.isArray(data.data.amenity_filters.record) ? data.data.amenity_filters.record : [data.data.amenity_filters.record];
                this.amenitiesfilterscomputed(amenityFilters);

                var brandFilters = [];
                if (data.data.brand_filters && !$.isEmptyObject(data.data.brand_filters)) brandFilters = $.isArray(data.data.brand_filters.record) ? data.data.brand_filters.record : [data.data.brand_filters.record];
                this.brandsfilterscomputed(brandFilters);
              }
            }.bind(this),
            error: function error(err) {
              console.log(err);
            }
          });

          $.ajax({
            url: '/ajax/properties?' + this.sharedState.params + '&radius=1' + this.sharedState.brandsparams,
            type: 'get',
            dataType: 'json',
            async: true,
            success: function (data) {
              var promoErrorText = getErrorText.call(this, 1237);
              if (!data && data.data == undefined && $.isEmptyObject(data.data.record)) {
                this.sharedState.error = promoErrorText;
                this.loading = false;
                return; // no results
              } else if (data && $.isEmptyObject(data.data.record)) {
                this.sharedState.error = promoErrorText;
                this.loading = false;

                if (data.data['@attributes'].search_item) {
                  this.sharedState.keywordParam = data.data['@attributes'].search_item;
                  $('.search-loc').attr('placeholder', '');
                  this.sharedState.query = this.sharedState.keywordParam;

                  this.sharedState.searchCity = data.data['@attributes'].city;
                  this.sharedState.searchState = data.data['@attributes'].state;
                  this.sharedState.searchCountry = data.data['@attributes'].country;
                  this.sharedState.searchRegion = data.data['@attributes'].region;
                  this.sharedState.searchAction = data.data['@attributes'].search_url;

                  if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city' || this.sharedState.searchType == 'airport' || this.sharedState.searchType == 'attraction') {
                    this.computedHeader = this.sharedState.searchCity;
                    this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                      return val;
                    }).join(', ');
                    this.nearin = 'near';
                  } else if (this.sharedState.searchType == 'state') {
                    this.computedHeader = this.sharedState.searchState;
                    this.computedSubHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  } else if (this.sharedState.searchType == 'country') {
                    this.computedHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  }

                  if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                    this.locationSearch = this.sharedState.keywordParam;
                  } else {
                    this.locationSearch = this.computedHeader;
                  }
                } else {
                  if (this.sharedState.searchType == 'geolocation') {
                    this.locationSearch = 'Near Me';
                  }
                }
                return; // no results
              } else {
                if (data.data['@attributes'].search_item) {
                  this.sharedState.keywordParam = data.data['@attributes'].search_item;
                  $('.search-loc').attr('placeholder', '');
                  this.sharedState.query = this.sharedState.keywordParam;

                  var travelGuide = [];
                  if (data.data.TravelGuide) travelGuide = $.isArray(data.data.TravelGuide) ? data.data.TravelGuide : [data.data.TravelGuide];
                  this.travelGuidecomputed(travelGuide);

                  var featCities = [];
                  if (data.data.Cities) featCities = $.isArray(data.data.Cities.record) ? data.data.Cities.record : [data.data.Cities.record];
                  this.featuredCitiescomputed(featCities);

                  this.sharedState.searchCity = data.data['@attributes'].city;
                  this.sharedState.searchState = data.data['@attributes'].state;
                  this.sharedState.searchCountry = data.data['@attributes'].country;
                  this.sharedState.searchRegion = data.data['@attributes'].region;
                  this.sharedState.searchAction = data.data['@attributes'].search_url;

                  if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city' || this.sharedState.searchType == 'airport' || this.sharedState.searchType == 'attraction') {
                    this.computedHeader = this.sharedState.searchCity;
                    this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                      return val;
                    }).join(', ');
                    this.nearin = 'near';
                  } else if (this.sharedState.searchType == 'state') {
                    this.computedHeader = this.sharedState.searchState;
                    this.computedSubHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  } else if (this.sharedState.searchType == 'country') {
                    this.computedHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  }

                  if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                    this.locationSearch = this.sharedState.keywordParam;
                  } else {
                    this.locationSearch = this.computedHeader;
                  }
                } else {
                  if (this.sharedState.searchType == 'geolocation') {
                    this.locationSearch = 'Near Me';
                  }
                }

                this.loading = false;
                $('.results-number h2').animate({ opacity: 1 }, 650);

                var otherproperties = [];
                if (data.data.record) otherproperties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
                this.othercarlsonpropertiescomputed(otherproperties);
              }
            }.bind(this),
            error: function error(err) {
              console.log(err);
            }
          });
        } else {
          $.ajax({
            url: '/ajax/properties?' + this.sharedState.params + '&radius=1' + this.sharedState.brandsparams,
            type: 'get',
            dataType: 'json',
            async: true,
            success: function (data) {
              var promoErrorText = getErrorText.call(this, 1347);
              if (!data && data.data == undefined && $.isEmptyObject(data.data.record)) {
                this.sharedState.error = promoErrorText;
                this.loading = false;
                return; // no results
              } else if (data && $.isEmptyObject(data.data.record)) {
                this.sharedState.error = promoErrorText;
                this.loading = false;
                if (data.data['@attributes'].search_item) {
                  this.sharedState.keywordParam = data.data['@attributes'].search_item;
                  $('.search-loc').attr('placeholder', '');
                  this.sharedState.query = this.sharedState.keywordParam;
                  this.sharedState.searchCity = data.data['@attributes'].city;
                  this.sharedState.searchState = data.data['@attributes'].state;
                  this.sharedState.searchCountry = data.data['@attributes'].country;
                  this.sharedState.searchRegion = data.data['@attributes'].region;
                  this.sharedState.searchAction = data.data['@attributes'].search_url;

                  if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city' || this.sharedState.searchType == 'airport' || this.sharedState.searchType == 'attraction') {
                    this.computedHeader = this.sharedState.searchCity;
                    this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                      return val;
                    }).join(', ');
                    this.nearin = 'near';
                  } else if (this.sharedState.searchType == 'state') {
                    this.computedHeader = this.sharedState.searchState;
                    this.computedSubHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  } else if (this.sharedState.searchType == 'country') {
                    this.computedHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  }

                  if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                    this.locationSearch = this.sharedState.keywordParam;
                  } else {
                    this.locationSearch = this.computedHeader;
                  }
                } else {
                  if (this.sharedState.searchType == 'geolocation') {
                    this.locationSearch = 'Near Me';
                  }
                }
                return; // no results
              } else {
                if (data.data['@attributes'].search_item) {
                  this.sharedState.keywordParam = data.data['@attributes'].search_item;
                  $('.search-loc').attr('placeholder', '');
                  this.sharedState.query = this.sharedState.keywordParam;

                  var travelGuide = [];
                  if (data.data.TravelGuide) travelGuide = $.isArray(data.data.TravelGuide) ? data.data.TravelGuide : [data.data.TravelGuide];
                  this.travelGuidecomputed(travelGuide);

                  var featCities = [];
                  if (data.data.Cities) featCities = $.isArray(data.data.Cities.record) ? data.data.Cities.record : [data.data.Cities.record];
                  this.featuredCitiescomputed(featCities);

                  this.sharedState.searchCity = data.data['@attributes'].city;
                  this.sharedState.searchState = data.data['@attributes'].state;
                  this.sharedState.searchCountry = data.data['@attributes'].country;
                  this.sharedState.searchRegion = data.data['@attributes'].region;
                  this.sharedState.searchAction = data.data['@attributes'].search_url;

                  if (this.sharedState.searchType == 'property' || this.sharedState.searchType == 'city' || this.sharedState.searchType == 'airport' || this.sharedState.searchType == 'attraction') {
                    this.computedHeader = this.sharedState.searchCity;
                    this.computedSubHeader = [this.sharedState.searchState, this.sharedState.searchCountry].filter(function (val) {
                      return val;
                    }).join(', ');
                    this.nearin = 'near';
                  } else if (this.sharedState.searchType == 'state') {
                    this.computedHeader = this.sharedState.searchState;
                    this.computedSubHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  } else if (this.sharedState.searchType == 'country') {
                    this.computedHeader = this.sharedState.searchCountry;
                    this.nearin = 'in';
                  }

                  if (this.sharedState.searchType == 'attraction' || this.sharedState.searchType == 'airport') {
                    this.locationSearch = this.sharedState.keywordParam;
                  } else {
                    this.locationSearch = this.computedHeader;
                  }
                } else {
                  if (this.sharedState.searchType == 'geolocation') {
                    this.locationSearch = 'Near Me';
                  }
                }

                this.loading = false;
                $('.results-number h2').animate({ opacity: 1 }, 650);

                var properties = [];
                if (data.data.record) properties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
                this.propertiescomputed(properties);

                var amenityFilters = [];
                if (data.data.amenity_filters && !$.isEmptyObject(data.data.amenity_filters)) amenityFilters = $.isArray(data.data.amenity_filters.record) ? data.data.amenity_filters.record : [data.data.amenity_filters.record];
                this.amenitiesfilterscomputed(amenityFilters);

                var brandFilters = [];
                if (data.data.brand_filters && !$.isEmptyObject(data.data.brand_filters)) brandFilters = $.isArray(data.data.brand_filters.record) ? data.data.brand_filters.record : [data.data.brand_filters.record];
                this.brandsfilterscomputed(brandFilters);
              }
            }.bind(this),
            error: function error(err) {
              console.log(err);
            }
          });
        }

        // Save params for booking funnel
        this.saveParams();
      }
    }
  },

  methods: {
    stayDateFormat: function stayDateFormat(date) {
      var stayDate = moment(date, 'YYYY-MM-DD').format('MMMM YYYY');
      return stayDate;
    },
    trackSearchResults: function trackSearchResults(pageName, eventName) {
      var cities = [];
      var states = [];
      var hotels = [];
      var hotelsbrands = [];
      var hiLowContent = 0;

      if (this.sharedState.propertiesitems.length > 0) {
        this.sharedState.propertiesitems.forEach(function (element) {
          hotels.push(element.engineid);

          var brandsindex = hotelsbrands.indexOf(element.brand.record.code);
          if (brandsindex === -1) {
            hotelsbrands.push(element.brand.record.code);
          }

          var citiesindex = cities.indexOf(element.city);
          if (citiesindex === -1) {
            cities.push(element.city);
          }

          if (!$.isEmptyObject(element.state)) {
            var statesindex = states.indexOf(element.state);
            if (statesindex === -1) {
              states.push(element.state);
            }
          }
        });
      }

      var hotelsString = hotels.join('|');
      var hotelsbrandsString = hotelsbrands.join('|');
      var citiesString = cities.join('|');
      var statesString = states.join('|');

      if (this.sharedState.travelGuideitems.length > 0) {
        if (this.sharedState.travelGuideitems.attraction.length > 0) {
          hiLowContent = '1';
        } else {
          hiLowContent = '0';
        }
      } else {
        hiLowContent = '0';
      }

      var promocode = [];
      var promocodetype = [];
      if (store.promocodes.codes.length > 0) {
        store.promocodes.codes.forEach(function (promo) {
          promocode.push(promo.code);
          promocodetype.push(promo.name);
        });
      }

      var promoNames = promocode.join('|');
      var promoTypes = promocodetype.join('|');

      var searchLoc = '';
      if (this.sharedState.searchType == 'state' || this.sharedState.searchType == 'city' || this.sharedState.searchType == 'country') {
        searchLoc = 'Location';
      } else if (this.sharedState.searchType == 'attraction') {
        searchLoc = 'Attraction';
      } else if (this.sharedState.searchType == 'airport') {
        searchLoc = 'Airport';
      }

      var searchResults = 0;
      if (store.brand == true) {
        if (store.brandpropertiesitems.length < 1 && store.othercarlsonproperties.length < 1 && store.propertiesitems.length < 1) {
          searchResults = 0;
        }
      } else {
        if (store.propertiesitems.length < 1) {
          searchResults = 0;
        }
      }

      var webViewString;
      if (iswebview(navigator.userAgent)) {
        webViewString = 'Yes|' + this.getMobileOperatingSystem();
      } else {
        webViewString = 'No';
      }
      var self = this;

      var globalProperties = {
        'page.pageInfo.pageName': pageName,
        'page.pageInfo.primaryCategory': 'Search',
        'page.pageInfo.errorMessage': this.sharedState.error != false ? this.sharedState.error : '',
        'page.pageInfo.pagePath': this.sharedState.pageInfo.pagePath,
        'page.pageInfo.destinationURL': this.sharedState.pageInfo.destinationURL,
        'page.pageInfo.referringURL': this.sharedState.pageInfo.referringURL,
        'page.pageInfo.language': this.sharedState.pageInfo.language,
        'page.pageInfo.geoRegion': this.sharedState.pageInfo.geoRegion,
        'page.pageInfo.systemEnv': this.sharedState.pageInfo.systemEnv,
        'page.pageInfo.effectiveDate': this.sharedState.pageInfo.effectiveDate,
        'page.pageInfo.dayOfWeek': this.sharedState.pageInfo.dayOfWeek,
        'page.pageInfo.timeOfDay': this.sharedState.pageInfo.timeOfDay,
        'page.pageInfo.timeZone': this.sharedState.pageInfo.timezone,
        'page.pageInfo.brand': this.sharedState.brandInfo.slug,
        'page.pageInfo.facilitatorID': this.sharedState.facilitator,
        'page.pageInfo.currencyCode': this.sharedState.pageInfo.currencyCode,
        'page.pageInfo.bvCode': this.sharedState.pageInfo.bvCode,
        'page.pageInfo.isWebview': webViewString,
        'user.userInfo.userID': this.sharedState.userInfo.userId,
        'user.userInfo.loyaltyTier': this.sharedState.userInfo.userLoyaltyTier,
        'search.term': this.sharedState.keywordParam,
        'search.searchCity': citiesString,
        'search.searchState': statesString,
        'search.searchCountry': this.sharedState.searchCountry,
        'search.rateCodeSearchType': promoNames,
        'search.rateCodeSearchID': promoTypes,
        'search.searchDimension': searchLoc,
        'search.searchHotelCode': hotelsString,
        'search.searchHotelBrand': hotelsbrandsString,
        'search.contentType': hiLowContent,
        'search.noSearchResults': searchResults
      };

      var searchEventProperties = {
        'eventInfo.eventName': eventName
      };

      var utagProperties = {};
      if (pageName !== '' && eventName != '') {
        utagProperties = $.extend({}, globalProperties, searchEventProperties);
      } else {
        utagProperties = globalProperties;
      }

      window.utag.link(utagProperties);
    },

    bookingFunnelURL: function bookingFunnelURL(property) {
      var bfp = this.bookingFunnelParams(property);
      var url = '/en/';
      var sourceInfo = "GP";
      url += property.brand.record.slug + '/';
      url += 'reservations?property=' + property.engineid + this.bookingFunnelParams(property);
      var isOffSiteUndefined = typeof property.offsiteurl === 'undefined';
      if (isOffSiteUndefined) {
        return url;
      }
      var isFlaggedAsOffsite = property.useoffsiteurl !== '0' || $.isPlainObject(property.useoffsiteurl);
      var offsiteUrlContainsHttp = property.offsiteurl.toString().indexOf("http") > -1;
      var offsiteUrlIsNotEmpty = !$.isEmptyObject(property.offsiteurl);
      var isValidOffSiteUrl = offsiteUrlContainsHttp && offsiteUrlIsNotEmpty;

      if (!isValidOffSiteUrl || !isFlaggedAsOffsite) {
        return url;
      } else {
        if (!$.isEmptyObject(property.offsiteurl)) {
          property.offbooking = 1;
          var brandUrl = property.offsiteurl.split("/")[0] + "//" + property.offsiteurl.split("/")[2];
          if (brandUrl.indexOf('radissonred') > -1) {
            brandUrl = brandUrl.replace('www', 'book');
          }
          var offsiteArrive = moment(this.sharedState.arrive, this.sharedState.config.dateFormat).format('MM/DD/YYYY');
          var offsiteDepart = moment(this.sharedState.depart, this.sharedState.config.dateFormat).format('MM/DD/YYYY');
          var offSiteURL = property.offsiteurl;
          var urlPart = offSiteURL.replace(/^((http[s]?|ftp):\/)?\/?([^:\/\s]+)\//, "");
          var httpPart = offSiteURL.replace(urlPart, "");
          if (httpPart.indexOf('radissonred') > -1) {
            httpPart = httpPart.replace('www', 'book');
          }
          try {
            sourceInfo = getSourceInfo();
          } catch (err) {
            //
          }
          var offsiteUrlString = httpPart + 'its/secure/receive.do?target=/' + urlPart + '&hotelCode=' + property.engineid + '&checkinDate=' + offsiteArrive + '&checkoutDate=' + offsiteDepart + "&source=" + sourceInfo + "&isEmptyRateSearchForm=false";
          return offsiteUrlString;
        }
      }
    },

    bookingFunnelParams: function bookingFunnelParams(property) {
      var symbol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '&';

      var url = symbol;

      // Dates
      if (property && property.useoffsiteurl == '1') {
        var offsiteArrive = moment(this.sharedState.arrive, this.sharedState.config.dateFormat).format('MM/DD/YYYY');
        var offsiteDepart = moment(this.sharedState.depart, this.sharedState.config.dateFormat).format('MM/DD/YYYY');

        url += 'arrive=' + offsiteArrive;
        url += '&depart=' + offsiteDepart;
      } else {
        url += 'arrive=' + this.sharedState.arrive;
        url += '&depart=' + this.sharedState.depart;
      }

      // Rooms
      if (this.sharedState.rooms) {
        url += '&rooms=' + this.sharedState.rooms;
      } else if (this.sharedState.displayIn == 'points' || this.sharedState.displayIn == 'pointsPlusCash') {
        url += '&rooms=1';
      }
      // Promo
      if (this.sharedState.promocodes.code) {
        var noCode = ["AAA", "GOVT", "SR CIT"];
        if (noCode.indexOf(this.sharedState.promocodes.code) != -1) {
          url += '&rmccode=' + this.sharedState.promocodes.code;
        } else {
          url += '&promo=' + this.sharedState.promocodes.code;
        }
      }

      if (this.sharedState.promocodes.corporateAccountId) {
        url += '&corp=' + this.sharedState.promocodes.corporateAccountId;
      }
      if (this.sharedState.promocodes.travelAgencyId) {
        url += '&iata=' + this.sharedState.promocodes.travelAgencyId;
      }
      if (this.sharedState.promocodes.ecertCode) {
        url += '&ecert=' + this.sharedState.promocodes.ecertCode;
      }
      // Points
      if (property) {
        if (this.sharedState.displayIn == 'points') {
          url += '&ratecode=' + property.points.ratecode;
        }
        if (this.sharedState.displayIn == 'pointsPlusCash' && property['cash-plus-points']) {
          url += '&ratecode=' + property['cash-plus-points']['ratecode'];
        }
      }
      // add facilitatorID
      if (this.getQueryParam('facilitator')) {
        url += '&facilitatorId=' + this.getQueryParam('facilitator');
      } else if (this.getQueryParam('facilitatorId')) {
        url += '&facilitatorId=' + this.getQueryParam('facilitatorId');
      }

      // add source
      if ($("body[data-brand]").length != 0 && $("body[data-brand]").attr('data-brand') != '' && $("body[data-brand]").attr('data-brand') != 'mall') {
        if (window.innerWidth < 737) {
          url += '&source=MW';
        } else {
          url += '&source=RW';
        }
      } else {
        if (window.innerWidth < 737) {
          url += '&source=CC';
        } else {
          url += '&source=GP';
        }
      }

      if (property && property.useoffsiteurl == '1') {
        url = url.replace('arrive', 'startDate');
        url = url.replace('depart', 'endDate');
        url = url.replace('rooms', 'numberRooms');
      }

      return url;
    },
    getQueryParam: function getQueryParam(variableArg) {
      var variable = variableArg.toLowerCase();
      var query = window.location.search.substring(1);
      var vars = query.split("&");
      for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split("=");
        if (pair[0].toLowerCase() == variable) {
          return pair[1];
        }
      }
      return false;
    },

    getQueryVariable: function getQueryVariable() {
      var query = window.location.search.substring(1);
      return query;
    },

    getQueryLength: function getQueryLength() {
      var query = window.location.search.substring(1);
      var vars = query.split("&");
      return vars.length;
    },

    getQueryKeyword: function getQueryKeyword() {
      var query = window.location.search.substring(1);
      var vars = query.split("&");
      var pair = vars[0].split("=");
      var firstVarsVal = pair[0];

      return firstVarsVal;
    },

    parseDate: function parseDate(input) {
      var parts = input.match(/(\d+)/g);
      return new Date(parts[0], parts[1] - 1, parts[2]);
    },
    propertiescomputed: function propertiescomputed(properties) {
      this.sharedState.propertiesitems = this.addPointsData(properties);
    },
    othercarlsonpropertiescomputed: function othercarlsonpropertiescomputed(properties) {
      this.sharedState.othercarlsonproperties = [];
      var self = this;
      this.sharedState.propertiesitems = this.addPointsData(properties);
      var brandprops = this.sharedState.brandpropertiesitems;

      if (brandprops.length > 0) {
        //start by looping through each of the property items
        self.sharedState.propertiesitems.forEach(function (value) {
          var found = false;
          // loop through each of the brand property items
          brandprops.forEach(function (item) {
            //compare ids for matching values
            if (value['@attributes'].id === item['@attributes'].id) {
              found = true;
            }
          });

          if (!found) {
            self.sharedState.othercarlsonproperties.push(value);
          }
        });
      } else {
        this.sharedState.othercarlsonproperties = this.sharedState.propertiesitems;
      }
    },
    amenitiesfilterscomputed: function amenitiesfilterscomputed(amenities) {
      this.sharedState.filtersparams = amenities;
    },
    brandsfilterscomputed: function brandsfilterscomputed(brands) {
      this.sharedState.existingbrandfilters = brands;
    },
    featuredCitiescomputed: function featuredCitiescomputed(featCities) {
      this.featuredCities = featCities;
    },
    travelGuidecomputed: function travelGuidecomputed(travelGuide) {
      this.sharedState.travelGuideitems = travelGuide;
    },
    brandpropertiescomputed: function brandpropertiescomputed(brandproperties) {
      this.sharedState.brandpropertiesitems = this.addPointsData(brandproperties);
    },


    addPointsData: function addPointsData(array) {
      var self = this;
      //For dropdown check. 
      var pointsArray = [];
      var yesPoints;
      var pointsCashArray = [];
      var yesPointsCash;
      array.forEach(function (property) {
        // If promo/ratecode/ecert is in use, set it to minrate for display
        if (property.promo) {
          property.minrate = parseFloat(property.promo.netrate).toFixed(2);
        }
        if (property.rate) {
          property.minrate = parseFloat(property.rate.netrate).toFixed(2);
        }
        if (property.ecert) {
          property.minrate = parseFloat(property.ecert.netrate).toFixed(2);
        }
        // Fixing Points data
        if (property.points) {
          property.points.minpoints = parseInt(property.points.minpoints);
          if (property.points.minpoints > 0) {
            pointsArray.push(1);
          } else {
            pointsArray.push(0);
          }
        } else {
          property.points = {
            minpoints: 0,
            ratecode: ""
          };
          pointsArray.push(0);
        }

        // Fixing Cash + Points data
        if (property['cash-plus-points']) {
          if (property['cash-plus-points'].points > 0) {
            pointsCashArray.push(1);
          } else {
            pointsCashArray.push(0);
          }
        } else {
          property['cash-plus-points'] = {
            points: 0,
            rate: 0,
            ratecode: ""
          };
          pointsCashArray.push(0);
        }

        // Default displayIn
        // If displayIn is in the url, try to use that. Else, use the normal rules
        if (self.getQueryParam('displayIn') != '' || self.getQueryParam('displayIn') != false) {
          if (self.getQueryParam('displayIn') == 'pointsPlusCash' && self.sharedState.hasPointsPlusCash) {
            self.sharedState.displayIn = 'pointsPlusCash';
          } else if (self.getQueryParam('displayIn') == 'points' && self.sharedState.hasPoints) {
            self.sharedState.displayIn = 'points';
          } else {
            self.sharedState.displayIn = 'currency';
          }
        } else {
          // If the user has entered a promo, display points first. If points
          // aren't available, display pointsPlusCash. The code is written
          // backwards from this but it works the same.
          if ((property.promo || property.rate) && self.sharedState.hasPointsPlusCash) {
            self.sharedState.displayIn = 'pointsPlusCash';
          }
          if ((property.promo || property.rate) && self.sharedState.hasPoints) {
            self.sharedState.displayIn = 'points';
          }
        }

        // Fixing empty objects
        if ($.isEmptyObject(property.neighborhood)) {
          property.neighborhood = [];
        }
        if ($.isEmptyObject(property.attraction_airport_distance)) {
          property.attraction_airport_distance = [];
        }
      });

      // Check if any have points 
      // // If true(1) in array then show points in dropdown
      for (var i = 0; i < pointsArray.length; ++i) {
        if (pointsArray[i] !== 0) {
          yesPoints = 1;
          break;
        }
      }

      if (yesPoints) {
        self.sharedState.hasPoints = true;
      } else {
        self.sharedState.hasPoints = false;
        self.sharedState.displayIn = 'currency';
      }

      // Check if any have pointsCash
      // If true(1) in array then show points + Cash in dropdown
      for (var _i = 0; _i < pointsCashArray.length; ++_i) {
        if (pointsCashArray[_i] !== 0) {
          yesPointsCash = 1;
          break;
        }
      }

      if (yesPointsCash) {
        self.sharedState.hasPointsPlusCash = true;
      } else {
        self.sharedState.hasPointsPlusCash = false;
        self.sharedState.displayIn = 'currency';
      }

      return array;
    },

    propertiesName: function propertiesName(name) {
      var w = this.sharedState.deviceWidth;

      if (w == 'mobileLandscape') {
        if (name.length > 50) {
          return true;
        } else {
          return false;
        }
      } else if (w == 'tabletPortrait') {
        if (name.length > 68) {
          return true;
        } else {
          return false;
        }
      } else if (w == 'androidTabletPortrait') {
        if (name.length > 58) {
          return true;
        } else {
          return false;
        }
      } else if (w == 'tabletLandscape') {
        if (name.length > 53) {
          return true;
        } else {
          return false;
        }
      } else if (w == 'desktop') {
        if (name.length > 60) {
          return true;
        } else {
          return false;
        }
      }
    },

    propertyurl: function propertyurl(property) {
      var propertyslug = '/' + this.sharedState.lang + '/' + property.brand.record.slug + '/hotels/' + property.property_url;
      propertyslug += this.bookingFunnelParams(false, '?');

      var offsiteArrive = moment(this.sharedState.arrive, this.sharedState.config.dateFormat).format('MM/DD/YYYY');
      var offsiteDepart = moment(this.sharedState.depart, this.sharedState.config.dateFormat).format('MM/DD/YYYY');

      if ($.isEmptyObject(property.useoffsiteurl)) {
        return propertyslug;
      } else {
        if (property.useoffsiteurl == '1') {
          if (!$.isEmptyObject(property.offsiteurl)) {
            return property.offsiteurl + '?checkinDate=' + offsiteArrive + '&checkoutDate=' + offsiteDepart;
          } else {
            return propertyslug;
          }
        }
      }
    },

    rateCalc: function rateCalc(rate, curr) {
      if (curr == 'USD') {
        return '$' + parseFloat(rate).toFixed(2) + ' ' + curr;
      }if (curr == 'PTS') {
        return this.numberWithCommas(rate) + ' ' + curr;
      } else {
        return parseFloat(rate).toFixed(2) + ' ' + curr;
      }
    },

    priceOverlay: function priceOverlay() {
      this.sharedState.showPrice = true;
      $('body').addClass('no-scroll');
    },

    filterOverlay: function filterOverlay() {
      $('body').addClass('no-scroll');

      $.ajax({
        url: '/ajax/amenity-categories?' + this.sharedState.params,
        type: 'get',
        dataType: 'json',
        async: true,
        success: function (data) {

          if (!data.data) {
            this.error = true;
            return; // no results
          } else {

            var amenitiesCats = [];
            if (data.data.record) amenitiesCats = $.isArray(data.data.record) ? data.data.record : [data.data.record];
            this.amenitiesCatscomputed(amenitiesCats);
          }
        }.bind(this),
        error: function error(err) {
          console.log(err);
        }
      });

      $.ajax({
        url: '/ajax/get-brands',
        type: 'get',
        dataType: 'json',
        async: true,
        success: function (data) {

          if (!data.data) {
            this.error = true;
            return; // no results
          } else {

            var brandsCats = [];
            if (data.data.record) brandsCats = $.isArray(data.data.record) ? data.data.record : [data.data.record];
            this.brandsCatscomputed(brandsCats);
          }
        }.bind(this),
        error: function error(err) {
          console.log(err);
        }
      });

      this.sharedState.showFilters = true;
    },

    amenitiesCatscomputed: function amenitiesCatscomputed(amenitiesCats) {
      var cats = [];
      amenitiesCats.forEach(function (cat) {
        if (!cat.amenities) {
          cats.push(cat);
          return;
        }

        cat.amenities.record = $.isArray(cat.amenities.record) ? cat.amenities.record : [cat.amenities.record];
        cats.push(cat);
      });
      this.sharedState.amenitiescatsitems = cats;
    },
    brandsCatscomputed: function brandsCatscomputed(brandsCats) {
      var brands = [];
      brandsCats.forEach(function (brand) {

        if (brand.code !== 'MALL') {
          brands.push(brand);
          return;
        }
      });

      this.sharedState.brandfiltersparams = brands;
    },


    removeAmenity: function removeAmenity(amenity) {
      var amenitiesitemsIndex = this.sharedState.amenitiesitems.findIndex(function (item) {
        return item['@attributes'].id == amenity['@attributes'].id;
      });
      var amenitiesIdsIndex = this.sharedState.amenitiesIds.findIndex(function (item) {
        return item == amenity['@attributes'].id;
      });

      // is added, need to remove
      this.sharedState.amenitiesIds.splice(amenitiesIdsIndex, 1);
      this.sharedState.amenitiesitems.splice(amenitiesitemsIndex, 1);

      var amenitiesParamsArray = this.sharedState.amenitiesIds;
      var params = this.sharedState.params;
      var splitParams = params.split('&amenities[0]')[0];
      var amenitiesParams = [];

      if (amenitiesParamsArray.length > 0) {
        $.each(amenitiesParamsArray, function (index, id) {
          amenitiesParams += '&amenities[' + index + ']=' + id;
        });
        this.sharedState.params = splitParams + amenitiesParams;
      } else {
        this.sharedState.params = splitParams;
      }
    },

    removeBrand: function removeBrand(brand) {
      var branditemsIndex = this.sharedState.branditems.findIndex(function (item) {
        return item.code == brand.code;
      });
      var branditemsCodesIndex = this.sharedState.branditemsCodes.findIndex(function (item) {
        return item == brand.code;
      });

      // is added, need to remove
      this.sharedState.branditemsCodes.splice(branditemsCodesIndex, 1);
      this.sharedState.branditems.splice(branditemsIndex, 1);

      var brandsParamsArray = this.sharedState.branditemsCodes;
      var params = this.sharedState.brandsparams;
      var splitParams = params.split('&brands[0]')[0];
      var brandsParams = [];

      if (brandsParamsArray.length > 0) {
        $.each(brandsParamsArray, function (index, code) {
          brandsParams += '&brands[' + index + ']=' + code;
        });
        this.sharedState.brandsparams = splitParams + brandsParams;
      } else {
        this.sharedState.brandsparams = splitParams;
      }
    },

    promoOpen: function promoOpen() {
      if (this.sharedState.promocodes.isOpen == false) {
        this.sharedState.showResults = true;
        this.sharedState.promocodes.isOpen = true;
        $('.show-results-panel').addClass('promo-active');
      } else {
        this.sharedState.showResults = false;
        this.sharedState.promocodes.isOpen = false;
        $('.show-results-panel').removeClass('promo-active');
      }
    },
    // This is for search results promo modal
    promocodesOpen: function promocodesOpen() {
      this.showPromo = true;
      this.applyOverlay();

      var cities = [];
      var states = [];
      var hotels = [];
      var hotelsbrands = [];
      var hiLowContent = 0;

      if (this.sharedState.propertiesitems.length > 0) {
        this.sharedState.propertiesitems.forEach(function (element) {
          hotels.push(element.engineid);

          var brandsindex = hotelsbrands.indexOf(element.brand.record.code);
          if (brandsindex === -1) {
            hotelsbrands.push(element.brand.record.code);
          }

          var citiesindex = cities.indexOf(element.city);
          if (citiesindex === -1) {
            cities.push(element.city);
          }

          if (!$.isEmptyObject(element.state)) {
            var statesindex = states.indexOf(element.state);
            if (statesindex === -1) {
              states.push(element.state);
            }
          }
        });
      }

      var hotelsString = hotels.join('|');
      var hotelsbrandsString = hotelsbrands.join('|');
      var citiesString = cities.join('|');
      var statesString = states.join('|');

      if (this.sharedState.travelGuideitems.length > 0) {
        if (this.sharedState.travelGuideitems.attraction.length > 0) {
          hiLowContent = '1';
        } else {
          hiLowContent = '0';
        }
      } else {
        hiLowContent = '0';
      }

      var promocode = [];
      var promocodetype = [];
      if (store.promocodes.codes.length > 0) {
        store.promocodes.codes.forEach(function (promo) {
          promocode.push(promo.code);
          promocodetype.push(promo.name);
        });
      }

      var promoNames = promocode.join('|');
      var promoTypes = promocodetype.join('|');

      var searchLoc = '';
      if (this.sharedState.searchType == 'state' || this.sharedState.searchType == 'city' || this.sharedState.searchType == 'country') {
        searchLoc = 'Location';
      } else if (this.sharedState.searchType == 'attraction') {
        searchLoc = 'Attraction';
      } else if (this.sharedState.searchType == 'airport') {
        searchLoc = 'Airport';
      }

      var searchResults = 0;
      if (store.brand == true) {
        if (store.brandpropertiesitems.length < 1 && store.othercarlsonproperties.length < 1 && store.propertiesitems.length < 1) {
          searchResults = 0;
        }
      } else {
        if (store.propertiesitems.length < 1) {
          searchResults = 0;
        }
      }

      var webViewString;
      if (iswebview(navigator.userAgent)) {
        webViewString = 'Yes|' + this.getMobileOperatingSystem();
      } else {
        webViewString = 'No';
      }

      var facilitator = '';
      if (this.getQueryParam("facilitator") || this.getQueryParam("facilitatorId") || this.getQueryParam("faciliatatorID") || this.getQueryParam("facilitatorid") || this.getQueryParam("facilitatorID")) {
        facilitator = this.getQueryParam("facilitator") || this.getQueryParam("facilitatorId") || this.getQueryParam("faciliatatorID") || this.getQueryParam("facilitatorid") || this.getQueryParam("facilitatorID");
      }
      this.sharedState.facilitator = facilitator;
      var self = this;
      window.utag.view({
        'page.pageInfo.pageName': 'rateCodeSearchRefineOverlay',
        'page.pageInfo.pagePath': self.sharedState.pageInfo.pagePath,
        'page.pageInfo.destinationURL': self.sharedState.pageInfo.destinationURL,
        'page.pageInfo.referringURL': self.sharedState.pageInfo.referringURL,
        'page.pageInfo.language': self.sharedState.pageInfo.language,
        'page.pageInfo.geoRegion': self.sharedState.pageInfo.geoRegion,
        'page.pageInfo.systemEnv': self.sharedState.pageInfo.systemEnv,
        'page.pageInfo.effectiveDate': self.sharedState.pageInfo.effectiveDate,
        'page.pageInfo.primaryCategory': 'Search',
        'page.pageInfo.dayOfWeek': self.sharedState.pageInfo.dayOfWeek,
        'page.pageInfo.timeOfDay': self.sharedState.pageInfo.timeOfDay,
        'page.pageInfo.timeZone': self.sharedState.pageInfo.timezone,
        'page.pageInfo.brand': self.sharedState.brandInfo.slug,
        'page.pageInfo.facilitatorID': self.sharedState.facilitator,
        'page.pageInfo.currencyCode': self.sharedState.pageInfo.currencyCode,
        'page.pageInfo.bvCode': self.sharedState.pageInfo.bvCode,
        'page.pageInfo.isWebview': webViewString,
        'user.userInfo.userID': self.sharedState.userInfo.userId,
        'user.userInfo.loyaltyTier': self.sharedState.userInfo.userLoyaltyTier,
        'search.term': self.sharedState.keywordParam,
        'search.searchCity': citiesString,
        'search.searchState': statesString,
        'search.searchCountry': self.sharedState.searchCountry,
        'search.rateCodeSearchType': promoNames,
        'search.rateCodeSearchID': promoTypes,
        'search.searchDimension': searchLoc,
        'search.searchHotelCode': hotelsString,
        'search.searchHotelBrand': hotelsbrandsString,
        'search.contentType': hiLowContent,
        'search.noSearchResults': searchResults
      });
    },
    promocodesClose: function promocodesClose() {
      var self = this;
      self.showPromo = false;
      self.applyOverlay();

      this.removeParam(this.paramIndex('ecert'));
      this.removeParam(this.paramIndex('corp'));
      this.removeParam(this.paramIndex('iata'));
      this.removeParam(this.paramIndex('promo'));
      this.removeParam(this.paramIndex('rmccode'));

      // Update or add promo
      self.sharedState.promocodes.codes.forEach(function (promo) {
        if (promo.value == 'ecertCode') {
          self.updateParam('ecert', promo.code);
        } else if (promo.value == 'corporateAccountId') {
          self.updateParam('corp', promo.code);
        } else if (promo.value == 'travelAgencyId') {
          self.updateParam('iata', promo.code);
        } else {
          var noCode = ["AAA", "GOVT", "SR CIT"];
          if (noCode.indexOf(promo.value) != -1) {
            self.updateParam('rmccode', promo.code);
          } else {
            self.updateParam('promo', promo.code);
          }
        }

        //Update hasPoints when promo is applied
        self.sharedState.propertiesitems.forEach(function (property) {
          // Fixing Points data
          if (property.points.minpoints) {
            property.points.minpoints = parseInt(property.points.minpoints);
            if (property.points.minpoints > 0) {
              self.sharedState.hasPoints = true;
            } else {
              self.sharedState.hasPoints = false;
              self.sharedState.displayIn = 'currency';
            }
          } else {
            property.points = {
              minpoints: 0,
              ratecode: 0
            };
            self.sharedState.hasPoints = false;
            self.sharedState.displayIn = 'currency';
          }

          // Fixing Cash + Points data
          if (property['cash-plus-points']) {
            if (property['cash-plus-points'].points > 0) {
              self.sharedState.hasPointsPlusCash = true;
            } else {
              self.sharedState.hasPoints = false;
              self.sharedState.displayIn = 'currency';
            }
          } else {
            property['cash-plus-points'] = {
              points: 0,
              rate: 0,
              ratecode: ""
            };
            self.sharedState.hasPointsPlusCash = false;
            self.sharedState.displayIn = 'currency';
          }
        });
      });
    },
    paramIndex: function paramIndex(name) {
      var splitParams = this.sharedState.params.split('&');
      for (var i = 0; i < splitParams.length; i++) {
        if (splitParams[i].indexOf(name) !== -1) {
          return i;
        }
      }
      return -1;
    },
    removeParam: function removeParam(index) {
      if (index == -1) {
        return;
      }

      var splitParams = this.sharedState.params.split('&');
      splitParams.splice(index, 1);
      this.sharedState.params = splitParams.join('&');
    },
    updateParam: function updateParam(name, value) {
      var splitParams = this.sharedState.params.split('&');
      var index = this.paramIndex(name);
      if (index !== -1) {
        splitParams[index] = name + '=' + value;
      } else {
        splitParams.push(name + '=' + value);
      }
      this.sharedState.params = splitParams.join('&');
    },
    applyOverlay: function applyOverlay() {
      if (Foundation.MediaQuery.atLeast('large')) {
        if (this.showPromo == true) {
          $('body').append('<div class="modal-overlay"></div>');
        } else {
          $('.modal-overlay').remove();
        }
      } else {
        $('.modal-overlay').remove();
      }
    },

    ajaxUrl: function ajaxUrl(url, params) {
      var recursiveDecoded = decodeURIComponent($.param(params));
      console.log(window.location.origin + url + '?' + recursiveDecoded);
    },
    numberWithCommas: function numberWithCommas(x) {
      var parts = x.toString().split(".");
      parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      return parts.join(".");
    },


    saveParams: function saveParams() {
      var self = this;

      // Get number of rooms
      var localBook = JSON.parse(localStorage.getItem('bookingData'));

      // if localstorage exists, set rooms. Else, initialize localBook
      if (localBook) {
        self.sharedState.rooms = localBook.details.number_of_rooms;
      } else {
        localBook = {
          details: {}
        };
      }

      // Add search params to localStorage
      localBook.details.search = {
        slug: self.sharedState.brandInfo.slug,
        params: encodeURIComponent(self.sharedState.params)
      };

      localStorage.setItem('bookingData', JSON.stringify(localBook));
    },

    getMobileOperatingSystem: function getMobileOperatingSystem() {
      var userAgent = navigator.userAgent || navigator.vendor || window.opera;
      if (/windows phone|IEMobile/i.test(userAgent)) {
        return 'Windows';
      } else if (/Android/i.test(userAgent)) {
        return 'Android';
      } else if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
        return 'iOS';
      } else if (/Opera Mini/i.test(userAgent)) {
        return 'Opera';
      } else if (/BlackBerry/i.test(userAgent)) {
        return 'BlackBerry';
      } else {
        return 'Unknown';
      }
    }
  }
});
module.exports = searchResultsPage;

/***/ }),

/***/ 374:
/***/ (function(module, exports) {

module.exports = "<section id=\"searchresults\" class=\"searchresults\">\n  <div class=\"searchresults-wrapper\">\n    <button class=\"button secondary rates-cta-top hide-for-large promo-code-trigger\" @click=\"promocodesOpen\">\n      <span v-if=\"sharedState.promocodes.codes.length\">{{ 'Special Rates' | translate('special-rates') }} <span class=\"promo-code-count\">{{ sharedState.promocodes.codes.length }}</span></span>\n      <span v-else>{{ 'Add Special Rates' | translate('add-special-rates') }}</span>\n    </button>\n    <div class=\"travel-guide row\" v-if=\"!sharedState.travelGuideitems.length\">\n      <div class=\"travel-guide-loc column small-12 medium-3\">\n        <h1 v-if=\"computedHeader !==''\">{{ computedHeader }} </h1>\n        <h3 v-if=\"computedSubHeader !==''\">{{ computedSubHeader }}</h3>\n      </div>\n      <div class=\"travel-guide-desc column small-12 medium-7\">\n        <div class=\"popular-cities\" v-if=\"(sharedState.searchType == 'state' || sharedState.searchType == 'country') && featuredCities.length\">\n          <p v-if=\"sharedState.brand\">{{ 'This search returned ${brandnumresults} results. Try narrowing your search down with these popular locations in ${searchloc} or use the map view below to view more.' | translate('brand-no-results-mssg', { brandnumresults: sharedState.othercarlsonproperties.length + sharedState.brandpropertiesitems.length, searchloc: locationSearch }) }}</p>\n          <p v-else>{{ 'This search returned ${numresults} results. Try narrowing your search down with these popular locations in ${searchloc} or use the map view below to view more.' | translate('mall-no-results-mssg', { numresults: sharedState.propertiesitems.length, searchloc: locationSearch }) }}</p>\n          <ul class=\"popular-cities-list\">\n            <li v-for=\"featCity in featuredCities\"><a :href=\"featCity.url+bookingFunnelParams()\">{{ featCity.city }}</a></li>\n          </ul>\n          <a :href=\"'/search-map?'+sharedState.params\" class=\"view-all\">{{ 'View All' | translate('view-all') }}</a>\n        </div>\n\n        <div class=\"hide-for-medium\">\n          <h4>{{ 'Traveler Rating' | translate('traveler-rating') }}</h4>\n          <div class=\"tripadvisor-rating\">{{ 'Powered by' | translate('powered-by') }} <img src=\"/templates/main/images/tripadvisor.png\" alt=\"tripadvisor\" /></div>\n        </div>\n      </div>\n      <div class=\"travel-guide-rating column small-12 medium-2 show-for-medium\">\n        <h4>{{ 'Traveler Rating' | translate('traveler-rating') }}</h4>\n        <div class=\"tripadvisor-rating\">{{ 'Powered by' | translate('powered-by') }} <img src=\"/templates/main/images/tripadvisor.png\" alt=\"tripadvisor\" /></div>\n      </div>\n    </div>\n\n    <div class=\"travel-guide row\" v-for=\"travelGuide in sharedState.travelGuideitems\" v-if=\"sharedState.travelGuideitems.length\">\n      <div v-if=\"travelGuide.attraction.length\" class=\"row\">\n        <div class=\"travel-guide-intro small-12 medium-6 column\">\n          <h1>{{ computedHeader }} </h1>\n          <h3>{{ computedSubHeader }}</h3>\n\n          <div v-if=\"travelGuide.shortdescription.length\" v-html=\"travelGuide.shortdescription\"></div>\n          <h4>{{ 'Traveler Rating' | translate('traveler-rating') }}</h4>\n          <div class=\"tripadvisor-rating\">{{ 'Powered by' | translate('powered-by') }} <img src=\"/templates/main/images/tripadvisor.png\" alt=\"tripadvisor\" /></div>\n          <div class=\"popular-cities\" v-if=\"(sharedState.searchType == 'state' || sharedState.searchType == 'country') && featuredCities.length\">\n            <p v-if=\"sharedState.brand\">{{ 'This search returned ${brandnumresults} results. Try narrowing your search down with these popular locations in ${searchloc} or use the map view below to view more.' | translate('brand-no-results-mssg', { brandnumresults: sharedState.othercarlsonproperties.length + sharedState.brandpropertiesitems.length, searchloc: locationSearch }) }}</p>\n            <p v-else>{{ 'This search returned ${numresults} results. Try narrowing your search down with these popular locations in ${searchloc} or use the map view below to view more.' | translate('mall-no-results-mssg', { numresults: sharedState.propertiesitems.length, searchloc: locationSearch }) }}</p>\n            <ul class=\"popular-cities-list\">\n              <li v-for=\"featCity in featuredCities\"><a :href=\"featCity.url+bookingFunnelParams\">{{ featCity.city }}</a></li>\n            </ul>\n            <a :href=\"'/search-map?'+sharedState.params\" class=\"view-all\">{{ 'View All' | translate('view-all') }}</a>\n          </div>\n\n          <a v-bind:href=\"travelGuide.slug\" class=\"button primary\">{{ 'View All' | translate('view-all') }}</a>\n        </div>\n        <div v-if=\"sharedState.brand\" class=\"travel-guide-image small-12 medium-6 column\">\n          <div class=\"travelguide-img-wrapper\">\n            <img :src=\"travelGuide.mediafile\" v-bind:alt=\"sharedState.travelGuideitems.attraction\" class=\"travel-image\" />\n            <div class=\"caption\">{{ travelGuide.attraction }}</div>\n          </div>\n        </div>\n        <div v-else class=\"travel-guide-image show-for-medium medium-6 column\">\n          <img :src=\"travelGuide.mediafile\" v-bind:alt=\"sharedState.travelGuideitems.attraction\" class=\"travel-image\" />\n          <div class=\"caption\">{{ travelGuide.attraction }}</div>\n        </div>\n      </div>\n      <div v-else class=\"row\">\n        <div class=\"travel-guide-loc column small-12 medium-3\">\n          <h1>{{ computedHeader }} </h1>\n          <h3>{{ computedSubHeader }}</h3>\n        </div>\n        <div class=\"travel-guide-desc column small-12 medium-7\">\n          <div v-if=\"travelGuide.shortdescription.length\" v-html=\"travelGuide.shortdescription\"></div>\n          <div class=\"popular-cities\" v-if=\"(sharedState.searchType == 'state' || sharedState.searchType == 'country') && featuredCities.length\">\n            <p v-if=\"sharedState.brand\">{{ 'This search returned ${brandnumresults} results. Try narrowing your search down with these popular locations in ${searchloc} or use the map view below to view more.' | translate('brand-no-results-mssg', { brandnumresults: sharedState.othercarlsonproperties.length + sharedState.brandpropertiesitems.length, searchloc: locationSearch }) }}</p>\n            <p v-else>{{ 'This search returned ${numresults} results. Try narrowing your search down with these popular locations in ${searchloc} or use the map view below to view more.' | translate('mall-no-results-mssg', { numresults: sharedState.propertiesitems.length, searchloc: locationSearch }) }}</p>\n            <ul class=\"popular-cities-list\">\n              <li v-for=\"featCity in featuredCities\"><a :href=\"featCity.url+bookingFunnelParams\">{{ featCity.city }}</a></li>\n            </ul>\n            <a :href=\"'/search-map?'+sharedState.params\" class=\"view-all\">{{ 'View All' | translate('view-all') }}</a>\n          </div>\n\n          <div class=\"hide-for-medium\">\n            <h4>{{ 'Traveler Rating' | translate('traveler-rating') }}</h4>\n            <div class=\"tripadvisor-rating\">{{ 'Powered by' | translate('powered-by') }} <img src=\"/templates/main/images/tripadvisor.png\" alt=\"tripadvisor\" /></div>\n          </div>\n          <a v-bind:href=\"travelGuide.slug\" class=\"button primary\">{{ 'View Travel Guide' | translate('view-travel-guide') }}</a>\n        </div>\n        <div class=\"travel-guide-rating column small-12 medium-2 show-for-medium\">\n          <h4>{{ 'Traveler Rating' | translate('traveler-rating') }}</h4>\n          <div class=\"tripadvisor-rating\">{{ 'Powered by' | translate('powered-by') }} <img src=\"/templates/main/images/tripadvisor.png\" alt=\"tripadvisor\" /></div>\n        </div>\n      </div>\n      <hr/>\n    </div>\n    <div class=\"filters-top\">\n      <div class=\"results-info row\">\n        <div v-if=\"loading == false\" class=\"results-filters small-12 small-order-1 medium-order-2 large-8 column\">\n          <div class=\"filter-buttons row hide-for-medium\">\n            <div class=\"columns small-4\" @click=\"priceOverlay\" v-if=\"sharedState.hasPoints || sharedState.hasPointsPlusCash\"><i class=\"fa\">$</i>  <span>{{ 'Price' | translate('price') }}</span>\n            </div>\n            <div class=\"columns small-4\" @click=\"filterOverlay\"><svg class=\"svg icon svg-filter\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"13\" viewBox=\"0 0 26 23\"><path class=\"fill\" d=\"M26 7.5c0-1.9-1.3-3.4-3-3.9V0h-2v3.6c-1.7.4-3 2-3 3.9s1.3 3.4 3 3.9V23h2V11.4c1.7-.5 3-2 3-3.9zm-4 2c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM17 15.5c0-1.9-1.3-3.4-3-3.9V0h-2v11.6c-1.7.4-3 2-3 3.9s1.3 3.4 3 3.9V23h2v-3.6c1.7-.5 3-2 3-3.9zm-4 2c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM8 7.5c0-1.9-1.3-3.4-3-3.9V0H3v3.6c-1.7.4-3 2-3 3.9s1.3 3.4 3 3.9V23h2V11.4c1.7-.5 3-2 3-3.9zm-4 2c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\"/></svg> <span>{{ 'Refine' | translate('refine') }}</span></div>\n            <div class=\"columns small-4 map-view\" v-if=\"sharedState.brand\"><a v-bind:href=\"'/'+sharedState.brandInfo.slug+'/search-map?'+sharedState.params+'&displayIn='+sharedState.displayIn\"><svg class=\"svg icon svg-map\" width=\"25\" height=\"32\" viewBox=\"0 0 25 32\" xmlns=\"http://www.w3.org/2000/svg\"><g stroke=\"#000000\" stroke-width=\"2\" fill=\"none\" fill-rule=\"evenodd\"><path d=\"M12.089 30.494a95.676 95.676 0 0 1-1.124-1.31 95.852 95.852 0 0 1-4.113-5.225 60.997 60.997 0 0 1-2.894-4.311C2.05 16.498 1 13.886 1 12.088 1 5.966 5.965 1 12.089 1c6.124 0 11.089 4.965 11.089 11.089 0 1.797-1.05 4.408-2.958 7.559a60.997 60.997 0 0 1-2.895 4.31 95.852 95.852 0 0 1-4.112 5.225c-.4.476-.777.914-1.124 1.311z\"/><circle cx=\"12.089\" cy=\"12.089\" r=\"3.978\"/></g></svg> <span>{{ 'Map View' | translate('map-view') }}</span></a></div>\n            <div class=\"small-4 columns map-view\" v-else><a v-bind:href=\"'/search-map?'+sharedState.params+'&displayIn='+sharedState.displayIn\"><svg class=\"svg icon svg-map\" width=\"25\" height=\"32\" viewBox=\"0 0 25 32\" xmlns=\"http://www.w3.org/2000/svg\"><g stroke=\"#000000\" stroke-width=\"2\" fill=\"none\" fill-rule=\"evenodd\"><path d=\"M12.089 30.494a95.676 95.676 0 0 1-1.124-1.31 95.852 95.852 0 0 1-4.113-5.225 60.997 60.997 0 0 1-2.894-4.311C2.05 16.498 1 13.886 1 12.088 1 5.966 5.965 1 12.089 1c6.124 0 11.089 4.965 11.089 11.089 0 1.797-1.05 4.408-2.958 7.559a60.997 60.997 0 0 1-2.895 4.31 95.852 95.852 0 0 1-4.112 5.225c-.4.476-.777.914-1.124 1.311z\"/><circle cx=\"12.089\" cy=\"12.089\" r=\"3.978\"/></g></svg> <span>{{ 'Map View' | translate('map-view') }}</span></a></div>\n          </div>\n          <div class=\"show-for-medium\">\n            <template v-if=\"sharedState.hasPoints || sharedState.hasPointsPlusCash\">\n              <label for=\"sr-payment\" class=\"show-for-medium label\"><span>{{ 'Display In' | translate('display-in') }}:</span></label>\n              <form class=\"show-for-medium\">\n                <div class=\"dropdown\" >\n                  <select id=\"sr-payment\" v-model=\"sharedState.displayIn\">\n                    <option value=\"currency\">{{ 'Currency' | translate('currency') }}</option>\n                    <option v-if=\"sharedState.hasPoints\" value=\"points\">{{ 'Points' | translate('points') }}</option>\n                    <option v-if=\"sharedState.hasPointsPlusCash\" value=\"pointsPlusCash\">{{ 'Points + Cash' | translate('points-cash') }}</option>\n                  </select>\n                </div>\n              </form>\n            </template>\n\n            <button type=\"submit\" class=\"button primary\" @click=\"filterOverlay\"><svg class=\"svg icon svg-filter\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"13\" viewBox=\"0 0 26 23\"><path class=\"fill\" d=\"M26 7.5c0-1.9-1.3-3.4-3-3.9V0h-2v3.6c-1.7.4-3 2-3 3.9s1.3 3.4 3 3.9V23h2V11.4c1.7-.5 3-2 3-3.9zm-4 2c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM17 15.5c0-1.9-1.3-3.4-3-3.9V0h-2v11.6c-1.7.4-3 2-3 3.9s1.3 3.4 3 3.9V23h2v-3.6c1.7-.5 3-2 3-3.9zm-4 2c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM8 7.5c0-1.9-1.3-3.4-3-3.9V0H3v3.6c-1.7.4-3 2-3 3.9s1.3 3.4 3 3.9V23h2V11.4c1.7-.5 3-2 3-3.9zm-4 2c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\"/></svg> <span>{{ 'Refine' | translate('refine') }}</span></button>\n            <a v-if=\"sharedState.brand\" class=\"button secondary\" v-bind:href=\"'/'+sharedState.lang+'/'+sharedState.brandInfo.slug+'/search-map?'+sharedState.params+'&displayIn='+sharedState.displayIn\"><svg class=\"svg icon svg-map\" width=\"25\" height=\"32\" viewBox=\"0 0 25 32\" xmlns=\"http://www.w3.org/2000/svg\"><g stroke=\"#000000\" stroke-width=\"2\" fill=\"none\" fill-rule=\"evenodd\"><path d=\"M12.089 30.494a95.676 95.676 0 0 1-1.124-1.31 95.852 95.852 0 0 1-4.113-5.225 60.997 60.997 0 0 1-2.894-4.311C2.05 16.498 1 13.886 1 12.088 1 5.966 5.965 1 12.089 1c6.124 0 11.089 4.965 11.089 11.089 0 1.797-1.05 4.408-2.958 7.559a60.997 60.997 0 0 1-2.895 4.31 95.852 95.852 0 0 1-4.112 5.225c-.4.476-.777.914-1.124 1.311z\"/><circle cx=\"12.089\" cy=\"12.089\" r=\"3.978\"/></g></svg> <span>{{ 'Map View' | translate('map-view') }}</span></a>\n            <a v-else class=\"button secondary\" v-bind:href=\"'/'+sharedState.lang+'/search-map?'+sharedState.params+'&displayIn='+sharedState.displayIn\"><svg class=\"svg icon svg-map\" width=\"25\" height=\"32\" viewBox=\"0 0 25 32\" xmlns=\"http://www.w3.org/2000/svg\"><g stroke=\"#000000\" stroke-width=\"2\" fill=\"none\" fill-rule=\"evenodd\"><path d=\"M12.089 30.494a95.676 95.676 0 0 1-1.124-1.31 95.852 95.852 0 0 1-4.113-5.225 60.997 60.997 0 0 1-2.894-4.311C2.05 16.498 1 13.886 1 12.088 1 5.966 5.965 1 12.089 1c6.124 0 11.089 4.965 11.089 11.089 0 1.797-1.05 4.408-2.958 7.559a60.997 60.997 0 0 1-2.895 4.31 95.852 95.852 0 0 1-4.112 5.225c-.4.476-.777.914-1.124 1.311z\"/><circle cx=\"12.089\" cy=\"12.089\" r=\"3.978\"/></g></svg> <span>{{ 'Map View' | translate('map-view') }}</span></a>\n            <button class=\"button secondary promo-code-trigger\" @click=\"promocodesOpen\">\n              <span v-if=\"sharedState.promocodes.codes.length\">{{ 'Special Rates' | translate('special-rates') }} <span class=\"promo-code-count\">{{ sharedState.promocodes.codes.length }}</span></span>\n              <span v-else>{{ 'Add Special Rates' | translate('add-special-rates') }}</span>\n            </button>\n          </div>\n        </div>\n\n        <div class=\"results-number small-12 small-order-2 medium-order-1 large-4 column\">\n          <div v-if=\"sharedState.brand\">\n            <div v-if=\"sharedState.searchType !== 'geolocation'\">\n              <h2 v-if=\"sharedState.brandpropertiesitems.length != 1\">\n                <template v-if=\" nearin == 'near' \">\n                  {{ '${brandpropresults} ${brandname} Hotels near \"${searchloc}\"' | translate('brand-prop-results-mssg-near', { brandpropresults: sharedState.brandpropertiesitems.length, brandname: sharedState.brandInfo.name, searchloc: locationSearch }) }}\n                </template>\n                <template v-else>\n                  {{ '${brandpropresults} ${brandname} Hotels in \"${searchloc}\"' | translate('brand-prop-results-mssg-in', { brandpropresults: sharedState.brandpropertiesitems.length, brandname: sharedState.brandInfo.name, searchloc: locationSearch }) }}\n                </template>\n              </h2>\n              <h2 v-else>\n                <template v-if=\" nearin == 'near' \">\n                  {{ '${brandpropresults} ${brandname} Hotel near \"${searchloc}\"' | translate('brand-prop-single-results-mssg-near', { brandpropresults: sharedState.brandpropertiesitems.length, brandname: sharedState.brandInfo.name, searchloc: locationSearch }) }}\n                </template>\n                <template v-else>\n                  {{ '${brandpropresults} ${brandname} Hotel in \"${searchloc}\"' | translate('brand-prop-single-results-mssg-near', { brandpropresults: sharedState.brandpropertiesitems.length, brandname: sharedState.brandInfo.name, searchloc: locationSearch }) }}\n                </template>\n              </h2>\n            </div>\n            <div v-else>\n              <h2 v-if=\"sharedState.brandpropertiesitems.length != 1\">{{ '${brandpropresults} ${brandname} Hotels ${searchloc}' | translate('brand-prop-results-mssg', { brandpropresults: sharedState.brandpropertiesitems.length, brandname: sharedState.brandInfo.name, searchloc: locationSearch }) }}</h2>\n              <h2 v-else>{{ '${brandpropresults} ${brandname} Hotel ${searchloc}' | translate('brand-prop-results-mssg-hotel', { brandpropresults: sharedState.brandpropertiesitems.length, brandname: sharedState.brandInfo.name, searchloc: locationSearch }) }}</h2>\n            </div>\n          </div>\n          <div v-else>\n            <div v-if=\"sharedState.searchType !== 'geolocation'\">\n              <h2 v-if=\"sharedState.propertiesitems.length != 1\">\n                <template v-if=\" nearin == 'near' \">\n                  {{ '${propresults} Hotels near \"${searchloc}\"' | translate('prop-results-mssg-near', { propresults: sharedState.propertiesitems.length, searchloc: locationSearch }) }}\n                </template>\n                <template v-else>\n                  {{ '${propresults} Hotels in \"${searchloc}\"' | translate('prop-results-mssg-in', { propresults: sharedState.propertiesitems.length, searchloc: locationSearch }) }}\n                </template>\n              </h2>\n              <h2 v-else>\n                <template v-if=\" nearin == 'near' \">\n                  {{ '${propresults} Hotel near \"${searchloc}\"' | translate('prop-results-single-mssg-near', { propresults: sharedState.propertiesitems.length, searchloc: locationSearch }) }}\n                </template>\n                <template v-else>\n                  {{ '${propresults} Hotel in \"${searchloc}\"' | translate('prop-results-single-mssg-in', { propresults: sharedState.propertiesitems.length, searchloc: locationSearch }) }}\n                </template>\n              </h2>\n            </div>\n            <div v-else>\n              <h2 v-if=\"sharedState.propertiesitems.length != 1\">{{ '${propresults} Hotels ${searchloc}' | translate('prop-results-mssg', { propresults: sharedState.propertiesitems.length, searchloc: locationSearch }) }}</h2>\n              <h2 v-else>{{ '${propresults} Hotel ${searchloc}' | translate('prop-results-hotel-mssg', { propresults: sharedState.propertiesitems.length, searchloc: locationSearch }) }}</h2>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row applied-filters show-for-large\" v-if=\"sharedState.amenitiesitems.length || sharedState.branditems.length\">\n      <span>{{ 'Filtered By' | translate('filtered-by') }}:</span>\n      <button v-for=\"item in sharedState.amenitiesitems\" class=\"button secondary\" v-bind:data-id=\"item.id\" @click=\"removeAmenity(item)\">\n          {{ item.name }}\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"7\" height=\"7\" viewBox=\"0 0 68 68\" class=\"svg svg-close\"><path class=\"fill\" fill=\"#000000\" d=\"M43.9 34l23.334-23.335-9.9-9.9L34 24.1 10.666.766l-9.9 9.9L24.1 34 .767 57.334l9.9 9.9L34 43.9l23.335 23.334 9.9-9.9L43.9 34z\"/></svg>\n      </button>\n\n      <button v-for=\"item in sharedState.branditems\" class=\"button secondary\" v-bind:data-code=\"item.code\" @click=\"removeBrand(item)\">\n          {{ item.name }}\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"7\" height=\"7\" viewBox=\"0 0 68 68\" class=\"svg svg-close\"><path class=\"fill\" fill=\"#000000\" d=\"M43.9 34l23.334-23.335-9.9-9.9L34 24.1 10.666.766l-9.9 9.9L24.1 34 .767 57.334l9.9 9.9L34 43.9l23.335 23.334 9.9-9.9L43.9 34z\"/></svg>\n      </button>\n    </div>\n\n    <div class=\"results row\" v-if=\"sharedState.brand\">\n      <div class=\"results-cards brand-results-cards\">\n        <loading v-show=\"loading\"></loading>\n\n        <div v-if=\"sharedState.brand\" class=\"flexgrid\">\n          <template v-for=\"brandpropertiesitem in sharedState.brandpropertiesitems\">\n            <div class=\"card-wrapper\">\n              <article class=\"card-v2 resv-card\" itemtype=\"http://schema.org/Place\" data-card-type=\"Offer Card\">\n                <a v-bind:href=\"propertyurl(brandpropertiesitem)\" tabindex=\"0\" class=\"flex-link\" :target=\"brandpropertiesitem.useoffsiteurl == '1' ? '_blank' : '_self'\">\n                  <figure class=\"card-img-cover\">\n                    <responsiveimage v-if=\"brandpropertiesitem.property_image['@attributes']\" :source-id=\"brandpropertiesitem.property_image['@attributes'].id\" :source-image=\"brandpropertiesitem.property_image.record\" :alttext=\"brandpropertiesitem.name\" picture=\"searchresults/card/brandpropertiesitem.property_image\"></responsiveimage>\n                    \n                    <div v-else class=\"no-image\" alt=\"title\" style=\"width:100%; height:100%; background: linear-gradient(to top, #000, #454545, #696969);\" data-picture=\"searchresults/card/brandpropertiesitem.no-img\" />\n\n                    <figcaption v-if=\"sharedState.searchType == 'state' || sharedState.searchType == 'country'\">\n                      <span v-if=\"brandpropertiesitem.neighborhood.length\" class=\"expiration\"><i class=\"fa fa-map-marker\"></i> {{ brandpropertiesitem.neighborhood }}</span>\n                    </figcaption>\n\n                    <figcaption v-if=\"sharedState.searchType == 'airport' || sharedState.searchType == 'attraction'\">\n                      <span v-if=\"brandpropertiesitem.attraction_airport_distance.length\" class=\"expiration\"><i class=\"fa fa-map-marker\"></i> {{ '${allattractionairportdistance} mi from ${searchcity}' | translate('allairportattractiondistancemssg', { allattractionairportdistance: brandpropertiesitem.attraction_airport_distance, searchcity: sharedState.searchCity }) }}</span>\n                    </figcaption>\n\n                    <figcaption v-if=\"sharedState.searchType == 'city'\">\n                      <span v-if=\"brandpropertiesitem.distance != 0\" class=\"expiration\"><i class=\"fa fa-map-marker\"></i> {{ '${allpropdistance} mi from Downtown' | translate('alldowntowndistancemssg', { allpropdistance: brandpropertiesitem.distance }) }}</span>\n                      <span v-else class=\"expiration\"><i class=\"fa fa-map-marker\"></i> {{ brandpropertiesitem.city }}</span>\n                    </figcaption>\n                    \n                    <div class=\"shadow\"></div>\n\n                    <div class=\"card-alert recent-stay\" v-if=\"brandpropertiesitem.recent_stay_date\">{{ 'You stayed here in' | translate('you-stayed-here-in') }} {{ stayDateFormat(brandpropertiesitem.recent_stay_date) }}</div>\n                  </figure>\n                  <header class=\"card-header\">\n                    <img :src=\"brandpropertiesitem.brand.record.mediafile\" v-bind:alt=\"brandpropertiesitem.name\" class=\"card-header-logo\" />\n\n                    <!-- <p v-bind:class=\"{ changeFont: propertiesName(brandpropertiesitem.name) }\">{{ brandpropertiesitem.name }}</p> -->\n                    <p class=\"card-title\">\n                      {{ brandpropertiesitem.name }}\n                    </p>\n\n                    <img v-if=\"typeof brandpropertiesitem.rating == 'string'\" v-bind:src=\"'/templates/main/images/tripadvisor/inline/rating-' + brandpropertiesitem.rating + '.png'\" v-bind:alt=\"'TripAdvisor rating for ' + brandpropertiesitem.name\" class=\"card-tripadvisor-logo\" />\n\n                    <a v-bind:href=\"bookingFunnelURL(brandpropertiesitem)\" class=\"card-button\" aria-label=\"book\" :target=\"brandpropertiesitem.useoffsiteurl == '1' ? '_blank' : '_self'\">\n                      <svg class=\"svg-cart\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16.3 14.3\">\n                        <path class=\"fill\" d=\"M14.7 9.7H4.3L2.2 1H.5C.2 1 0 .8 0 .5S.2 0 .5 0H3l.4 1.7h12.8l-1.5 8zm-9.6-1h8.7L15 2.8H3.7l1.4 5.9zM6.7 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.3.6-.6.6zM12.5 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.2.6-.6.6z\"/>\n                      </svg>\n                    </a>\n                  </header>\n                  <footer class=\"card-footer\">\n                    <p class=\"card-details\">{{ 'Lowest Available Rate' | translate('lowest-available-rate') }}</p>\n                    <p v-if=\"sharedState.displayIn == 'points' && brandpropertiesitem.points.minpoints > 0\" class=\"card-title\">{{ rateCalc(brandpropertiesitem.points.minpoints, 'PTS') }}</p>\n                    <p v-else-if=\"sharedState.displayIn == 'points'\" class=\"card-title\">\n                      Rate Unavailable\n                    </p>\n                    <p v-if=\"sharedState.displayIn == 'pointsPlusCash' && brandpropertiesitem['cash-plus-points']['points'] > 0\" class=\"card-title\">\n                      {{ rateCalc(brandpropertiesitem['cash-plus-points']['points'], 'PTS') }} + {{ rateCalc(brandpropertiesitem['cash-plus-points']['rate'], brandpropertiesitem.currency) }}\n                    </p>\n                    <p v-else-if=\"sharedState.displayIn == 'pointsPlusCash'\" class=\"card-title\">\n                      Rate Unavailable\n                    </p>\n                    <p v-if=\"sharedState.displayIn == 'currency'\" class=\"card-title\">\n                      {{ rateCalc(brandpropertiesitem.minrate, brandpropertiesitem.currency) }}\n                    </p>\n                  </footer>\n                </a>\n              </article>\n            </div>\n          </template>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"results-info row\" v-if=\"sharedState.brand\">\n      <div class=\"results-number small-12 medium-6 column\">\n        <div v-if=\"sharedState.searchType !== 'geolocation'\">\n          <h2 v-if=\"sharedState.othercarlsonproperties.length != 1\">\n            <template v-if=\" nearin == 'near' \">\n              {{ '${otherpropresults} OTHER CARLSON REZIDOR HOTELS NEAR \"${searchloc}\"' | translate('otherprop-results-mssg-near', { otherpropresults: sharedState.othercarlsonproperties.length, searchloc: locationSearch }) }}\n            </template>\n            <template v-else>\n              {{ '${otherpropresults} OTHER CARLSON REZIDOR HOTELS IN \"${searchloc}\"' | translate('otherprop-results-mssg-in', { otherpropresults: sharedState.othercarlsonproperties.length, searchloc: locationSearch }) }}\n            </template>\n          </h2>\n          <h2 v-else>\n            <template v-if=\" nearin == 'near' \">\n              {{ '${otherpropresults} OTHER CARLSON REZIDOR HOTEL NEAR \"${searchloc}\"' | translate('otherprop-single-results-mssg-near', { otherpropresults: sharedState.othercarlsonproperties.length, searchloc: locationSearch }) }}\n            </template>\n            <template v-else>\n              {{ '${otherpropresults} OTHER CARLSON REZIDOR HOTEL IN \"${searchloc}\"' | translate('otherprop-single-results-mssg-in', { otherpropresults: sharedState.othercarlsonproperties.length, searchloc: locationSearch }) }}\n            </template>\n          </h2>\n        </div>\n        <div v-else>\n          <h2 v-if=\"sharedState.othercarlsonproperties.length != 1\">{{ '${otherpropresults} OTHER CARLSON REZIDOR HOTELS ${searchloc}' | translate('otherprop-results-mssg', { otherpropresults: sharedState.othercarlsonproperties.length, searchloc: locationSearch }) }}</h2>\n          <h2 v-else>{{ '${otherpropresults} OTHER CARLSON REZIDOR HOTEL ${searchloc}' | translate('otherprop-single-results-mssg', { otherpropresults: sharedState.othercarlsonproperties.length, searchloc: locationSearch }) }}</h2>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"results row\">\n      <div class=\"results-cards\">\n        <loading v-show=\"loading\"></loading>\n\n        <div v-if=\"sharedState.brand\" class=\"flexgrid\">\n          <template v-for=\"otherpropertiesitem in sharedState.othercarlsonproperties\">\n            <div class=\"card-wrapper\">\n              <article class=\"card-v2 resv-card\" itemtype=\"http://schema.org/Place\" data-card-type=\"Offer Card\">\n                <a v-bind:href=\"propertyurl(otherpropertiesitem)\" tabindex=\"0\" class=\"flex-link\" :target=\"otherpropertiesitem.useoffsiteurl == '1' ? '_blank' : '_self'\">\n                  <figure class=\"card-img-cover\">\n                    <responsiveimage v-if=\"otherpropertiesitem.property_image['@attributes']\" :source-id=\"otherpropertiesitem.property_image['@attributes'].id\" :source-image=\"otherpropertiesitem.property_image.record\" :alttext=\"otherpropertiesitem.name\" picture=\"searchresults/card/otherpropertiesitem.property_image\"></responsiveimage>\n                    \n                    <div v-else class=\"no-image\" alt=\"title\" style=\"width:100%; height:100%; background: linear-gradient(to top, #000, #454545, #696969);\" data-picture=\"searchresults/card/otherpropertiesitem.no-img\" />\n\n                    <figcaption v-if=\"sharedState.searchType == 'state' || sharedState.searchType == 'country'\">\n                      <span v-if=\"otherpropertiesitem.neighborhood.length\" class=\"expiration\"><i class=\"fa fa-map-marker\"></i> {{ otherpropertiesitem.neighborhood }}</span>\n                    </figcaption>\n\n                    <figcaption v-if=\"sharedState.searchType == 'airport' || sharedState.searchType == 'attraction'\">\n                      <span v-if=\"otherpropertiesitem.attraction_airport_distance.length\" class=\"expiration\"><i class=\"fa fa-map-marker\"></i> {{ '${allattractionairportdistance} mi from ${searchcity}' | translate('allairportattractiondistancemssg', { allattractionairportdistance: otherpropertiesitem.attraction_airport_distance, searchcity: sharedState.searchCity }) }}</span>\n                    </figcaption>\n\n                    <figcaption v-if=\"sharedState.searchType == 'city'\">\n                      <span v-if=\"otherpropertiesitem.distance != 0\" class=\"expiration\"><i class=\"fa fa-map-marker\"></i> {{ '${allpropdistance} mi from Downtown' | translate('alldowntowndistancemssg', { allpropdistance: otherpropertiesitem.distance }) }}</span>\n                      <span v-else class=\"expiration\"><i class=\"fa fa-map-marker\"></i> {{ otherpropertiesitem.city }}</span>\n                    </figcaption>\n                    \n                    <div class=\"shadow\"></div>\n\n                    <div class=\"card-alert recent-stay\" v-if=\"otherpropertiesitem.recent_stay_date\">{{ 'You stayed here in' | translate('you-stayed-here-in') }} {{ stayDateFormat(otherpropertiesitem.recent_stay_date) }}</div>\n                  </figure>\n                  <header class=\"card-header\">\n                    <img :src=\"otherpropertiesitem.brand.record.mediafile\" v-bind:alt=\"otherpropertiesitem.name\" class=\"card-header-logo\" />\n\n                    <!-- <p v-bind:class=\"{ changeFont: propertiesName(otherpropertiesitem.name) }\">{{ otherpropertiesitem.name }}</p> -->\n                    <p class=\"card-title\">\n                      {{ otherpropertiesitem.name }}\n                    </p>\n\n                    <img v-if=\"typeof otherpropertiesitem.rating == 'string'\" v-bind:src=\"'/templates/main/images/tripadvisor/inline/rating-' + otherpropertiesitem.rating + '.png'\" v-bind:alt=\"'TripAdvisor rating for ' + otherpropertiesitem.name\" class=\"card-tripadvisor-logo\" />\n\n                    <a v-bind:href=\"bookingFunnelURL(otherpropertiesitem)\" class=\"card-button\" aria-label=\"book\" :target=\"otherpropertiesitem.useoffsiteurl == '1' ? '_blank' : '_self'\">\n                      <svg class=\"svg-cart\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16.3 14.3\">\n                        <path class=\"fill\" d=\"M14.7 9.7H4.3L2.2 1H.5C.2 1 0 .8 0 .5S.2 0 .5 0H3l.4 1.7h12.8l-1.5 8zm-9.6-1h8.7L15 2.8H3.7l1.4 5.9zM6.7 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.3.6-.6.6zM12.5 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.2.6-.6.6z\"/>\n                      </svg>\n                    </a>\n                  </header>\n                  <footer class=\"card-footer\">\n                    <p class=\"card-details\">{{ 'Lowest Available Rate' | translate('lowest-available-rate') }}</p>\n                    <p v-if=\"sharedState.displayIn == 'points' && otherpropertiesitem.points.minpoints > 0\" class=\"card-title\">{{ rateCalc(otherpropertiesitem.points.minpoints, 'PTS') }}</p>\n                    <p v-else-if=\"sharedState.displayIn == 'points'\" class=\"card-title\">\n                      Rate Unavailable\n                    </p>\n                    <p v-if=\"sharedState.displayIn == 'pointsPlusCash' && otherpropertiesitem['cash-plus-points']['points'] > 0\" class=\"card-title\">\n                      {{ rateCalc(otherpropertiesitem['cash-plus-points']['points'], 'PTS') }} + {{ rateCalc(otherpropertiesitem['cash-plus-points']['rate'], otherpropertiesitem.currency) }}\n                    </p>\n                    <p v-else-if=\"sharedState.displayIn == 'pointsPlusCash'\" class=\"card-title\">\n                      Rate Unavailable\n                    </p>\n                    <p v-if=\"sharedState.displayIn == 'currency'\" class=\"card-title\">\n                      {{ rateCalc(otherpropertiesitem.minrate, otherpropertiesitem.currency) }}\n                    </p>\n                  </footer>\n                </a>\n              </article>\n            </div>\n          </template>\n        </div>\n\n        <div v-else class=\"flexgrid\">\n          <template v-for=\"propertiesitem in sharedState.propertiesitems\">\n            <div class=\"card-wrapper\">\n              <article class=\"card-v2 resv-card\" itemtype=\"http://schema.org/Place\" data-card-type=\"Offer Card\">\n                <a v-bind:href=\"propertyurl(propertiesitem)\" tabindex=\"0\" class=\"flex-link\" :target=\"propertiesitem.useoffsiteurl == '1' ? '_blank' : '_self'\">\n                  <figure class=\"card-img-cover\">\n                    <responsiveimage v-if=\"propertiesitem.property_image['@attributes']\" :source-id=\"propertiesitem.property_image['@attributes'].id\" :source-image=\"propertiesitem.property_image.record\" :alttext=\"propertiesitem.name\" picture=\"searchresults/card/propertiesitem.property_image\"></responsiveimage>\n                    \n                    <div v-else class=\"no-image\" alt=\"title\" style=\"width:100%; height:100%; background: linear-gradient(to top, #000, #454545, #696969);\" data-picture=\"searchresults/card/propertiesitem.no-img\" />\n\n                    <figcaption v-if=\"sharedState.searchType == 'state' || sharedState.searchType == 'country'\">\n                      <span v-if=\"propertiesitem.neighborhood.length\" class=\"expiration\"><i class=\"fa fa-map-marker\"></i> {{ propertiesitem.neighborhood }}</span>\n                    </figcaption>\n\n                    <figcaption v-if=\"sharedState.searchType == 'airport' || sharedState.searchType == 'attraction'\">\n                      <span v-if=\"propertiesitem.attraction_airport_distance.length\" class=\"expiration\"><i class=\"fa fa-map-marker\"></i> {{ '${allattractionairportdistance} mi from ${searchcity}' | translate('allairportattractiondistancemssg', { allattractionairportdistance: propertiesitem.attraction_airport_distance, searchcity: sharedState.searchCity }) }}</span>\n                    </figcaption>\n\n                    <figcaption v-if=\"sharedState.searchType == 'city'\">\n                      <span v-if=\"propertiesitem.distance != 0\" class=\"expiration\"><i class=\"fa fa-map-marker\"></i> {{ '${allpropdistance} mi from Downtown' | translate('alldowntowndistancemssg', { allpropdistance: propertiesitem.distance }) }}</span>\n                      <span v-else class=\"expiration\"><i class=\"fa fa-map-marker\"></i> {{ propertiesitem.city }}</span>\n                    </figcaption>\n                    \n                    <div class=\"shadow\"></div>\n\n                    <div class=\"card-alert recent-stay\" v-if=\"propertiesitem.recent_stay_date\">{{ 'You stayed here in' | translate('you-stayed-here-in') }} {{ stayDateFormat(propertiesitem.recent_stay_date) }}</div>\n                  </figure>\n                  <header class=\"card-header\">\n                    <img :src=\"propertiesitem.brand.record.mediafile\" v-bind:alt=\"propertiesitem.name\" class=\"card-header-logo\" />\n\n                    <!-- <p v-bind:class=\"{ changeFont: propertiesName(propertiesitem.name) }\">{{ propertiesitem.name }}</p> -->\n                    <p class=\"card-title\">\n                      {{ propertiesitem.name }}\n                    </p>\n\n                    <img v-if=\"typeof propertiesitem.rating == 'string'\" v-bind:src=\"'/templates/main/images/tripadvisor/inline/rating-' + propertiesitem.rating + '.png'\" v-bind:alt=\"'TripAdvisor rating for ' + propertiesitem.name\" class=\"card-tripadvisor-logo\" />\n\n                    <a v-bind:href=\"bookingFunnelURL(propertiesitem)\" class=\"card-button\" aria-label=\"book\" :target=\"propertiesitem.useoffsiteurl !== '0' ? '_blank' : '_self'\">\n                      <svg class=\"svg-cart\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16.3 14.3\">\n                        <path class=\"fill\" d=\"M14.7 9.7H4.3L2.2 1H.5C.2 1 0 .8 0 .5S.2 0 .5 0H3l.4 1.7h12.8l-1.5 8zm-9.6-1h8.7L15 2.8H3.7l1.4 5.9zM6.7 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.3.6-.6.6zM12.5 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.2.6-.6.6z\"/>\n                      </svg>\n                    </a>\n                  </header>\n                  <footer class=\"card-footer\">\n                    <p class=\"card-details\">{{ 'Lowest Available Rate' | translate('lowest-available-rate') }}</p>\n                    <p v-if=\"sharedState.displayIn == 'points' && propertiesitem.points.minpoints > 0\" class=\"card-title\">{{ rateCalc(propertiesitem.points.minpoints, 'PTS') }}</p>\n                    <p v-else-if=\"sharedState.displayIn == 'points'\" class=\"card-title\">\n                      Rate Unavailable\n                    </p>\n                    <p v-if=\"sharedState.displayIn == 'pointsPlusCash' && propertiesitem['cash-plus-points']['points'] > 0\" class=\"card-title\">\n                      {{ rateCalc(propertiesitem['cash-plus-points']['points'], 'PTS') }} + {{ rateCalc(propertiesitem['cash-plus-points']['rate'], propertiesitem.currency) }}\n                    </p>\n                    <p v-else-if=\"sharedState.displayIn == 'pointsPlusCash'\" class=\"card-title\">\n                      Rate Unavailable\n                    </p>\n                    <p v-if=\"sharedState.displayIn == 'currency'\" class=\"card-title\">\n                      {{ rateCalc(propertiesitem.minrate, propertiesitem.currency) }}\n                    </p>\n                  </footer>\n                </a>\n              </article>\n            </div>\n          </template>\n        </div>\n      </div>\n\n      <div class=\"column small-12 disclaimer\">*{{ 'Lowest Available Rate - Additional taxes and surcharges may apply. Total estimated cost is only available in hotel currency.' | translate('lowest-available-rate-disclaimer') }}</div>\n    </div>\n\n    <!-- include filters -->\n    <promocodes v-bind:promocodes=\"sharedState.promocodes\" v-if=\"showPromo\" v-on:close=\"promocodesClose\"></promocodes>\n    <filters v-show=\"sharedState.showFilters\"></filters>\n    <price v-show=\"sharedState.showPrice\"></price>\n    <errors v-if=\"sharedState.error\" v-bind:error=\"sharedState.error\"></errors>\n  </div>\n</section>\n";

/***/ }),

/***/ 375:
/***/ (function(module, exports) {

module.exports = "<transition v-on:enter=\"onEnter\" v-on:leave=\"onLeave\">\n  <div class=\"loader-wrap\">\n    <div class=\"loader\">\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </div>\n</transition>\n";

/***/ }),

/***/ 376:
/***/ (function(module, exports) {

module.exports = "<div class=\"results-filters-wrapper\" v-show=\"sharedState.showFilters\">\n  <div class=\"mobile-filter-buttons hide-for-large\">\n    <h1>{{ 'Refine' | translate('refine') }}</h1>\n    <a class=\"cancel-btn\" @click=\"close\">{{ 'Cancel' | translate('cancel') }}</a>\n    <a class=\"reset-btn\" @click=\"reset\">{{ 'Reset' | translate('reset') }}</a>\n  </div>\n\n  <a class=\"close-results show-for-large\" tabindex=\"0\" v-on:keyup.enter=\"close\" @click=\"close\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 68 68\" class=\"svg svg-close\"><path class=\"fill\" d=\"M43.9 34l23.334-23.335-9.9-9.9L34 24.1 10.666.766l-9.9 9.9L24.1 34 .767 57.334l9.9 9.9L34 43.9l23.335 23.334 9.9-9.9L43.9 34z\"/></svg></a>\n\n  <h1>{{ 'Sort By' | translate('sort-by') }}</h1>\n  <div class=\"filter column small-12 filter-sort\">\n    <div class=\"filter-options\">\n    <fieldset>\n    <legend class=\"hide\"><h1>{{ 'Sort By' | translate('sort-by') }}</h1></legend>\n      <ul class=\"filter-radio\">\n        <li v-if=\"sharedState.searchType !== 'state' && sharedState.searchType !== 'country'\">\n          <input type=\"radio\" id=\"distance\" class=\"Distance\" name=\"selector\">\n          <label for=\"distance\">{{ 'Distance' | translate('distance') }}</label>\n          <div class=\"check\"><div class=\"inside\"></div></div>\n        </li>\n        <li>\n          <input type=\"radio\" id=\"price-low\" class=\"Rate-Low\" name=\"selector\">\n          <label for=\"price-low\">{{ 'Price Low to High' | translate('price-low-to-high') }}</label>\n          <div class=\"check\"><div class=\"inside\"></div></div>\n        </li>\n\n        <li>\n          <input type=\"radio\" id=\"price-high\" class=\"Rate-High\" name=\"selector\">\n          <label for=\"price-high\">{{ 'Price High to Low' | translate('price-high-to-low') }}</label>\n          <div class=\"check\"><div class=\"inside\"></div></div>\n        </li>\n\n        <li>\n          <input type=\"radio\" id=\"rating\" class=\"Rating\" name=\"selector\">\n          <label for=\"rating\">{{ 'Rating' | translate('rating') }}</label>\n          <div class=\"check\"><div class=\"inside\"></div></div>\n        </li>\n      </ul>\n    </fieldset>\n    </div>\n  </div>\n\n  <h1>{{ 'Brands' | translate('brands') }}</h1>\n  <div class=\"filter column small-12 filter-brands\">\n    <div class=\"filter-options\">\n      <button v-for=\"item in sharedState.brandfiltersparams\"\n                :class=\"{ button: true, secondary: getBrandsIndex(item) < 0, active: getBrandsIndex(item) !== -1}\"\n                @click=\"toggleBrand(item)\" v-bind:data-id=\"item.code\">\n        {{ item.name }}\n        <svg v-if=\"getBrandsIndex(item) < 0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7\" height=\"7\" viewBox=\"0 0 13 13\" class=\"svg svg-plus\"><path class=\"fill\" fill=\"#000000\" d=\"M8 5V0H5v5H0v3h5v5h3V8h5V5H8z\"/></svg>\n        <svg v-if=\"getBrandsIndex(item) !== -1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7\" height=\"7\" viewBox=\"0 0 68 68\" class=\"svg svg-close\"><path class=\"fill\" fill=\"#000000\" d=\"M43.9 34l23.334-23.335-9.9-9.9L34 24.1 10.666.766l-9.9 9.9L24.1 34 .767 57.334l9.9 9.9L34 43.9l23.335 23.334 9.9-9.9L43.9 34z\"/></svg>\n      </button>\n    </div>\n  </div>\n\n  <h1>{{ 'Filters' | translate('filters') }}</h1>\n  <div v-for=\"item in sharedState.amenitiescatsitems\" v-bind:class=\"'filter column small-12 filter-'+item.code\" v-if=\"item.amenities\">\n    <div class=\"filter-name\">{{ item.category }}</div>\n    <div class=\"filter-options\">\n      <button v-for=\"amenity in item.amenities.record\"\n                :class=\"{ button: true, secondary: getAmenityIndex(amenity) < 0, active: getAmenityIndex(amenity) !== -1, disabled: hotelCount(amenity) < 1 }\"\n                @click=\"toggleAmenity(amenity)\" v-bind:data-id=\"amenity['@attributes'].id\" :disabled=\"hotelCount(amenity) < 1 \">\n          {{ amenity.name }} ({{ hotelCount(amenity) }})\n          <svg v-if=\"getAmenityIndex(amenity) < 0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7\" height=\"7\" viewBox=\"0 0 13 13\" class=\"svg svg-plus\"><path class=\"fill\" fill=\"#000000\" d=\"M8 5V0H5v5H0v3h5v5h3V8h5V5H8z\"/></svg>\n          <svg v-if=\"getAmenityIndex(amenity) !== -1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7\" height=\"7\" viewBox=\"0 0 68 68\" class=\"svg svg-close\"><path class=\"fill\" fill=\"#000000\" d=\"M43.9 34l23.334-23.335-9.9-9.9L34 24.1 10.666.766l-9.9 9.9L24.1 34 .767 57.334l9.9 9.9L34 43.9l23.335 23.334 9.9-9.9L43.9 34z\"/></svg>\n      </button>\n    </div>\n  </div>\n\n  <div class=\"filter filter-buttons colum small-12\">\n    <button class=\"reset-btn show-for-large\" @click=\"reset\">{{ 'Reset Filters' | translate('reset-filters') }}</button>\n    <button class=\"button secondary show-for-large\" @click=\"close\">{{ 'Cancel' | translate('cancel') }}</button>\n    <button class=\"hide-for-large button primary apply-filters\" @click=\"apply($event)\">{{ 'Apply Filters' | translate('apply-filters') }}</button>\n    <button class=\"show-for-large button primary apply-filters\" @click=\"apply($event)\">{{ 'Apply Changes' | translate('apply-changes') }}</button>\n  </div>\n</div>\n";

/***/ }),

/***/ 377:
/***/ (function(module, exports) {

module.exports = "<div class=\"results-filters-wrapper mobile-price-buttons\">\n  <div class=\"mobile-filter-buttons mobile-price-buttons hide-for-large\">\n    <h1>{{ 'Display In' | translate('display-in') }}</h1>\n    <a class=\"cancel-btn\" @click=\"close\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 68 68\" class=\"svg svg-close\"><path class=\"fill\" d=\"M43.9 34l23.334-23.335-9.9-9.9L34 24.1 10.666.766l-9.9 9.9L24.1 34 .767 57.334l9.9 9.9L34 43.9l23.335 23.334 9.9-9.9L43.9 34z\"/></svg></a>\n  </div>\n\n  <ul class=\"ratelist row\">\n    <li class=\"column small-12\" v-bind:class=\"{ active: displayIn == 'currency' }\">\n      <button type=\"button\" @click=\"setPrice('currency')\">\n        <div class=\"rate-input\">\n          <svg v-if=\"displayIn == 'currency'\" class=\"svg svg-check\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11\" height=\"9\" viewBox=\"0 0 11 9\"><path class=\"fill\" fill=\"#FFF\"  d=\"M4.243 5.778l-2.83-2.83L0 4.365 3.536 7.9l.707.706 6.364-6.364L9.192.828l-4.95 4.95z\"/></svg>\n        </div>\n        <div class=\"rate-name\">{{ 'Currency' | translate('currency') }}</div>\n      </button>\n    </li>\n\n    <li v-if=\"hasPoints\" class=\"column small-12\" v-bind:class=\"{ active: displayIn == 'points' }\">\n      <button type=\"button\" @click=\"setPrice('points')\">\n        <div class=\"rate-input\">\n          <svg v-if=\"displayIn == 'points'\" class=\"svg svg-check\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11\" height=\"9\" viewBox=\"0 0 11 9\"><path class=\"fill\" fill=\"#FFF\"  d=\"M4.243 5.778l-2.83-2.83L0 4.365 3.536 7.9l.707.706 6.364-6.364L9.192.828l-4.95 4.95z\"/></svg>\n        </div>\n        <div class=\"rate-name\">{{ 'Points' | translate('points') }}</div>\n      </button>\n    </li>\n\n    <li v-if=\"hasPointsPlusCash\" class=\"column small-12\" v-bind:class=\"{ active: displayIn == 'pointsPlusCash' }\">\n      <button type=\"button\" @click=\"setPrice('pointsPlusCash')\">\n        <div class=\"rate-input\">\n          <svg v-if=\"displayIn == 'pointsPlusCash'\" class=\"svg svg-check\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11\" height=\"9\" viewBox=\"0 0 11 9\"><path class=\"fill\" fill=\"#FFF\"  d=\"M4.243 5.778l-2.83-2.83L0 4.365 3.536 7.9l.707.706 6.364-6.364L9.192.828l-4.95 4.95z\"/></svg>\n        </div>\n        <div class=\"rate-name\">{{ 'Points + Cash' | translate('points-cash') }}</div>\n      </button>\n    </li>\n  </ul>\n</div>\n";

/***/ }),

/***/ 378:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Vue = __webpack_require__(3);
var $ = __webpack_require__(2);
// Template
var template = __webpack_require__(379);

var store = __webpack_require__(32);

var Errors = void 0;

Errors = Vue.component('errors', {
  template: template,

  data: function data() {
    return store;
  },

  mounted: function mounted() {
    $('body').append('<div class="modal-overlay"></div>');
  },

  methods: {
    close: function close() {
      this.error = "";
      $('.modal-overlay').remove();
    }
  }

});

module.exports = Errors;

/***/ }),

/***/ 379:
/***/ (function(module, exports) {

module.exports = "<div class=\"bookingview-error\" v-bind:class=\"{ 'is-open': error }\">\n  <div class=\"bookingview-full-header\">\n    <button type=\"button\" class=\"close-btn\" @click=\"close()\" aria-label=\"Close Error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 68 68\" class=\"svg svg-close\"><path class=\"fill\" fill=\"#000000\" d=\"M43.9 34l23.334-23.335-9.9-9.9L34 24.1 10.666.766l-9.9 9.9L24.1 34 .767 57.334l9.9 9.9L34 43.9l23.335 23.334 9.9-9.9L43.9 34z\"/></svg>\n    </button>\n  </div>\n  <div class=\"bookingview-full-body\">\n    <div v-html=\"error\"></div>\n  </div>\n</div>\n";

/***/ }),

/***/ 380:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Vue = __webpack_require__(3);
var $ = __webpack_require__(2);
// const google = window.google;
// const Microsoft = window.Microsoft;
var Foundation = __webpack_require__(14);
var moment = __webpack_require__(0);

/* globals google Microsoft */

// Template
var template = __webpack_require__(381);
var store = __webpack_require__(32);

var map;
var titlePanel = {};
var panels = {};

var Loading = __webpack_require__(110);
var Filters = __webpack_require__(111);
var Price = __webpack_require__(258);
var searchMapPage = Vue.component('searchmap', {
  template: template,

  components: {
    'loading': Loading,
    'filters': Filters,
    'price': Price
  },

  data: function data() {
    return {
      sharedState: store,
      loading: false,
      titlePanel: '',
      centerPOI: '',
      zoomLevel: '',
      centerLat: '',
      centerLong: '',
      mapFiltered: false,
      mapType: '',
      bingmap: '',
      bingCenterPOI: '',
      bingmapActiveCard: ''
    };
  },


  created: function created() {
    if (this.sharedState.brandInfo.name === 'Mall' || this.sharedState.brandInfo.name === '') {
      this.sharedState.brand = false;
    } else {
      this.sharedState.brand = true;
    }
  },

  mounted: function mounted() {
    if (this.getQueryParam("arrive") != '' || this.getQueryParam("arrive") != false) {
      var arrive = this.parseDate(this.getQueryParam("arrive"));
      this.sharedState.arrive = moment(arrive).format(this.sharedState.config.dateFormat);
    }

    if (this.getQueryParam("depart") != '' || this.getQueryParam("depart") != false) {
      var depart = this.parseDate(this.getQueryParam("depart"));
      this.sharedState.depart = moment(depart).format(this.sharedState.config.dateFormat);
    }

    if (this.getQueryParam("arrive") && this.getQueryParam("depart")) {
      var _arrive = this.parseDate(this.getQueryParam("arrive"));
      var _depart = this.parseDate(this.getQueryParam("depart"));

      // Get difference between arrival and depature for # of nights
      this.sharedState.nights = moment(_depart).diff(moment(_arrive), 'days');
    }

    if (this.getQueryParam('promo') != '' || this.getQueryParam('promo') != false) {
      this.sharedState.promo = this.getQueryParam('promo');
    }

    if (this.getQueryParam('displayIn') != '' || this.getQueryParam('displayIn') != false) {
      this.sharedState.displayIn = this.getQueryParam('displayIn');
    }

    if (this.getQueryKeyword() == "city") {
      this.sharedState.searchType = 'city';
    } else if (this.getQueryKeyword() == "state") {
      this.sharedState.searchType = 'state';
    } else if (this.getQueryKeyword() == "country") {
      this.sharedState.searchType = 'country';
    } else {
      this.sharedState.searchType = 'property';
    }

    //brand specific properties
    if (this.sharedState.brand == true) {
      if (this.getQueryVariable()) {
        this.sharedState.params = this.getQueryVariable();
        this.loading = true;
        var brandcode = this.sharedState.brandInfo.code;

        $.ajax({
          url: '/ajax/properties?' + this.sharedState.params + '&radius=1' + '&brand=' + brandcode,
          type: 'get',
          dataType: 'json',
          async: true,
          success: function (data) {

            if (!data.data) {
              this.error = true;
              return; // no results
            } else {
              if (data.data['@attributes'].search_item) {
                this.sharedState.keywordParam = data.data['@attributes'].search_item;
                $('.search-loc').attr('placeholder', '');
                this.sharedState.query = this.sharedState.keywordParam;

                this.sharedState.searchCity = data.data['@attributes'].city;
                this.sharedState.searchState = data.data['@attributes'].state;
                this.sharedState.searchCountry = data.data['@attributes'].country;
                this.sharedState.searchRegion = data.data['@attributes'].region;
              }

              this.loading = false;
              var brandproperties = [];
              if (data.data.record) brandproperties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
              this.brandpropertiescomputed(brandproperties);
            }
          }.bind(this),
          error: function error(err) {
            console.log(err);
          }
        });

        $.ajax({
          url: '/ajax/properties?' + this.sharedState.params + '&radius=1' + this.sharedState.brandsparams,
          type: 'get',
          dataType: 'json',
          async: true,
          success: function (data) {

            if (!data.data) {
              this.error = true;
              return; // no results
            } else {

              var properties = [];
              if (data.data.record) properties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
              this.othercarlsonpropertiescomputed(properties);

              var amenityFilters = [];
              if (data.data.amenity_filters && !$.isEmptyObject(data.data.amenity_filters)) amenityFilters = $.isArray(data.data.amenity_filters.record) ? data.data.amenity_filters.record : [data.data.amenity_filters.record];
              this.amenitiesfilterscomputed(amenityFilters);

              var brandFilters = [];
              if (data.data.brand_filters && !$.isEmptyObject(data.data.brand_filters)) brandFilters = $.isArray(data.data.brand_filters.record) ? data.data.brand_filters.record : [data.data.brand_filters.record];
              this.brandsfilterscomputed(brandFilters);

              this.initMap();
              this.loading = false;
            }
          }.bind(this),
          error: function error(err) {
            console.log(err);
          }
        });
      }
    } else {
      if (this.getQueryVariable()) {
        this.sharedState.params = this.getQueryVariable();
        this.loading = true;
        $.ajax({
          url: '/ajax/properties?' + this.sharedState.params + '&radius=1',
          type: 'get',
          dataType: 'json',
          async: true,
          success: function (data) {

            if (!data.data) {
              this.error = true;
              return; // no results
            } else {

              if (data.data['@attributes'].search_item) {
                this.sharedState.keywordParam = data.data['@attributes'].search_item;
                $('.search-loc').attr('placeholder', '');
                this.sharedState.query = this.sharedState.keywordParam;

                this.sharedState.searchCity = data.data['@attributes'].city;
                this.sharedState.searchState = data.data['@attributes'].state;
                this.sharedState.searchCountry = data.data['@attributes'].country;
                this.sharedState.searchRegion = data.data['@attributes'].region;
              }

              var properties = [];
              if (data.data.record) properties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
              this.propertiescomputed(properties);

              var amenityFilters = [];
              if (data.data.amenity_filters && !$.isEmptyObject(data.data.amenity_filters)) amenityFilters = $.isArray(data.data.amenity_filters.record) ? data.data.amenity_filters.record : [data.data.amenity_filters.record];
              this.amenitiesfilterscomputed(amenityFilters);

              var brandFilters = [];
              if (data.data.brand_filters && !$.isEmptyObject(data.data.brand_filters)) brandFilters = $.isArray(data.data.brand_filters.record) ? data.data.brand_filters.record : [data.data.brand_filters.record];
              this.brandsfilterscomputed(brandFilters);

              this.initMap();
              this.loading = false;
            }
          }.bind(this),
          error: function error(err) {
            console.log(err);
          }
        });
      }
    }

    var getAmenities = $.Deferred();

    if (this.sharedState.amenitiesIds.length > 0) {
      $.ajax({
        url: '/ajax/amenity-categories?' + this.sharedState.params + this.sharedState.brandsparams,
        type: 'get',
        dataType: 'json',
        async: true,
        success: function (data) {

          if (!data.data) {
            this.error = true;
            return; // no results
          } else {

            var amenitiesCats = [];
            if (data.data.record) amenitiesCats = $.isArray(data.data.record) ? data.data.record : [data.data.record];
            this.amenitiesCatscomputed(amenitiesCats);

            getAmenities.resolve(); // .resolve means it will call .done(function), or the first function in .then
          }
        }.bind(this),
        error: function error(err) {
          getAmenities.reject(); // reject means it will call .fail(function), or the second function in .then
          console.log(err);
        }
      });
    }

    getAmenities.done(function () {
      var amenitiesList = this.sharedState.amenitiescatsitems;
      var catListParams = [];

      var selectedParams = this.sharedState.amenitiesIds[0];

      $.each(amenitiesList, function (key, value) {
        if (value.amenities !== undefined) {
          $.each(value.amenities, function (index, item) {
            $.each(item, function (idx, val) {
              catListParams.push(val);
            });
          });
        }
      });

      var filterArray = [];

      $.each(catListParams, function (i, ele) {
        var index = $.inArray(ele['@attributes'].id, selectedParams);
        if (index != -1) {
          filterArray.push(ele);
        }
      });

      this.sharedState.amenitiesitems.push(filterArray);
    }.bind(this)).fail(function () {
      console.log('no amenities');
    });

    var getBrands = $.Deferred();

    if (this.sharedState.existingbrandfilters.length > 0) {
      $.ajax({
        url: '/ajax/get-brands',
        type: 'get',
        dataType: 'json',
        async: true,
        success: function (data) {

          if (!data.data) {
            this.error = true;
            return; // no results
          } else {

            var brandsCats = [];
            if (data.data.record) brandsCats = $.isArray(data.data.record) ? data.data.record : [data.data.record];
            this.brandsCatscomputed(brandsCats);

            getBrands.resolve(); // .resolve means it will call .done(function), or the first function in .then
          }
        }.bind(this),
        error: function error(err) {
          getBrands.reject(); // reject means it will call .fail(function), or the second function in .then
          console.log(err);
        }
      });
    }

    getBrands.done(function () {
      var amenitiesList = this.sharedState.brandfiltersparams;
      var selectedParams = this.sharedState.branditemsCodes;
      var brandArray = [];

      $.each(amenitiesList, function (i, ele) {
        var index = $.inArray(ele.code, selectedParams);
        if (index != -1) {
          brandArray.push(ele);
        }
      });
      this.sharedState.branditems = this.sharedState.branditems.concat(brandArray);
    }.bind(this)).fail(function () {
      console.log('no brands');
    });
  },

  watch: {
    "sharedState.params": {
      deep: true,
      handler: function handler() {
        this.loading = true;

        if (this.sharedState.brand == true) {
          $.ajax({
            url: '/ajax/properties?' + this.sharedState.params + '&radius=1' + '&brand=' + this.sharedState.brandInfo.code,
            type: 'get',
            dataType: 'json',
            async: true,
            success: function (data) {

              if (!data.data) {
                this.error = true;
                return; // no results
              } else {
                if (data.data['@attributes'].search_item) {
                  this.sharedState.keywordParam = data.data['@attributes'].search_item;
                  $('.search-loc').attr('placeholder', '');
                  this.sharedState.query = this.sharedState.keywordParam;

                  this.sharedState.searchCity = data.data['@attributes'].city;
                  this.sharedState.searchState = data.data['@attributes'].state;
                  this.sharedState.searchCountry = data.data['@attributes'].country;
                  this.sharedState.searchRegion = data.data['@attributes'].region;
                }

                this.loading = false;
                var brandproperties = [];
                if (data.data.record) brandproperties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
                this.brandpropertiescomputed(brandproperties);
              }
            }.bind(this),
            error: function error(err) {
              console.log(err);
            }
          });

          $.ajax({
            url: '/ajax/properties?' + this.sharedState.params + '&radius=1' + this.sharedState.brandsparams,
            type: 'get',
            dataType: 'json',
            async: true,
            success: function (data) {

              if (!data.data) {
                this.error = true;
                return; // no results
              } else {
                var properties = [];
                if (data.data.record) properties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
                this.othercarlsonpropertiescomputed(properties);

                var amenityFilters = [];
                if (data.data.amenity_filters && !$.isEmptyObject(data.data.amenity_filters)) amenityFilters = $.isArray(data.data.amenity_filters.record) ? data.data.amenity_filters.record : [data.data.amenity_filters.record];
                this.amenitiesfilterscomputed(amenityFilters);

                var brandFilters = [];
                if (data.data.brand_filters && !$.isEmptyObject(data.data.brand_filters)) brandFilters = $.isArray(data.data.brand_filters.record) ? data.data.brand_filters.record : [data.data.brand_filters.record];
                this.brandsfilterscomputed(brandFilters);

                this.initMap();
                this.loading = false;
              }
            }.bind(this),
            error: function error(err) {
              console.log(err);
            }
          });
        } else {
          $.ajax({
            url: '/ajax/properties?' + this.sharedState.params + '&radius=1' + this.sharedState.brandsparams,
            type: 'get',
            dataType: 'json',
            async: true,
            success: function (data) {

              if (!data.data) {
                this.error = true;
                return; // no results
              } else {
                if (data.data['@attributes'].search_item) {
                  this.sharedState.keywordParam = data.data['@attributes'].search_item;
                  $('.search-loc').attr('placeholder', '');
                  this.sharedState.query = this.sharedState.keywordParam;

                  this.sharedState.searchCity = data.data['@attributes'].city;
                  this.sharedState.searchState = data.data['@attributes'].state;
                  this.sharedState.searchCountry = data.data['@attributes'].country;
                  this.sharedState.searchRegion = data.data['@attributes'].region;
                }

                var properties = [];
                if (data.data.record) properties = $.isArray(data.data.record) ? data.data.record : [data.data.record];
                this.propertiescomputed(properties);

                var amenityFilters = [];
                if (data.data.amenity_filters && !$.isEmptyObject(data.data.amenity_filters)) amenityFilters = $.isArray(data.data.amenity_filters.record) ? data.data.amenity_filters.record : [data.data.amenity_filters.record];
                this.amenitiesfilterscomputed(amenityFilters);

                var brandFilters = [];
                if (data.data.brand_filters && !$.isEmptyObject(data.data.brand_filters)) brandFilters = $.isArray(data.data.brand_filters.record) ? data.data.brand_filters.record : [data.data.brand_filters.record];
                this.brandsfilterscomputed(brandFilters);

                this.initMap();
                this.loading = false;
              }
            }.bind(this),
            error: function error(err) {
              console.log(err);
            }
          });
        }
      }
    }
  },

  methods: {
    bookingFunnelURL: function bookingFunnelURL(pin) {
      var url = '/en/';
      url += pin.brand.record.slug + '/';
      url += 'reservations?property=' + pin.engineid + this.bookingFunnelParams();

      return url;
    },
    bookingFunnelParams: function bookingFunnelParams() {
      var url = '';

      // Dates
      url += '&arrive=' + this.sharedState.arrive;
      url += '&depart=' + this.sharedState.depart;
      // Rooms
      if (this.sharedState.rooms) {
        url += '&rooms=' + this.sharedState.rooms;
      } else if (this.sharedState.displayIn == 'points' || this.sharedState.displayIn == 'pointsPlusCash') {
        url += '&rooms=1';
      }
      // Promo
      if (this.sharedState.promo) {
        url += '&promo=' + this.sharedState.promo;
      }
      if (this.sharedState.promocodes.corporateAccountId) {
        url += '&corp=' + this.sharedState.promocodes.corporateAccountId;
      }
      if (this.sharedState.promocodes.travelAgencyId) {
        url += '&iata=' + this.sharedState.promocodes.travelAgencyId;
      }
      if (this.sharedState.promocodes.ecertCode) {
        url += '&ecert=' + this.sharedState.promocodes.ecertCode;
      }
      // Points
      if (this.sharedState.displayIn == 'points') {
        url += '&ratecode=T-GPPSB*';
      }
      if (this.sharedState.displayIn == 'pointsPlusCash') {
        url += '&ratecode=T-GPPC2*';
      }
      // add facilitatorID
      if (this.getQueryParam('facilitator')) {
        url += '&facilitatorId=' + this.getQueryParam('facilitator');
      } else if (this.getQueryParam('facilitatorId')) {
        url += '&facilitatorId=' + this.getQueryParam('facilitatorId');
      }
      return url;
    },

    getQueryParam: function getQueryParam(variableArg) {
      var variable = variableArg.toLowerCase();
      var query = window.location.search.substring(1);
      var vars = query.split("&");
      for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split("=");
        if (pair[0].toLowerCase() == variable) {
          return pair[1];
        }
      }
      return false;
    },

    getQueryVariable: function getQueryVariable() {
      var query = window.location.search.substring(1);
      return query;
    },

    getQueryKeyword: function getQueryKeyword() {
      var query = window.location.search.substring(1);
      var vars = query.split("&");
      var pair = vars[0].split("=");
      var firstVarsVal = pair[0];

      return firstVarsVal;
    },

    parseDate: function parseDate(input) {
      var parts = input.match(/(\d+)/g);
      return new Date(parts[0], parts[1] - 1, parts[2]);
    },
    brandpropertiescomputed: function brandpropertiescomputed(brandproperties) {
      this.sharedState.brandpropertiesitems = this.addPointsData(brandproperties);
    },
    propertiescomputed: function propertiescomputed(properties) {
      this.sharedState.propertiesitems = this.addPointsData(properties);
    },
    othercarlsonpropertiescomputed: function othercarlsonpropertiescomputed(properties) {
      this.sharedState.othercarlsonproperties = [];
      var self = this;
      this.sharedState.propertiesitems = this.addPointsData(properties);
      var brandprops = this.sharedState.brandpropertiesitems;

      if (brandprops.length > 0) {
        //start by looping through each of the property items
        self.sharedState.propertiesitems.forEach(function (value) {
          var found = false;
          // loop through each of the brand property items
          brandprops.forEach(function (item) {
            //compare ids for matching values
            if (value['@attributes'].id === item['@attributes'].id) {
              found = true;
            }
          });

          if (!found) {
            self.sharedState.othercarlsonproperties.push(value);
          }
        });
      } else {
        this.sharedState.othercarlsonproperties = this.sharedState.propertiesitems;
      }
    },
    amenitiesfilterscomputed: function amenitiesfilterscomputed(amenities) {
      this.sharedState.filtersparams = amenities;
    },
    brandsfilterscomputed: function brandsfilterscomputed(brands) {
      this.sharedState.existingbrandfilters = brands;
    },


    addPointsData: function addPointsData(array) {
      var self = this;
      array.forEach(function (property) {
        // If promo or ratecode is in use, set it to minrate for display
        if (property.promo) {
          property.minrate = parseFloat(property.promo.rate).toFixed(2);
        }
        if (property.rate) {
          property.minrate = parseFloat(property.rate.rate).toFixed(2);
        }
        // Fixing Points data
        if (property.points) {
          property.points.minpoints = parseInt(property.points.minpoints);
          if (property.points.minpoints > 0) {
            self.sharedState.hasPoints = true;
          }
        } else {
          property.points = {
            minpoints: "",
            ratecode: ""
          };
        }

        // Fixing Cash + Points data
        if (property['cash-plus-points']) {
          self.sharedState.hasPointsPlusCash = true;
        } else {
          property['cash-plus-points'] = {
            points: 0,
            rate: 0,
            ratecode: ""
          };
        }

        // Default displayIn
        if ((property.promo || property.rate) && self.sharedState.hasPointsPlusCash) {
          self.sharedState.displayIn = 'pointsPlusCash';
        }
        if ((property.promo || property.rate) && self.sharedState.hasPoints) {
          self.sharedState.displayIn = 'points';
        }

        // Fixing empty objects
        if ($.isEmptyObject(property.neighborhood)) {
          property.neighborhood = [];
        }
        if ($.isEmptyObject(property.attraction_airport_distance)) {
          property.attraction_airport_distance = [];
        }
      });

      return array;
    },

    propertiesName: function propertiesName(nameArg) {
      var name = nameArg;
      if (Foundation.MediaQuery.current == 'small' || Foundation.MediaQuery.current == 'medium') {
        if (name.length > 28) {
          name = name.substr(0, 25);
          name = name + '...';
          return name;
        } else {
          return name;
        }
      } else {
        if (name.length > 36) {
          name = name.substr(0, 33);
          name = name + '...';
          return name;
        } else {
          return name;
        }
      }
    },

    initMap: function initMap() {
      var self = this;
      var map = this.getQueryParam('map');
      var iplocation = this.getQueryParam('iplocation');

      $.ajax({
        url: 'https://api.ipify.org?format=json',
        type: 'GET',
        success: function success(data) {
          if (iplocation == 'CN') {
            $.ajax({
              // Chinese IP address for testing purposes
              url: 'https://freegeoip.net/json/1.0.63.255',
              type: 'GET',
              success: function success(location) {
                if (location.country_code == 'CN') {
                  if (map == 'bing') {
                    self.initBingMap();
                    self.mapType = 'bing';
                  } else {
                    self.initGoogleMap();
                    self.mapType = 'google';
                  }
                } else {
                  self.initGoogleMap();
                  self.mapType = 'google';
                }
              }
            });
          } else {
            $.ajax({
              // Dynamic location from IP address
              url: 'https://freegeoip.net/json/' + data.ip,
              type: 'GET',
              success: function success(location) {
                if (location.country_code == 'CN') {
                  if (map == 'bing') {
                    self.initBingMap();
                    self.mapType = 'bing';
                  } else {
                    self.initGoogleMap();
                    self.mapType = 'google';
                  }
                } else {
                  self.initGoogleMap();
                  self.mapType = 'google';
                }
              }
            });
          }
        }
      });
    },

    initBingMap: function initBingMap() {
      var self = this;

      if (this.getQueryKeyword() == "city") {
        this.centerPOI = this.sharedState.searchCity + ', ' + this.sharedState.searchState + ' ' + this.sharedState.searchCountry;
        this.zoomLevel = 10;
      } else if (this.getQueryKeyword() == "state") {
        this.centerPOI = this.sharedState.searchState + ' ' + this.sharedState.searchCountry;
        this.zoomLevel = 6;
      } else if (this.getQueryKeyword() == "country") {
        this.centerPOI = this.sharedState.searchCountry;
        this.zoomLevel = 6;
      } else if (this.getQueryKeyword() == "airport" || this.getQueryKeyword() == "attraction") {
        this.centerPOI = this.sharedState.keywordParam;
        this.zoomLevel = 9;
      }

      var geocodeRequest = "https://dev.virtualearth.net/REST/v1/Locations?query=" + encodeURIComponent(self.centerPOI) + "&key=ea1QFboXIZokgkFDnxQD~ya5TTKkCPi86SKt5ASRWHg~Ap5KWiQLta7sAu32KxCBL8drMOePrKk46xkpRF61NngyCpbHVI4YcndKkQ3GzwxX";

      this.CallRestService(geocodeRequest, this.GeocodeCallback);
    },

    CallRestService: function CallRestService(request, callback) {
      $.ajax({
        url: request,
        dataType: "jsonp",
        jsonp: "jsonp",
        success: function success(r) {
          callback(r);
        },
        error: function error(e) {
          console.log(e.statusText);
        }
      });
    },

    GeocodeCallback: function GeocodeCallback(result) {
      // Do something with the result
      var self = this;
      this.bingCenterPOI = result.resourceSets[0].resources[0].geocodePoints[0].coordinates;

      this.bingmap = new Microsoft.Maps.Map('#search-poiMap', {
        credentials: 'ea1QFboXIZokgkFDnxQD~ya5TTKkCPi86SKt5ASRWHg~Ap5KWiQLta7sAu32KxCBL8drMOePrKk46xkpRF61NngyCpbHVI4YcndKkQ3GzwxX',
        center: new Microsoft.Maps.Location(this.bingCenterPOI[0], this.bingCenterPOI[1]),
        mapTypeId: Microsoft.Maps.MapTypeId.road,
        zoom: self.zoomLevel,
        navigationBarMode: 'minified',
        //showDashboard: false,
        showLocateMeButton: false,
        //showMapTypeSelector: false
        showMapTypeSelector: false
      });

      self.mobileBingPOISlider();
      //Watch for media query changes
      $(window).on('changed.zf.mediaquery', function () {
        self.mobileBingPOISlider();
      });

      var pinLayer = new Microsoft.Maps.EntityCollection();
      var infoboxLayer = new Microsoft.Maps.EntityCollection();
      var infobox = new Microsoft.Maps.Infobox(new Microsoft.Maps.Location(0, 0), { visible: false, offset: new Microsoft.Maps.Point(0, 20) });
      infoboxLayer.push(infobox);

      var poi;
      if (this.sharedState.brand == true) {
        poi = this.sharedState.brandpropertiesitems.concat(this.sharedState.othercarlsonproperties);
      } else {
        poi = this.sharedState.propertiesitems;
      }

      $.each(poi, function (index, pin) {
        var pinLocation = new Microsoft.Maps.Location(pin.latitude, pin.longitude);
        var newPin = new Microsoft.Maps.Pushpin(pinLocation, { text: pin.name });

        var formattedDate = moment(pin.recent_stay_date, "MM/DD/YYYY").format('MMMM YYYY');

        var infoWindowContent = '';

        // ========================================================================
        // <article class="card-v2 resv-card map-card">
        infoWindowContent += '<article class="card-v2 resv-card map-card" itemscope="" itemtype="http://schema.org/Place" data-card-type="Map Card">';

        //_____________________________________
        // recent stay banner
        if (pin.recent_stay_date) {
          infoWindowContent += '<div class="room-recentstay">You stayed here in ' + formattedDate + '</div>';
        }

        //_____________________________________
        // <figure class="card-img-cover">
        infoWindowContent += '<figure class="card-img-cover">';

        // <img class="cover-img">
        infoWindowContent += '<img itemprop="image" alt="' + pin.name + '" src="/uploads/' + pin.property_image['@attributes'].id + "/0/" + pin.property_image.record + '" class="cover-img" />';

        // <div class="expiration">
        if (self.sharedState.searchType == 'state' || self.sharedState.searchType == 'country') {
          if (pin.neighborhood.length > 0) infoWindowContent += '<div class="expiration"><i class="fa fa-map-marker"></i>' + pin.neighborhood + '</div>';
        } else {
          if (pin.distance > 0) {
            infoWindowContent += '<div class="expiration"><i class="fa fa-map-marker"></i>' + pin.distance + ' mi from Downtown</div>';
          } else {
            infoWindowContent += '<div class="expiration"><i class="fa fa-map-marker"></i>' + pin.city + '</div>';
          }
        }

        infoWindowContent += '</figure>';

        //_____________________________________
        // <header class="card-header">
        infoWindowContent += '<header class="card-header">';

        // <img class="card-header-logo">
        infoWindowContent += '<img alt="' + pin.brand.record.brand + '" src="' + pin.brand.record.mediafile + '" class="card-header-logo" border="0" />';

        // <p class="card-title">
        infoWindowContent += '<p class="card-title">' + pin.name + '</p>';

        // <img class="card-tripadvisor-logo">
        infoWindowContent += '<img alt="TripAdvisor rating for ' + pin.name + '" src="/templates/main/images/tripadvisor/inline/rating-' + pin.rating + '.png" class="card-tripadvisor-logo" />';

        // <a class="card-button">
        infoWindowContent += '<a class="card-button" aria-label="reserve" href="' + self.bookingFunnelURL(pin) + '"><svg class="svg-cart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16.3 14.3"><path class="fill" d="M14.7 9.7H4.3L2.2 1H.5C.2 1 0 .8 0 .5S.2 0 .5 0H3l.4 1.7h12.8l-1.5 8zm-9.6-1h8.7L15 2.8H3.7l1.4 5.9zM6.7 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.3.6-.6.6zM12.5 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.2.6-.6.6z"/></svg></a>';

        infoWindowContent += '</header>';

        //_____________________________________
        // <header class="card-footer">
        infoWindowContent += '<footer class="card-footer">';

        // <p class="card-details">
        infoWindowContent += '<p class="card-details">Lowest Available Rate</p>';

        // <p class="card-title">
        var minRateFixed = pin.minrate ? parseFloat(pin.minrate).toFixed(2) : "";
        if (pin.currency == 'USD') {
          infoWindowContent += '<p class="card-title">$' + minRateFixed + ' ' + pin.currency + '</p>';
        } else {
          infoWindowContent += '<p class="card-title">' + minRateFixed + ' ' + pin.currency + '</p>';
        }

        infoWindowContent += '</footer>';
        infoWindowContent += '</article>';

        var infobox = new Microsoft.Maps.Infobox(pinLocation, {
          title: pin.name,
          description: infoWindowContent,
          visible: false
        });
        infobox.setMap(self.bingmap);

        if (Foundation.MediaQuery.atLeast('large')) {
          Microsoft.Maps.Events.addHandler(newPin, 'click', function () {
            //infobox.setOptions({ visible:false });
            infobox.setOptions({ visible: true, title: pin.name, description: infoWindowContent });
          });
        }

        pinLayer.push(newPin);
        infoboxLayer.push(infobox);
      });

      self.bingmap.entities.push(pinLayer);
      self.bingmap.entities.push(infoboxLayer);
    },

    initGoogleMap: function initGoogleMap() {
      var self = this;
      var poi;

      if (this.sharedState.brand == true) {
        poi = this.sharedState.brandpropertiesitems.concat(this.sharedState.othercarlsonproperties);
      } else {
        poi = this.sharedState.propertiesitems;
      }

      if (this.getQueryKeyword() == "city") {
        this.centerPOI = this.sharedState.searchCity + ', ' + this.sharedState.searchState + ' ' + this.sharedState.searchCountry;
        this.zoomLevel = 11;
      } else if (this.getQueryKeyword() == "state") {
        this.centerPOI = this.sharedState.searchState + ' ' + this.sharedState.searchCountry;
        this.zoomLevel = 7;
      } else if (this.getQueryKeyword() == "country") {
        this.centerPOI = this.sharedState.searchCountry;
        this.zoomLevel = 7;
      } else if (this.getQueryKeyword() == "airport" || this.getQueryKeyword() == "attraction") {
        this.centerPOI = this.sharedState.keywordParam;
        this.zoomLevel = 10;
      }

      var getLatLng = $.Deferred();
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode({ 'address': this.centerPOI }, function (results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          self.centerLat = results[0].geometry.location.lat();
          self.centerLong = results[0].geometry.location.lng();

          getLatLng.resolve(); // .resolve means it will call .done(function), or the first function in .then
        } else {
          console.log('Geocode was not successful for the following reason: ' + status);
          getLatLng.reject(); // reject means it will call .fail(function), or the second function in .then
        }
      });

      getLatLng.done(function () {
        this.$nextTick(this.mobilePOISlider);
        //Watch for media query changes
        $(window).on('changed.zf.mediaquery', function () {
          self.mobilePOISlider();
        });

        //add the isOpen to the infoWindow Prototype:
        google.maps.InfoWindow.prototype.isOpen = false;
        //Get Map settings:
        var mapC = document.getElementById('search-poiMap');
        if (mapC != undefined) {
          var mapSettings = {};

          mapSettings.latitude = parseFloat(self.centerLat);
          mapSettings.longitude = parseFloat(self.centerLong);

          //Start map:
          map = new google.maps.Map(mapC, {
            center: { lat: mapSettings.latitude, lng: mapSettings.longitude },
            scaleControl: false,
            zoom: self.zoomLevel,
            scrollwheel: false,
            zoomControl: Foundation.MediaQuery.atLeast('large') ? true : false,
            mapTypeControl: false
          });

          //Add markers:
          //var cItem = 0;
          poi.forEach(function (cPoi) {
            var poiId = cPoi['@attributes'].id;
            var poiLat = parseFloat(cPoi.latitude);
            var poiLong = parseFloat(cPoi.longitude);
            var formattedDate = moment(cPoi.recent_stay_date, "MM/DD/YYYY").format('MMMM YYYY');

            var titlePanelIcon = '<div class="poi_logo poi-' + poiId + '"><img src="' + cPoi.brand.record.mediafile + '" class="logo" alt="' + cPoi.brand.record.brand + '" border="0" /></div><div class="panel-beak"></div>';

            titlePanel[poiId] = new google.maps.InfoWindow({
              enableEventPropagation: true,
              content: titlePanelIcon,
              position: { lat: poiLat, lng: poiLong },
              zIndex: 1,
              boxStyle: {
                background: "url('/assets/images/temporary/pic-cloud-tip.png') no-repeat",
                width: "40px"
              }
            });

            var infoWindowContent = '';

            // ========================================================================
            // <article class="card-v2 resv-card map-card">
            infoWindowContent += '<article class="card-v2 resv-card map-card" itemscope="" itemtype="http://schema.org/Place" data-card-type="Map Card">';

            //_____________________________________
            // recent stay banner
            if (cPoi.recent_stay_date) {
              infoWindowContent += '<div class="room-recentstay">You stayed here in ' + formattedDate + '</div>';
            }

            //_____________________________________
            // <figure class="card-img-cover">
            infoWindowContent += '<figure class="card-img-cover">';

            // <img class="cover-img">
            infoWindowContent += '<img itemprop="image" alt="' + cPoi.name + '" src="/uploads/' + cPoi.property_image['@attributes'].id + "/0/" + cPoi.property_image.record + '" class="cover-img" />';

            // <div class="expiration">
            if (self.sharedState.searchType == 'state' || self.sharedState.searchType == 'country') {
              if (cPoi.neighborhood.length > 0) infoWindowContent += '<div class="expiration"><i class="fa fa-map-marker"></i>' + cPoi.neighborhood + '</div>';
            } else {
              if (cPoi.distance > 0) {
                infoWindowContent += '<div class="expiration"><i class="fa fa-map-marker"></i>' + cPoi.distance + ' mi from Downtown</div>';
              } else {
                infoWindowContent += '<div class="expiration"><i class="fa fa-map-marker"></i>' + cPoi.city + '</div>';
              }
            }

            // <div class="shadow">
            infoWindowContent += '<div class="shadow"></div>';

            infoWindowContent += '</figure>';

            //_____________________________________
            // <header class="card-header">
            infoWindowContent += '<header class="card-header">';

            // <img class="card-header-logo">
            infoWindowContent += '<img alt="' + cPoi.brand.record.brand + '" src="' + cPoi.brand.record.mediafile + '" class="card-header-logo" border="0" />';

            // <p class="card-title">
            infoWindowContent += '<p class="card-title">' + cPoi.name + '</p>';

            // <img class="card-tripadvisor-logo">
            infoWindowContent += '<img alt="TripAdvisor rating for ' + cPoi.name + '" src="/templates/main/images/tripadvisor/inline/rating-' + cPoi.rating + '.png" class="card-tripadvisor-logo" />';

            // <a class="card-button">
            infoWindowContent += '<a class="card-button" aria-label="reserve" href="' + self.bookingFunnelURL(cPoi) + '"><svg class="svg-cart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16.3 14.3"><path class="fill" d="M14.7 9.7H4.3L2.2 1H.5C.2 1 0 .8 0 .5S.2 0 .5 0H3l.4 1.7h12.8l-1.5 8zm-9.6-1h8.7L15 2.8H3.7l1.4 5.9zM6.7 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.3.6-.6.6zM12.5 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.2.6-.6.6z"/></svg></a>';

            infoWindowContent += '</header>';

            //_____________________________________
            // <footer class="card-footer">
            infoWindowContent += '<footer class="card-footer">';

            // <p class="card-details">
            infoWindowContent += '<p class="card-details">Lowest Available Rate</p>';

            // <p class="card-title">
            var minRateFixed = cPoi.minrate ? parseFloat(cPoi.minrate).toFixed(2) : "";
            if (cPoi.currency == 'USD') {
              infoWindowContent += '<p class="card-title">$' + minRateFixed + ' ' + cPoi.currency + '</p>';
            } else {
              infoWindowContent += '<p class="card-title">' + minRateFixed + ' ' + cPoi.currency + '</p>';
            }

            infoWindowContent += '</footer>';
            infoWindowContent += '</article>';

            infoWindowContent += '<div class="panel-beak"></div>';

            panels[poiId] = new google.maps.InfoWindow({
              content: infoWindowContent,
              position: { lat: poiLat, lng: poiLong },
              maxWidth: 260,
              maxHeight: 600,
              zIndex: 10
            });

            google.maps.event.addListener(panels[poiId], 'domready', function () {
              var iwOuter = $('.gm-style-iw');
              var iwParent = iwOuter.parent();
              var iwBackground = iwOuter.prev();

              iwParent.addClass('gm-style-iw-outer');
              iwOuter.addClass('gm-poi gm-panel-poi');

              // Remove the background shadow DIV
              iwBackground.children(':nth-child(2)').css({ 'display': 'none' });

              // Remove the white background DIV
              iwBackground.children(':nth-child(4)').css({ 'display': 'none' });

              iwBackground.children(':nth-child(1)').css({ 'display': 'none' });
              iwBackground.children(':nth-child(3)').css({ 'display': 'none' });
            });

            google.maps.event.addListener(titlePanel[poiId], 'domready', function () {
              var iwOuter = $('.gm-style-iw');
              var iwParent = iwOuter.parent();
              var iwBackground = iwOuter.prev();

              iwParent.addClass('gm-style-iw-outer gm-style-iw-outer-marker');
              iwOuter.addClass('gm-poi gm-marker-poi');

              // Remove the background shadow DIV
              iwBackground.children(':nth-child(2)').css({ 'display': 'none' });

              // Remove the white background DIV
              iwBackground.children(':nth-child(4)').css({ 'display': 'none' });

              iwBackground.children(':nth-child(1)').css({ 'display': 'none' });
              iwBackground.children(':nth-child(3)').css({ 'display': 'none' });
            });
            titlePanel[poiId].open(map);

            //cItem++;
          });

          //Markers functionality:
          $.each(titlePanel, function (id) {
            if (this.constructor.name != 'Window') {
              google.maps.event.addDomListener(titlePanel[id], 'domready', function () {
                if (Foundation.MediaQuery.atLeast('large')) {
                  $('.poi-' + id).click(function () {
                    //unselect everyone:
                    $('.gm-style-iw-outer-marker').removeClass('is-open');
                    $('.search-poi-panel').removeClass('is-active');

                    $('.poi-' + id).parents('.gm-style-iw-outer-marker').addClass('is-open');

                    //Hide all open panels:
                    $.each(panels, function (id) {
                      if (this.constructor.name != 'Window') {
                        if (panels[id].isOpen == true) {
                          panels[id].close();
                          panels[id].isOpen = false;
                          titlePanel[id].isOpen == true;
                        }
                      }
                    });

                    //work with our current marker / panel:
                    var panel = $('#' + 'poi_' + id);
                    $(panel).addClass('is-active');

                    var latLng = new google.maps.LatLng(titlePanel[id].position.lat(), titlePanel[id].position.lng());
                    map.panTo(latLng);

                    panels[id].open(map);
                    panels[id].isOpen = true;
                    titlePanel[id].isOpen == false;
                  });
                }
              });
            }
          });

          //Panels (infoWindows) functionality:
          $.each(panels, function (id) {
            if (this.constructor.name != 'Window') {
              google.maps.event.addListener(panels[id], 'closeclick', function () {
                panels[id].isOpen = false;
                titlePanel[id].isOpen == true;
                $('.gm-style-iw-outer-marker').removeClass('is-open');
                $('.search-poi-panel').removeClass('is-active');
              });

              google.maps.event.addListener(map, 'click', function () {
                // panels[id].isOpen = false;
                // titlePanel[id].isOpen == true;
                $('.gm-style-iw-outer-marker').removeClass('is-open');
                $('.search-poi-panel').removeClass('is-active');
                if (panels[id].isOpen == true) {
                  panels[id].close();
                  panels[id].isOpen = false;
                  titlePanel[id].isOpen == true;
                }
              });
            }
          });

          //hide panels on left sidebar if pin not in view
          if (Foundation.MediaQuery.atLeast('large')) {
            google.maps.event.addListener(map, 'idle', function () {
              var bounds = map.getBounds();

              $.each(titlePanel, function (id) {
                var infoPanel = $('.poi-panel-' + id);

                if (bounds.contains(titlePanel[id].getPosition()) === true) {
                  infoPanel.addClass('active');
                  infoPanel.show();
                  this.mapFiltered = true;
                } else {
                  infoPanel.hide();
                  infoPanel.removeClass('active');
                  this.mapFiltered = false;
                }
              });

              if (!Foundation.MediaQuery.atLeast('large') && $('.search-poi-panel-wrapper').hasClass('slick-initialized')) {
                $('.search-poi-panel-wrapper').slick('slickFilter', '.active');
              }
            });
          }

          google.maps.event.addListenerOnce(map, 'idle', function () {
            if (poi.length && (Foundation.MediaQuery.current == 'small' || Foundation.MediaQuery.current == 'medium')) {
              var mobilecenterLat = parseFloat(poi[0].latitude);
              var mobilecenterLong = parseFloat(poi[0].longitude);

              var newCenter = {
                lat: mobilecenterLat,
                lng: mobilecenterLong
              };

              map.panTo(newCenter);
            }
          });
        }
      }.bind(this)).fail(function () {
        console.log('no coordinates');
      });
    },

    highlightPin: function highlightPin(id) {
      $('.poi-' + id).addClass('active');
      $('.poi-' + id).parents('.gm-style-iw-outer').addClass('active');
    },

    unhighlightPin: function unhighlightPin(id) {
      $('.poi-' + id).removeClass('active');
      $('.poi-' + id).parents('.gm-style-iw-outer').removeClass('active');
    },

    //show panel:
    showPanel: function showPanel(ix) {
      //unselect everyone:
      $('.search-poi-panel.is-active').removeClass('is-active');
      $('.gm-style-iw-outer-marker').removeClass('is-open');

      //Hide all open panels:
      this.hidePanels(ix);

      //work with our current marker / panel:
      var panel = $('#' + 'poi_' + ix);
      $(panel).addClass('is-active');

      if (Foundation.MediaQuery.atLeast('large')) {
        panels[ix].open(map);
        panels[ix].isOpen = true;
        titlePanel[ix].isOpen == false;
        $('.poi-' + ix).parents('.gm-style-iw-outer-marker').addClass('is-open');
      } else {
        var latLng = new google.maps.LatLng(titlePanel[ix].position.lat(), titlePanel[ix].position.lng());
        map.panTo(latLng);
        //updateIcons(ix);
        titlePanel[ix].isOpen == true;
      }
    },

    //hide all info panels:
    hidePanels: function hidePanels() {
      $.each(panels, function (id) {
        if (this.constructor.name != 'Window') {
          if (panels[id].isOpen == true) {
            panels[id].close();
            panels[id].isOpen = false;
            titlePanel[id].isOpen == true;
          }
        }
      });
    },

    mobilePOISlider: function mobilePOISlider() {
      if (!Foundation.MediaQuery.atLeast('large') && !$('.search-poi-panel-wrapper').hasClass('slick-initialized')) {
        $('.search-poi-panel-wrapper').slick({
          arrows: false,
          dots: false,
          focusOnSelect: true,
          infinite: true,
          slide: 'div'
        });

        $('.search-poi-panel-wrapper').on('beforeChange', function () {
          var nextChild = $('.search-poi-panel-wrapper .search-poi-panel.slick-active').next(".search-poi-panel").attr('data-id');

          //unselect everyone:
          $('.search-poi-panel').removeClass('is-active');
          $('.gm-style-iw-outer-marker').removeClass('is-open');

          //Hide all open panels:
          $.each(panels, function (id) {
            if (this.constructor.name != 'Window') {
              if (panels[id].isOpen == true) {
                panels[id].close();
                panels[id].isOpen = false;
                titlePanel[id].isOpen == true;
              }
            }
          });

          $('.gm-style-iw-outer').removeClass('active');
          $('.poi_logo').removeClass('active');

          //work with our current marker / panel:
          var panel = $('#' + 'poi_' + nextChild);
          $(panel).addClass('is-active');

          var latLng = new google.maps.LatLng(titlePanel[nextChild].position.lat(), titlePanel[nextChild].position.lng());
          map.panTo(latLng);

          $('.poi-' + nextChild).addClass('active');
          $('.poi-' + nextChild).parents('.gm-style-iw-outer').css('z-index', '30').addClass('active');

          titlePanel[nextChild].isOpen == false;
        });
      } else if (Foundation.MediaQuery.atLeast('large') && $('.search-poi-panel-wrapper').hasClass('slick-initialized')) {
        $('.search-poi-panel-wrapper').slick('unslick');
      }
    },

    mobileBingPOISlider: function mobileBingPOISlider() {
      if (!Foundation.MediaQuery.atLeast('large') && !$('.search-poi-panel-wrapper').hasClass('slick-initialized')) {
        $('.search-poi-panel-wrapper').slick({
          arrows: false,
          dots: false,
          focusOnSelect: true,
          infinite: true,
          slide: 'div'
        });

        $('.search-poi-panel-wrapper').on('beforeChange', function () {
          //var nextChild = $('.search-poi-panel-wrapper .search-poi-panel.slick-active').next(".search-poi-panel").attr('data-id');

          //unselect everyone:
          $('.search-poi-panel').removeClass('is-active');
        });
      } else if (Foundation.MediaQuery.atLeast('large') && $('.search-poi-panel-wrapper').hasClass('slick-initialized')) {
        $('.search-poi-panel-wrapper').slick('unslick');
      }
    },

    searchMapPoi: function searchMapPoi(item) {
      var self = this;
      var id = item['@attributes'].id;

      console.log('id: ' + id);

      if (this.mapType == 'google') {
        //reset all panels and POI panels:
        this.hidePanels(id);

        //mark this selected panel
        var pId = id;
        this.showPanel(pId);
      } else {
        $('.MicrosoftMap .Infobox').hide();
        //unselect everyone:
        $('.search-poi-panel').removeClass('is-active');

        var panel = $('#' + 'poi_' + id);
        $(panel).addClass('is-active');

        if (Foundation.MediaQuery.atLeast('large')) {
          var formattedDate = moment(item.recent_stay_date, "MM/DD/YYYY").format('MMMM YYYY');

          var infoWindowContent = '';

          // ========================================================================
          // <article class="card-v2 resv-card map-card">
          infoWindowContent += '<article class="card-v2 resv-card map-card" itemscope="" itemtype="http://schema.org/Place" data-card-type="Map Card">';

          //_____________________________________
          // recent stay banner
          if (item.recent_stay_date) {
            infoWindowContent += '<div class="room-recentstay">You stayed here in ' + formattedDate + '</div>';
          }

          //_____________________________________
          // <figure class="card-img-cover">
          infoWindowContent += '<figure class="card-img-cover">';

          // <img class="cover-img">
          infoWindowContent += '<img itemprop="image" alt="' + item.name + '" src="/uploads/' + item.property_image['@attributes'].id + "/0/" + item.property_image.record + '" class="cover-img" />';

          // <div class="expiration">
          if (self.sharedState.searchType == 'state' || self.sharedState.searchType == 'country') {
            if (item.neighborhood.length > 0) infoWindowContent += '<div class="expiration"><i class="fa fa-map-marker"></i>' + item.neighborhood + '</div>';
          } else {
            if (item.distance > 0) {
              infoWindowContent += '<div class="expiration"><i class="fa fa-map-marker"></i>' + item.distance + ' mi from Downtown</div>';
            } else {
              infoWindowContent += '<div class="expiration"><i class="fa fa-map-marker"></i>' + item.city + '</div>';
            }
          }

          infoWindowContent += '</figure>';

          //_____________________________________
          // <header class="card-header">
          infoWindowContent += '<header class="card-header">';

          // <img class="card-header-logo">
          infoWindowContent += '<img alt="' + item.brand.record.brand + '" src="' + item.brand.record.mediafile + '" class="card-header-logo" border="0" />';

          // <p class="card-title">
          infoWindowContent += '<p class="card-title">' + item.name + '</p>';

          // <img class="card-tripadvisor-logo">
          infoWindowContent += '<img src="/templates/main/images/tripadvisor/inline/rating-' + item.rating + '.png" alt="TripAdvisor rating for ' + item.name + '" class="card-tripadvisor-logo" />';

          // <a class="card-button">
          infoWindowContent += '<a class="card-button" aria-label="reserve" href="' + self.bookingFunnelParams(item) + '"><svg class="svg-cart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16.3 14.3"><path class="fill" d="M14.7 9.7H4.3L2.2 1H.5C.2 1 0 .8 0 .5S.2 0 .5 0H3l.4 1.7h12.8l-1.5 8zm-9.6-1h8.7L15 2.8H3.7l1.4 5.9zM6.7 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.3.6-.6.6zM12.5 10.9c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5zm0 2.1c-.4 0-.6-.2-.6-.6 0-.4.2-.6.6-.6.4 0 .6.2.6.6 0 .4-.2.6-.6.6z"/></svg></a>';

          infoWindowContent += '</header>';

          //_____________________________________
          // <header class="room-name">
          infoWindowContent += '<footer class="card-footer">';

          // <p class="card-details">
          infoWindowContent += '<p class="card-details">Lowest Available Rate</p>';

          // <p class="card-title">
          var minRateFixed = item.minrate ? parseFloat(item.minrate).toFixed(2) : "";
          if (item.currency == 'USD') {
            infoWindowContent += '<p class="card-title">$' + minRateFixed + ' ' + item.currency + '</p>';
          } else {
            infoWindowContent += '<p class="card-title">' + minRateFixed + ' ' + item.currency + '</p>';
          }

          infoWindowContent += '</footer>';

          infoWindowContent += '</article>';

          var infobox = new Microsoft.Maps.Infobox(new Microsoft.Maps.Location(item.latitude, item.longitude), {
            visible: true,
            title: item.name,
            description: infoWindowContent
          });
          this.bingmap.entities.push(infobox);
          infobox.setMap(this.bingmap);
        }
      }
    },

    panelMobileClick: function panelMobileClick(item, e) {
      if (Foundation.MediaQuery.atLeast('large')) {
        e.preventDefault();
        this.searchMapPoi(item);
      }
    },

    priceOverlay: function priceOverlay() {
      this.sharedState.showPrice = true;
      $('body').addClass('no-scroll');
    },

    filterOverlay: function filterOverlay() {
      $('body').addClass('no-scroll');

      $.ajax({
        url: '/ajax/amenity-categories?' + this.sharedState.params,
        type: 'get',
        dataType: 'json',
        async: true,
        success: function (data) {

          if (!data.data) {
            this.error = true;
            return; // no results
          } else {

            var amenitiesCats = [];
            if (data.data.record) amenitiesCats = $.isArray(data.data.record) ? data.data.record : [data.data.record];
            this.amenitiesCatscomputed(amenitiesCats);
          }
        }.bind(this),
        error: function error(err) {
          console.log(err);
        }
      });

      $.ajax({
        url: '/ajax/get-brands',
        type: 'get',
        dataType: 'json',
        async: true,
        success: function (data) {

          if (!data.data) {
            this.error = true;
            return; // no results
          } else {

            var brandsCats = [];
            if (data.data.record) brandsCats = $.isArray(data.data.record) ? data.data.record : [data.data.record];
            this.brandsCatscomputed(brandsCats);
          }
        }.bind(this),
        error: function error(err) {
          console.log(err);
        }
      });

      this.sharedState.showFilters = true;

      if (this.sharedState.filtersparams.length > 0) {
        this.sharedState.amenitiesIds = this.sharedState.amenitiesIds.concat(this.sharedState.filtersparams);
      }

      if (this.sharedState.existingbrandfilters.length > 0) {
        this.sharedState.branditemsCodes = this.sharedState.branditemsCodes.concat(this.sharedState.existingbrandfilters);
      }
    },

    amenitiesCatscomputed: function amenitiesCatscomputed(amenitiesCats) {
      var cats = [];
      amenitiesCats.forEach(function (cat) {
        if (!cat.amenities) {
          cats.push(cat);
          return;
        }

        cat.amenities.record = $.isArray(cat.amenities.record) ? cat.amenities.record : [cat.amenities.record];
        cats.push(cat);
      });
      this.sharedState.amenitiescatsitems = cats;
    },
    brandsCatscomputed: function brandsCatscomputed(brandsCats) {
      var brands = [];
      brandsCats.forEach(function (brand) {

        if (brand.code !== 'MALL') {
          brands.push(brand);
          return;
        }
      });

      this.sharedState.brandfiltersparams = brands;
    },


    // helpers
    rateCalc: function rateCalc(rate, curr) {
      if (curr == 'USD') {
        return '$' + parseFloat(rate).toFixed(2) + ' ' + curr;
      }if (curr == 'PTS') {
        return this.numberWithCommas(rate) + ' ' + curr;
      } else {
        return parseFloat(rate).toFixed(2) + ' ' + curr;
      }
    },
    numberWithCommas: function numberWithCommas(x) {
      var parts = x.toString().split(".");
      parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      return parts.join(".");
    }
  }
});

module.exports = searchMapPage;

/***/ }),

/***/ 381:
/***/ (function(module, exports) {

module.exports = "<div class=\"search-map-wrapper map-wrapper row\">\n  <loading v-show=\"loading\"></loading>\n  <!-- include filters -->\n  <price v-show=\"sharedState.showPrice\"></price>\n  <filters v-show=\"sharedState.showFilters\"></filters>\n\n  <div id=\"search-poi-locations\" class=\"search-poi-locations small-12 medium-4 large-3 columns\">\n    <div class=\"search-poi-panel-wrapper\">\n      <div v-if=\"sharedState.brand\" v-on:mouseenter=\"highlightPin(brandpropertiesitem['@attributes'].id)\" v-on:mouseleave=\"unhighlightPin(brandpropertiesitem['@attributes'].id)\" v-bind:class=\"'search-poi-panel is-match poi-panel-'+brandpropertiesitem['@attributes'].id\" itemscope=\"\" itemtype=\"http://schema.org/TouristAttraction\" v-for=\"(brandpropertiesitem,index) in sharedState.brandpropertiesitems\" v-bind:id=\"'poi_'+brandpropertiesitem['@attributes'].id\" @click=\"searchMapPoi(brandpropertiesitem)\" v-bind:data-id=\"brandpropertiesitem['@attributes'].id\" v-bind:data-latitude=\"brandpropertiesitem.latitude\" v-bind:data-longitude=\"brandpropertiesitem.longitude\">\n        <a v-bind:href=\"'/en/'+brandpropertiesitem.brand.record.slug+'/hotels/'+brandpropertiesitem.property_url+'?arrive='+sharedState.arrive+'&depart='+sharedState.depart+'&promo='+sharedState.promo\" class=\"search-panel-link\" @click=\"panelMobileClick(brandpropertiesitem,$event)\">\n          <div itemprop=\"address\" itemscope=\"\" itemtype=\"http://schema.org/PostalAddress\">\n            <meta itemprop=\"addressCountry\" v-bind:content=\"brandpropertiesitem.country\" />\n            <meta itemprop=\"addressRegion\" v-bind:content=\"brandpropertiesitem.state\" />\n            <meta itemprop=\"addressLocality\" v-bind:content=\"brandpropertiesitem.city\" />\n            <meta itemprop=\"postalCode\" v-bind:content=\"brandpropertiesitem.postalcode\" />\n            <meta itemprop=\"streetAddress\" v-bind:content=\"brandpropertiesitem.address1+' '+brandpropertiesitem.address2\" />\n          </div>\n          <div itemprop=\"geo\" itemscope=\"\" itemtype=\"http://schema.org/GeoCoordinates\">\n            <meta itemprop=\"latitude\" v-bind:content=\"brandpropertiesitem.latitude\" />\n            <meta itemprop=\"longitude\" v-bind:content=\"brandpropertiesitem.longitude\" />\n          </div>\n          <div v-if=\"brandpropertiesitem.property_image\" class=\"i-cont search-poi-img-container\">\n            <img itemprop=\"photo\" :alt=\"brandpropertiesitem.name\" :src=\"`/uploads/${brandpropertiesitem.property_image['@attributes'].id}/0/${brandpropertiesitem.property_image.record}`\" class=\"search-poi-img\">\n            <!-- <img class=\"search-poi-img\" itemprop=\"photo\" v-bind:src=\"brandpropertiesitem.property_image\" v-bind:alt=\"brandpropertiesitem.name\" v-show=\"brandpropertiesitem.property_image.length\" /> -->\n          </div>\n          <div class=\"i-cont search-poi-name-cont\">\n            <div class=\"search-poi-location-name\" itemprop=\"name\">{{ propertiesName(brandpropertiesitem.name) }}</div>\n            <div class=\"search-poi-ratename\">{{ 'Lowest Available Rate' | translate('lowest-available-rate') }}</div>\n            <p v-if=\"sharedState.displayIn == 'points'\" class=\"search-poi-rateval\">{{ rateCalc(brandpropertiesitem.points.minpoints, 'PTS') }}</p>\n            <p v-if=\"sharedState.displayIn == 'pointsPlusCash'\" class=\"search-poi-rateval\">{{ rateCalc(brandpropertiesitem['cash-plus-points']['points'], 'PTS') }} + {{ rateCalc(brandpropertiesitem['cash-plus-points']['rate'], brandpropertiesitem.currency) }}</p>\n            <p v-if=\"sharedState.displayIn == 'currency'\" class=\"search-poi-rateval\">{{ rateCalc(brandpropertiesitem.minrate, brandpropertiesitem.currency) }}</p>\n          </div>\n        </a>\n      </div>\n\n      <article v-if=\"sharedState.brand && sharedState.othercarlsonproperties.length\" class=\"brand-divider show-for-large\">{{ 'Other Carlson Rezidor Hotels' | translate('other-carlson-rezidor-hotels') }}</article>\n      <div v-if=\"sharedState.brand\" v-on:mouseover=\"highlightPin(otherpropertiesitem['@attributes'].id)\" @mouseleave=\"unhighlightPin(otherpropertiesitem['@attributes'].id)\" v-bind:class=\"'search-poi-panel is-match poi-panel-'+otherpropertiesitem['@attributes'].id\" itemscope=\"\" itemtype=\"http://schema.org/TouristAttraction\" v-for=\"(otherpropertiesitem,index) in sharedState.othercarlsonproperties\" v-bind:id=\"'poi_'+otherpropertiesitem['@attributes'].id\" @click=\"searchMapPoi(otherpropertiesitem)\" v-bind:data-id=\"otherpropertiesitem['@attributes'].id\" v-bind:data-latitude=\"otherpropertiesitem.latitude\" v-bind:data-longitude=\"otherpropertiesitem.longitude\">\n        <a v-bind:href=\"'/en/'+otherpropertiesitem.brand.record.slug+'/hotels/'+otherpropertiesitem.property_url+'?arrive='+sharedState.arrive+'&depart='+sharedState.depart+'&promo='+sharedState.promo\" class=\"search-panel-link\" @click=\"panelMobileClick(otherpropertiesitem,$event)\">\n          <div itemprop=\"address\" itemscope=\"\" itemtype=\"http://schema.org/PostalAddress\">\n            <meta itemprop=\"addressCountry\" v-bind:content=\"otherpropertiesitem.country\" />\n            <meta itemprop=\"addressRegion\" v-bind:content=\"otherpropertiesitem.state\" />\n            <meta itemprop=\"addressLocality\" v-bind:content=\"otherpropertiesitem.city\" />\n            <meta itemprop=\"postalCode\" v-bind:content=\"otherpropertiesitem.postalcode\" />\n            <meta itemprop=\"streetAddress\" v-bind:content=\"otherpropertiesitem.address1+' '+otherpropertiesitem.address2\" />\n          </div>\n          <div itemprop=\"geo\" itemscope=\"\" itemtype=\"http://schema.org/GeoCoordinates\">\n            <meta itemprop=\"latitude\" v-bind:content=\"otherpropertiesitem.latitude\" />\n            <meta itemprop=\"longitude\" v-bind:content=\"otherpropertiesitem.longitude\" />\n          </div>\n          <div v-if=\"otherpropertiesitem.property_image\" class=\"i-cont search-poi-img-container\">\n            <img itemprop=\"photo\" :alt=\"otherpropertiesitem.name\" :src=\"`/uploads/${otherpropertiesitem.property_image['@attributes'].id}/0/${otherpropertiesitem.property_image.record}`\" class=\"search-poi-img\">\n            <!-- <img class=\"search-poi-img\" itemprop=\"photo\" v-bind:src=\"otherpropertiesitem.property_image\" v-bind:alt=\"otherpropertiesitem.name\" v-show=\"otherpropertiesitem.property_image.length\" /> -->\n          </div>\n          <div class=\"i-cont search-poi-name-cont\">\n            <div class=\"search-poi-location-name\" itemprop=\"name\">{{ propertiesName(otherpropertiesitem.name) }}</div>\n            <div class=\"search-poi-ratename\">{{ 'Lowest Available Rate' | translate('lowest-available-rate') }}</div>\n            <p v-if=\"sharedState.displayIn == 'points'\" class=\"search-poi-rateval\">{{ rateCalc(otherpropertiesitem.points.minpoints, 'PTS') }}</p>\n            <p v-if=\"sharedState.displayIn == 'pointsPlusCash'\" class=\"search-poi-rateval\">{{ rateCalc(otherpropertiesitem['cash-plus-points']['points'], 'PTS') }} + {{ rateCalc(otherpropertiesitem['cash-plus-points']['rate'], otherpropertiesitem.currency) }}</p>\n            <p v-if=\"sharedState.displayIn == 'currency'\" class=\"search-poi-rateval\">{{ rateCalc(otherpropertiesitem.minrate, otherpropertiesitem.currency) }}</p>\n          </div>\n        </a>\n      </div>\n\n      <div v-if=\"!sharedState.brand\" v-on:mouseover=\"highlightPin(propertiesitem['@attributes'].id)\" @mouseleave=\"unhighlightPin(propertiesitem['@attributes'].id)\" v-bind:class=\"'search-poi-panel is-match poi-panel-'+propertiesitem['@attributes'].id\" itemscope=\"\" itemtype=\"http://schema.org/TouristAttraction\" v-for=\"(propertiesitem,index) in sharedState.propertiesitems\" v-bind:id=\"'poi_'+propertiesitem['@attributes'].id\" @click=\"searchMapPoi(propertiesitem)\" v-bind:data-id=\"propertiesitem['@attributes'].id\" v-bind:data-latitude=\"propertiesitem.latitude\" v-bind:data-longitude=\"propertiesitem.longitude\">\n        <a v-bind:href=\"'/en/'+propertiesitem.brand.record.slug+'/hotels/'+propertiesitem.property_url+'?arrive='+sharedState.arrive+'&depart='+sharedState.depart+'&promo='+sharedState.promo\" class=\"search-panel-link\" @click=\"panelMobileClick(propertiesitem,$event)\">\n          <div itemprop=\"address\" itemscope=\"\" itemtype=\"http://schema.org/PostalAddress\">\n            <meta itemprop=\"addressCountry\" v-bind:content=\"propertiesitem.country\" />\n            <meta itemprop=\"addressRegion\" v-bind:content=\"propertiesitem.state\" />\n            <meta itemprop=\"addressLocality\" v-bind:content=\"propertiesitem.city\" />\n            <meta itemprop=\"postalCode\" v-bind:content=\"propertiesitem.postalcode\" />\n            <meta itemprop=\"streetAddress\" v-bind:content=\"propertiesitem.address1+' '+propertiesitem.address2\" />\n          </div>\n          <div itemprop=\"geo\" itemscope=\"\" itemtype=\"http://schema.org/GeoCoordinates\">\n            <meta itemprop=\"latitude\" v-bind:content=\"propertiesitem.latitude\" />\n            <meta itemprop=\"longitude\" v-bind:content=\"propertiesitem.longitude\" />\n          </div>\n          <div v-if=\"propertiesitem.property_image\" class=\"i-cont search-poi-img-container\">\n            <img itemprop=\"photo\" :alt=\"propertiesitem.name\" :src=\"`/uploads/${propertiesitem.property_image['@attributes'].id}/0/${propertiesitem.property_image.record}`\" class=\"search-poi-img\">\n            <!-- <img class=\"search-poi-img\" itemprop=\"photo\" v-bind:src=\"propertiesitem.property_image\" v-bind:alt=\"propertiesitem.name\" v-show=\"propertiesitem.property_image.length\" /> -->\n          </div>\n          <div class=\"i-cont search-poi-name-cont\">\n            <div class=\"search-poi-location-name\" itemprop=\"name\">{{ propertiesName(propertiesitem.name) }}</div>\n            <div class=\"search-poi-ratename\">{{ 'Lowest Available Rate' | translate('lowest-available-rate') }}</div>\n            <p v-if=\"sharedState.displayIn == 'points'\" class=\"search-poi-rateval\">{{ rateCalc(propertiesitem.points.minpoints, 'PTS') }}</p>\n            <p v-if=\"sharedState.displayIn == 'pointsPlusCash'\" class=\"search-poi-rateval search-poi-rateval-pointspluscash\">{{ rateCalc(propertiesitem['cash-plus-points']['points'], 'PTS') }} + {{ rateCalc(propertiesitem['cash-plus-points']['rate'], propertiesitem.currency) }}</p>\n            <p v-if=\"sharedState.displayIn == 'currency'\" class=\"search-poi-rateval\">{{ rateCalc(propertiesitem.minrate, propertiesitem.currency) }}</p>\n          </div>\n        </a>\n      </div>\n\n    </div>\n  </div>\n  <div class=\"search-poi-map-container small-6 medium-8 large-9 columns\">\n    <div class=\"filters-top\">\n      <div class=\"results-info row\">\n        <div class=\"results-filters\">\n          <template v-if=\"sharedState.hasPoints || sharedState.hasPointsPlusCash\" >\n\t\t\t<label for=\"map-payment\" class=\"show-for-large label\"><span>{{ 'Display In' | translate('display-in') }}:</span></label>\t\t\t\n            <form class=\"show-for-large\">\n              <div class=\"dropdown\">\n                <select id=\"map-payment\" v-model=\"sharedState.displayIn\">\n                  <option value=\"currency\">{{ 'Currency' | translate('currency') }}</option>\n                  <option v-if=\"sharedState.hasPoints\" value=\"points\">{{ 'Points' | translate('points') }}</option>\n                  <option v-if=\"sharedState.hasPointsPlusCash\" value=\"pointsPlusCash\">{{ 'Points + Cash' | translate('points-cash') }}</option>\n                </select>\n              </div>\n            </form>\n          </template>\n          <a @click=\"priceOverlay\" v-if=\"sharedState.hasPoints || sharedState.hasPointsPlusCash\" class=\"button primary hide-for-large\"><i class=\"fa\">$</i> <span>{{ 'Price' | translate('price') }}</span></a>\n\n          <a class=\"button primary\" @click=\"filterOverlay\"><i class=\"fa fa-sliders\" aria-hidden=\"true\"></i> <span>{{ 'Refine' | translate('refine') }}</span></a>\n\n          <a v-if=\"sharedState.brand\" class=\"button secondary\" v-bind:href=\"'/'+sharedState.brandInfo.slug+'/search-results?'+sharedState.params\"><i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i> <span>{{ 'List View' | translate('list-view') }}</span></a>\n          <a v-else class=\"button secondary\" v-bind:href=\"'/search-results?'+sharedState.params\"><i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i> <span>{{ 'List View' | translate('list-view') }}</span></a>\n        </div>\n      </div>\n    </div>\n    <div class=\"search-poi-map-inner\">\n      <div id=\"search-poiMap\" class=\"search-poiMap\"></div>\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 382:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// const $ = require('jquery');

// Template
var store = __webpack_require__(32);

var Tracking = void 0;

Tracking = {
  template: '',

  data: function data() {
    return store;
  }
};

module.exports = Tracking;

/***/ }),

/***/ 48:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * EvEmitter v1.1.0
 * Lil' event emitter
 * MIT License
 */

/* jshint unused: true, undef: true, strict: true */

(function (global, factory) {
  // universal module definition
  /* jshint strict: false */ /* globals define, module, window */
  if (true) {
    // AMD - RequireJS
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS - Browserify, Webpack
    module.exports = factory();
  } else {
    // Browser globals
    global.EvEmitter = factory();
  }
})(typeof window != 'undefined' ? window : undefined, function () {

  "use strict";

  function EvEmitter() {}

  var proto = EvEmitter.prototype;

  proto.on = function (eventName, listener) {
    if (!eventName || !listener) {
      return;
    }
    // set events hash
    var events = this._events = this._events || {};
    // set listeners array
    var listeners = events[eventName] = events[eventName] || [];
    // only add once
    if (listeners.indexOf(listener) == -1) {
      listeners.push(listener);
    }

    return this;
  };

  proto.once = function (eventName, listener) {
    if (!eventName || !listener) {
      return;
    }
    // add event
    this.on(eventName, listener);
    // set once flag
    // set onceEvents hash
    var onceEvents = this._onceEvents = this._onceEvents || {};
    // set onceListeners object
    var onceListeners = onceEvents[eventName] = onceEvents[eventName] || {};
    // set flag
    onceListeners[listener] = true;

    return this;
  };

  proto.off = function (eventName, listener) {
    var listeners = this._events && this._events[eventName];
    if (!listeners || !listeners.length) {
      return;
    }
    var index = listeners.indexOf(listener);
    if (index != -1) {
      listeners.splice(index, 1);
    }

    return this;
  };

  proto.emitEvent = function (eventName, args) {
    var listeners = this._events && this._events[eventName];
    if (!listeners || !listeners.length) {
      return;
    }
    // copy over to avoid interference if .off() in listener
    listeners = listeners.slice(0);
    args = args || [];
    // once stuff
    var onceListeners = this._onceEvents && this._onceEvents[eventName];

    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      var isOnce = onceListeners && onceListeners[listener];
      if (isOnce) {
        // remove listener
        // remove before trigger to prevent recursion
        this.off(eventName, listener);
        // unset once flag
        delete onceListeners[listener];
      }
      // trigger listener
      listener.apply(this, args);
    }

    return this;
  };

  proto.allOff = function () {
    delete this._events;
    delete this._onceEvents;
  };

  return EvEmitter;
});

/***/ }),

/***/ 68:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * getSize v2.0.2
 * measure size of elements
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true, unused: true */
/*global define: false, module: false, console: false */

(function (window, factory) {
  'use strict';

  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
      return factory();
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory();
  } else {
    // browser global
    window.getSize = factory();
  }
})(window, function factory() {
  'use strict';

  // -------------------------- helpers -------------------------- //

  // get a number from a string, not a percentage

  function getStyleSize(value) {
    var num = parseFloat(value);
    // not a percent like '100%', and a number
    var isValid = value.indexOf('%') == -1 && !isNaN(num);
    return isValid && num;
  }

  function noop() {}

  var logError = typeof console == 'undefined' ? noop : function (message) {
    console.error(message);
  };

  // -------------------------- measurements -------------------------- //

  var measurements = ['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'borderBottomWidth'];

  var measurementsLength = measurements.length;

  function getZeroSize() {
    var size = {
      width: 0,
      height: 0,
      innerWidth: 0,
      innerHeight: 0,
      outerWidth: 0,
      outerHeight: 0
    };
    for (var i = 0; i < measurementsLength; i++) {
      var measurement = measurements[i];
      size[measurement] = 0;
    }
    return size;
  }

  // -------------------------- getStyle -------------------------- //

  /**
   * getStyle, get style of element, check for Firefox bug
   * https://bugzilla.mozilla.org/show_bug.cgi?id=548397
   */
  function getStyle(elem) {
    var style = getComputedStyle(elem);
    if (!style) {
      logError('Style returned ' + style + '. Are you running this code in a hidden iframe on Firefox? ' + 'See http://bit.ly/getsizebug1');
    }
    return style;
  }

  // -------------------------- setup -------------------------- //

  var isSetup = false;

  var isBoxSizeOuter;

  /**
   * setup
   * check isBoxSizerOuter
   * do on first getSize() rather than on page load for Firefox bug
   */
  function setup() {
    // setup once
    if (isSetup) {
      return;
    }
    isSetup = true;

    // -------------------------- box sizing -------------------------- //

    /**
     * WebKit measures the outer-width on style.width on border-box elems
     * IE & Firefox<29 measures the inner-width
     */
    var div = document.createElement('div');
    div.style.width = '200px';
    div.style.padding = '1px 2px 3px 4px';
    div.style.borderStyle = 'solid';
    div.style.borderWidth = '1px 2px 3px 4px';
    div.style.boxSizing = 'border-box';

    var body = document.body || document.documentElement;
    body.appendChild(div);
    var style = getStyle(div);

    getSize.isBoxSizeOuter = isBoxSizeOuter = getStyleSize(style.width) == 200;
    body.removeChild(div);
  }

  // -------------------------- getSize -------------------------- //

  function getSize(elem) {
    setup();

    // use querySeletor if elem is string
    if (typeof elem == 'string') {
      elem = document.querySelector(elem);
    }

    // do not proceed on non-objects
    if (!elem || (typeof elem === 'undefined' ? 'undefined' : _typeof(elem)) != 'object' || !elem.nodeType) {
      return;
    }

    var style = getStyle(elem);

    // if hidden, everything is 0
    if (style.display == 'none') {
      return getZeroSize();
    }

    var size = {};
    size.width = elem.offsetWidth;
    size.height = elem.offsetHeight;

    var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';

    // get all measurements
    for (var i = 0; i < measurementsLength; i++) {
      var measurement = measurements[i];
      var value = style[measurement];
      var num = parseFloat(value);
      // any 'auto', 'medium' value will be 0
      size[measurement] = !isNaN(num) ? num : 0;
    }

    var paddingWidth = size.paddingLeft + size.paddingRight;
    var paddingHeight = size.paddingTop + size.paddingBottom;
    var marginWidth = size.marginLeft + size.marginRight;
    var marginHeight = size.marginTop + size.marginBottom;
    var borderWidth = size.borderLeftWidth + size.borderRightWidth;
    var borderHeight = size.borderTopWidth + size.borderBottomWidth;

    var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;

    // overwrite width and height if we can get it from style
    var styleWidth = getStyleSize(style.width);
    if (styleWidth !== false) {
      size.width = styleWidth + (
      // add padding and border unless it's already including it
      isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth);
    }

    var styleHeight = getStyleSize(style.height);
    if (styleHeight !== false) {
      size.height = styleHeight + (
      // add padding and border unless it's already including it
      isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight);
    }

    size.innerWidth = size.width - (paddingWidth + borderWidth);
    size.innerHeight = size.height - (paddingHeight + borderHeight);

    size.outerWidth = size.width + marginWidth;
    size.outerHeight = size.height + marginHeight;

    return size;
  }

  return getSize;
});

/***/ }),

/***/ 69:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Unipointer v2.2.0
 * base class for doing one thing with pointer event
 * MIT license
 */

/*jshint browser: true, undef: true, unused: true, strict: true */

(function (window, factory) {
  // universal module definition
  /* jshint strict: false */ /*global define, module, require */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(48)], __WEBPACK_AMD_DEFINE_RESULT__ = function (EvEmitter) {
      return factory(window, EvEmitter);
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('ev-emitter'));
  } else {
    // browser global
    window.Unipointer = factory(window, window.EvEmitter);
  }
})(window, function factory(window, EvEmitter) {

  'use strict';

  function noop() {}

  function Unipointer() {}

  // inherit EvEmitter
  var proto = Unipointer.prototype = Object.create(EvEmitter.prototype);

  proto.bindStartEvent = function (elem) {
    this._bindStartEvent(elem, true);
  };

  proto.unbindStartEvent = function (elem) {
    this._bindStartEvent(elem, false);
  };

  /**
   * works as unbinder, as you can ._bindStart( false ) to unbind
   * @param {Boolean} isBind - will unbind if falsey
   */
  proto._bindStartEvent = function (elem, isBind) {
    // munge isBind, default to true
    isBind = isBind === undefined ? true : !!isBind;
    var bindMethod = isBind ? 'addEventListener' : 'removeEventListener';

    if (window.PointerEvent) {
      // Pointer Events. Chrome 55, IE11, Edge 14
      elem[bindMethod]('pointerdown', this);
    } else {
      // listen for both, for devices like Chrome Pixel
      elem[bindMethod]('mousedown', this);
      elem[bindMethod]('touchstart', this);
    }
  };

  // trigger handler methods for events
  proto.handleEvent = function (event) {
    var method = 'on' + event.type;
    if (this[method]) {
      this[method](event);
    }
  };

  // returns the touch that we're keeping track of
  proto.getTouch = function (touches) {
    for (var i = 0; i < touches.length; i++) {
      var touch = touches[i];
      if (touch.identifier == this.pointerIdentifier) {
        return touch;
      }
    }
  };

  // ----- start event ----- //

  proto.onmousedown = function (event) {
    // dismiss clicks from right or middle buttons
    var button = event.button;
    if (button && button !== 0 && button !== 1) {
      return;
    }
    this._pointerDown(event, event);
  };

  proto.ontouchstart = function (event) {
    this._pointerDown(event, event.changedTouches[0]);
  };

  proto.onpointerdown = function (event) {
    this._pointerDown(event, event);
  };

  /**
   * pointer start
   * @param {Event} event
   * @param {Event or Touch} pointer
   */
  proto._pointerDown = function (event, pointer) {
    // dismiss other pointers
    if (this.isPointerDown) {
      return;
    }

    this.isPointerDown = true;
    // save pointer identifier to match up touch events
    this.pointerIdentifier = pointer.pointerId !== undefined ?
    // pointerId for pointer events, touch.indentifier for touch events
    pointer.pointerId : pointer.identifier;

    this.pointerDown(event, pointer);
  };

  proto.pointerDown = function (event, pointer) {
    this._bindPostStartEvents(event);
    this.emitEvent('pointerDown', [event, pointer]);
  };

  // hash of events to be bound after start event
  var postStartEvents = {
    mousedown: ['mousemove', 'mouseup'],
    touchstart: ['touchmove', 'touchend', 'touchcancel'],
    pointerdown: ['pointermove', 'pointerup', 'pointercancel']
  };

  proto._bindPostStartEvents = function (event) {
    if (!event) {
      return;
    }
    // get proper events to match start event
    var events = postStartEvents[event.type];
    // bind events to node
    events.forEach(function (eventName) {
      window.addEventListener(eventName, this);
    }, this);
    // save these arguments
    this._boundPointerEvents = events;
  };

  proto._unbindPostStartEvents = function () {
    // check for _boundEvents, in case dragEnd triggered twice (old IE8 bug)
    if (!this._boundPointerEvents) {
      return;
    }
    this._boundPointerEvents.forEach(function (eventName) {
      window.removeEventListener(eventName, this);
    }, this);

    delete this._boundPointerEvents;
  };

  // ----- move event ----- //

  proto.onmousemove = function (event) {
    this._pointerMove(event, event);
  };

  proto.onpointermove = function (event) {
    if (event.pointerId == this.pointerIdentifier) {
      this._pointerMove(event, event);
    }
  };

  proto.ontouchmove = function (event) {
    var touch = this.getTouch(event.changedTouches);
    if (touch) {
      this._pointerMove(event, touch);
    }
  };

  /**
   * pointer move
   * @param {Event} event
   * @param {Event or Touch} pointer
   * @private
   */
  proto._pointerMove = function (event, pointer) {
    this.pointerMove(event, pointer);
  };

  // public
  proto.pointerMove = function (event, pointer) {
    this.emitEvent('pointerMove', [event, pointer]);
  };

  // ----- end event ----- //


  proto.onmouseup = function (event) {
    this._pointerUp(event, event);
  };

  proto.onpointerup = function (event) {
    if (event.pointerId == this.pointerIdentifier) {
      this._pointerUp(event, event);
    }
  };

  proto.ontouchend = function (event) {
    var touch = this.getTouch(event.changedTouches);
    if (touch) {
      this._pointerUp(event, touch);
    }
  };

  /**
   * pointer up
   * @param {Event} event
   * @param {Event or Touch} pointer
   * @private
   */
  proto._pointerUp = function (event, pointer) {
    this._pointerDone();
    this.pointerUp(event, pointer);
  };

  // public
  proto.pointerUp = function (event, pointer) {
    this.emitEvent('pointerUp', [event, pointer]);
  };

  // ----- pointer done ----- //

  // triggered on pointer up & pointer cancel
  proto._pointerDone = function () {
    // reset properties
    this.isPointerDown = false;
    delete this.pointerIdentifier;
    // remove events
    this._unbindPostStartEvents();
    this.pointerDone();
  };

  proto.pointerDone = noop;

  // ----- pointer cancel ----- //

  proto.onpointercancel = function (event) {
    if (event.pointerId == this.pointerIdentifier) {
      this._pointerCancel(event, event);
    }
  };

  proto.ontouchcancel = function (event) {
    var touch = this.getTouch(event.changedTouches);
    if (touch) {
      this._pointerCancel(event, touch);
    }
  };

  /**
   * pointer cancel
   * @param {Event} event
   * @param {Event or Touch} pointer
   * @private
   */
  proto._pointerCancel = function (event, pointer) {
    this._pointerDone();
    this.pointerCancel(event, pointer);
  };

  // public
  proto.pointerCancel = function (event, pointer) {
    this.emitEvent('pointerCancel', [event, pointer]);
  };

  // -----  ----- //

  // utility function for getting x/y coords from event
  Unipointer.getPointerPoint = function (pointer) {
    return {
      x: pointer.pageX,
      y: pointer.pageY
    };
  };

  // -----  ----- //

  return Unipointer;
});

/***/ }),

/***/ 70:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Tap listener v2.0.0
 * listens to taps
 * MIT license
 */

/*jshint browser: true, unused: true, undef: true, strict: true */

(function (window, factory) {
  // universal module definition
  /*jshint strict: false*/ /*globals define, module, require */

  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(69)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Unipointer) {
      return factory(window, Unipointer);
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('unipointer'));
  } else {
    // browser global
    window.TapListener = factory(window, window.Unipointer);
  }
})(window, function factory(window, Unipointer) {

  'use strict';

  // --------------------------  TapListener -------------------------- //

  function TapListener(elem) {
    this.bindTap(elem);
  }

  // inherit Unipointer & EventEmitter
  var proto = TapListener.prototype = Object.create(Unipointer.prototype);

  /**
   * bind tap event to element
   * @param {Element} elem
   */
  proto.bindTap = function (elem) {
    if (!elem) {
      return;
    }
    this.unbindTap();
    this.tapElement = elem;
    this._bindStartEvent(elem, true);
  };

  proto.unbindTap = function () {
    if (!this.tapElement) {
      return;
    }
    this._bindStartEvent(this.tapElement, true);
    delete this.tapElement;
  };

  /**
   * pointer up
   * @param {Event} event
   * @param {Event or Touch} pointer
   */
  proto.pointerUp = function (event, pointer) {
    // ignore emulated mouse up clicks
    if (this.isIgnoringMouseUp && event.type == 'mouseup') {
      return;
    }

    var pointerPoint = Unipointer.getPointerPoint(pointer);
    var boundingRect = this.tapElement.getBoundingClientRect();
    var scrollX = window.pageXOffset;
    var scrollY = window.pageYOffset;
    // calculate if pointer is inside tapElement
    var isInside = pointerPoint.x >= boundingRect.left + scrollX && pointerPoint.x <= boundingRect.right + scrollX && pointerPoint.y >= boundingRect.top + scrollY && pointerPoint.y <= boundingRect.bottom + scrollY;
    // trigger callback if pointer is inside element
    if (isInside) {
      this.emitEvent('tap', [event, pointer]);
    }

    // set flag for emulated clicks 300ms after touchend
    if (event.type != 'mouseup') {
      this.isIgnoringMouseUp = true;
      // reset flag after 300ms
      var _this = this;
      setTimeout(function () {
        delete _this.isIgnoringMouseUp;
      }, 400);
    }
  };

  proto.destroy = function () {
    this.pointerDone();
    this.unbindTap();
  };

  // -----  ----- //

  return TapListener;
});

/***/ }),

/***/ 71:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*! ************************************************************* */
/*!                                                               */
/*!     This file is shared by search and the booking funnel.     */
/*!     Please test both when you make updates to this file.      */
/*!                                                               */
/*! ************************************************************* */

var $ = __webpack_require__(2);
var moment = __webpack_require__(0);
var ScrollMagic = __webpack_require__(40);
// require('scrollmagic/scrollmagic/uncompressed/plugins/debug.addIndicators');
var Foundation = __webpack_require__(14);

var Dates = void 0;

// Components
var Monthpicker = __webpack_require__(72);

Dates = {

  components: {
    'monthpicker': Monthpicker
  },

  mounted: function mounted() {
    // Add click event to open months
    $('.bookingview-dates').on('click', '.datepick-month-header', this.openMonths.bind(this));

    /* eslint-disable no-undef */
    this.sharedState.config.lang = PAGEINFO.language;
    /* eslint-enable no-undef */

    if (this.sharedState.session && this.sharedState.session.arrive != undefined) {
      this.sharedState.arrive = "";
      this.sharedState.depart = "";
      this.sharedState.dateProgress = '';
      // this.sharedState.dateStatus = true;
    }

    if (this.sharedState.arrive) {
      var arrive = moment(this.sharedState.arrive, this.sharedState.config.dateFormat).startOf('month');
    }

    // dateStatus holds date availability loaded through /ajax/availability?property=USAMPMN&promo=PROMO
    if (this.sharedState.dateStatus == true) {
      if (this.sharedState.arrive) {
        this.getAvailabilityData(arrive);
      } else {
        this.getAvailabilityData();
      }
    } else {
      // Create datepicker
      if (this.sharedState.arrive) {
        this.initializeDatepick(arrive);
      } else {
        this.initializeDatepick();
      }
    }
  },

  destroyed: function destroyed() {
    $('.bookingview-datepicker').datepick('destroy');
    if (this.sharedState.dateStatus != false) {
      // this.sharedState.dateStatus = true;
    }
  },

  watch: {
    "sharedState.promocodes.code": function sharedStatePromocodesCode() {
      this.getAvailabilityData();
    },
    "sharedState.promocodes.ecertCode": function sharedStatePromocodesEcertCode() {
      this.getAvailabilityData();
    },
    "sharedState.promocodes.corporateAccountId": function sharedStatePromocodesCorporateAccountId() {
      this.getAvailabilityData();
    },
    "sharedState.promocodes.travelAgencyId": function sharedStatePromocodesTravelAgencyId() {
      this.getAvailabilityData();
    }
  },

  methods: {
    initializeDatepick: function initializeDatepick(start) {
      var self = this;

      var opts = {
        fixedWeeks: false,
        monthsToShow: 2,
        multiSelect: 2,
        changeMonth: false,
        minDate: new Date(),
        onShow: $.datepick.highlightWeek,
        dateFormat: this.sharedState.config.dateFormat
      };

      if (self.sharedState.config.lang != 'en') {
        $.datepick.setDefaults($.datepick.regionalOptions[self.sharedState.config.lang]);
      } else {
        $.datepick.setDefaults($.datepick.regionalOptions['']);
        // Get day names based off of moment js
        var daysOfWeek = [];
        for (var i = 0; i < 7; i++) {
          daysOfWeek[i] = moment().day(i).format("ddd");
          if (window.innerWidth < 1024) {
            daysOfWeek[i] = daysOfWeek[i].charAt(0);
          }
        }

        opts.dayNamesMin = daysOfWeek;
      }

      opts.renderer = $.extend({}, $.datepick.defaultRenderer, {
        picker: '<div class="datepick">{inline:start}<div class="datepick-weekheader"><div class="datepick-weekheader-wrapper">{weekHeader}</div></div><div>{months}</div>{inline:end}</div>',
        month: '<div class="datepick-month"><div class="datepick-month-header"><div class="fliptext" data-text="Select Month"><div>{monthHeader}</div></div> <svg class="svg-month-arrow dropdown-titleicon" xmlns="http://www.w3.org/2000/svg" width="15" height="11" viewBox="0 0 15 11"><path class="fill" fill="#E62528" fill-rule="evenodd" d="M5.656 8.728l1.414 1.414 7.07-7.07L11.314.24 7.07 4.485 2.828.242l-2.83 2.83 5.658 5.656z"/></svg></div><table><tbody>{weeks}</tbody></table></div>',
        defaultClass: 'datepick-selectable',
        day: '<td>{day}</td>'
      });

      // Building each date. Happens on init, month change, and date selection
      opts.onDate = function (thisDate, current) {
        // if (this.sharedState.config.debug) { console.log('onDate'); }

        var date = moment(thisDate, this.sharedState.config.dateFormat);
        var prettyDate = date.format(this.sharedState.config.dateFormat);
        var arrive = moment(this.sharedState.arrive, this.sharedState.config.dateFormat);
        var depart = moment(this.sharedState.depart, this.sharedState.config.dateFormat);

        // default content and dateClass
        var content = '<span class="datepick-nights"></span>' + date.date();
        var dateClass = 'datepick-day';

        // Arrive/depart classes
        if (prettyDate === this.sharedState.arrive) {
          dateClass += ' datepick-arrive';
        }
        if (prettyDate === this.sharedState.depart) {
          dateClass += ' datepick-depart';
        }

        // Add range classes
        if (current && (date.isBetween(arrive, depart) || prettyDate === this.sharedState.depart)) {
          dateClass += ' datepick-selected';
        }
        if (current && date.date() == date.daysInMonth()) {
          dateClass += ' month-end';
        }
        if (current && date.date() == 1) {
          dateClass += ' month-start';
        }

        // Nights label
        if (prettyDate === this.sharedState.depart && this.sharedState.nights != 0) {
          var nightText = this.sharedState.nights == 1 ? 'night' : 'nights';
          content = '<span class="datepick-nights">' + this.sharedState.nights + ' ' + nightText + '</span>' + date.date();
        }

        // Min stay label
        if (prettyDate === this.sharedState.depart && this.sharedState.minstay > 1 && this.sharedState.nights < this.sharedState.minstay) {
          content = '<span class="datepick-nights">' + this.sharedState.minstay + ' Night Min</span>' + date.date();
        }

        // Unavailable dates
        if (this.sharedState.dateStatus != false && this.sharedState.dateStatus[prettyDate] && moment().isSameOrBefore(date)) {
          if (!this.sharedState.dateStatus[prettyDate].status && current) {
            dateClass += ' datepick-unavailable';
          }
        }

        return {
          content: content,
          dateClass: dateClass
        };
      }.bind(this); // end onDate

      opts.onSelect = function (dates) {
        var arrive = moment(dates[0], this.sharedState.config.dateFormat);
        var arriveFormat = arrive.format(this.sharedState.config.dateFormat);

        var depart = moment(dates[1], this.sharedState.config.dateFormat);
        var departFormat = depart.format(this.sharedState.config.dateFormat);

        var nights = depart.diff(arrive, 'days');

        // If the user is trying to select an unavailable date
        if (this.sharedState.dateStatus != false) {
          if (dates.length && this.sharedState.dateStatus[arriveFormat].status == false || dates.length > 1 && this.sharedState.dateStatus[departFormat].status == false) {
            var dpClass = $('.datepick-month.first').find('.datepick-selectable').attr('class').split(' ')[0];
            var selectedDate = moment(parseInt(dpClass.substring(2)));
            $('.bookingview-datepicker').datepick('setDate', []);
            $('.bookingview-datepicker').datepick('showMonth', selectedDate.format('YYYY'), selectedDate.format('MM'));
            return;
          }
        }

        // If the user is trying to select a departure that doesn't meet the min stay
        if (this.sharedState.minstay > 1 && nights < this.sharedState.minstay) {
          $('.bookingview-datepicker').datepick('setDate', [dates[0]]);
          return;
        }

        // If the user is trying to pick a depature that is before an arrival
        if (depart.isBefore(arrive)) {
          $('.bookingview-datepicker').datepick('setDate', [dates[0]]);
          return;
        }

        // If the arrival date is clicked on, reset the dates
        if (dates.length == 0 || dates.length == 1 && this.sharedState.depart == arrive.format(this.sharedState.config.dateFormat)) {
          if (this.sharedState.config.debug) {
            console.log('Resetting dates');
          }
          $('.bookingview-datepicker').datepick('clear');
          this.sharedState.arrive = null;
          this.sharedState.depart = null;
          this.sharedState.dateProgress = '';
          return;
        }
        // If an outside date is clicked on, reset the dates
        else if (dates.length == 2 && this.sharedState.depart == arrive.format(this.sharedState.config.dateFormat)) {
            if (this.sharedState.config.debug) {
              console.log('Resetting dates');
            }
            $('.bookingview-datepicker').datepick('clear');
            this.sharedState.arrive = null;
            this.sharedState.depart = null;
            this.sharedState.dateProgress = '';
          }

        // Set arrival and depature
        this.sharedState.arrive = arriveFormat;
        if (dates.length >= 2) {
          this.sharedState.depart = departFormat;
        } else {
          this.sharedState.depart = null;
        }

        // Track progress of selecting dates. Don't know if we'll actually need this
        if (dates.length == 1) {
          this.sharedState.dateProgress = 'arrive';
        } else if (dates.length >= 2 && this.sharedState.dateProgress != 'depart' && this.sharedState.dateProgress != '') {
          this.sharedState.dateProgress = 'depart';
          this.$emit('next');
        } else if (this.sharedState.arrive && this.sharedState.depart) {
          this.sharedState.dateProgress = 'depart';
        } else {
          this.sharedState.dateProgress = '';
        }

        this.sharedState.nights = depart.diff(arrive, 'days');
      }.bind(this); // end onSelect

      opts.onShow = $.datepick.hoverCallback(function (date, selectable) {
        var arrive = moment(this.sharedState.arrive, this.sharedState.config.dateFormat);
        var depart = moment(date, this.sharedState.config.dateFormat);
        var nights = depart.diff(arrive, 'days');

        // Show number of nights and add datepick-rang class
        if (selectable && this.sharedState.dateProgress === 'arrive' && nights > 0) {
          var nightText = nights == 1 ? 'night' : 'nights';
          $('.datepick-highlight .datepick-nights').text(nights + ' ' + nightText);

          // Min stay label
          if (this.sharedState.minstay > 1 && nights < this.sharedState.minstay) {
            $('.datepick-highlight .datepick-nights').text(this.sharedState.minstay + ' Night Min');
          }

          // Add datepicker-range to inbetween dates
          $('.datepick-day').each(function () {
            var dateClass = $(this).attr('class').split(' ')[0];
            dateClass = parseInt(dateClass.substring(2));

            // Apply or remove range
            if ((moment(dateClass).isBetween(arrive, depart) || moment(dateClass).isSame(depart)) && !$(this).hasClass('datepick-other-month')) {
              $(this).addClass('datepick-range');
            } else {
              $(this).removeClass('datepick-range');
            }
            // Add extra class if it's the last datepick range
            if (moment(dateClass).isSame(depart) && !$(this).hasClass('datepick-other-month')) {
              $(this).addClass('datepick-rangeend');
            } else {
              $(this).removeClass('datepick-rangeend');
            }
          });
        } else if (selectable) {
          // remove range classes
          $('.datepick-day.datepick-range').removeClass('datepick-range');
          $('.datepick-day.datepick-rangeend').removeClass('datepick-rangeend');
          return;
        } else {
          return;
        }
      }.bind(this)); // end onShow

      $('.bookingview-datepicker').datepick(opts);

      // If arrive and depart is already set, apply them to calendar
      if (start && this.sharedState.arrive && this.sharedState.depart) {
        var arriveDate = moment(this.sharedState.arrive, this.sharedState.config.dateFormat);
        var startDate = moment(start, this.sharedState.config.dateFormat);
        var firstMonth = startDate.startOf('month').format(this.sharedState.config.dateFormat);
        var secondMonth = startDate.add(1, 'M').endOf('month').format(this.sharedState.config.dateFormat);

        if (arriveDate.isBetween(firstMonth, secondMonth)) {
          var arrive = this.parseDate(this.sharedState.arrive);
          var depart = this.parseDate(this.sharedState.depart);
          $('.bookingview-datepicker').datepick('setDate', [arrive, depart]);
        }
      }

      // If came from review step,
      if (!$.isEmptyObject(this.sharedState.session)) {
        if (this.sharedState.session.arrive && !this.sharedState.arrive && !this.sharedState.depart) {
          var selectedDate = moment(this.sharedState.session.arrive, this.sharedState.config.dateFormat);
          $('.bookingview-datepicker').datepick('showMonth', selectedDate.format('YYYY'), selectedDate.format('MM'));
        }
      }

      // If they chose a month
      if (start) {
        $('.bookingview-datepicker').datepick('showMonth', start.format('YYYY'), start.format('MM'));
      }

      // pin dayheader
      if (!$('.datepick-weekheader-copy').length && this.sharedState.config.fixedDays) {
        var copiedHeader = $('.datepick-weekheader').clone();
        copiedHeader.prependTo('.bookingview-dates');
        copiedHeader.addClass('datepick-weekheader-copy');

        // create a scene
        var controller = new ScrollMagic.Controller();
        var scene = new ScrollMagic.Scene({
          triggerHook: "onLeave",
          offset: $('.bookingview').offset().top - $('.stepnav-toolbar').outerHeight() + 2
        }).setClassToggle(".datepick-weekheader-copy", "is-fixed");

        if (!Foundation.MediaQuery.atLeast('large')) {
          scene.setPin(".datepick-weekheader-copy");
          controller.addScene(scene);
        }
        $(window).on('changed.zf.mediaquery', function () {
          if (!Foundation.MediaQuery.atLeast('large')) {
            scene.setPin(".datepick-weekheader-copy");
            controller.addScene(scene);
            setTimeout(function () {
              scene.offset($('.bookingview').offset().top - $('.stepnav-toolbar').outerHeight() + 2);
            }, 300);
          } else {
            controller.removeScene(scene);
          }
        });
      }
    },

    getAvailabilityData: function getAvailabilityData(startArg) {
      // /ajax/availability?property=USAMPMN&promo=PROMO
      var params = {
        property: this.sharedState.property
      };
      if (this.sharedState.dateStatus == false) {
        return;
      }

      // Reset dateStatus
      if (this.sharedState.dateStatus != false) {}
      // this.sharedState.dateStatus = true;


      // Add promocodes to params
      if (this.sharedState.promocodes.code) {
        params.promo = this.sharedState.promocodes.code;
        // var noCode = ["LOWESTWB","AAA","GOVT","SR+CIT"];
        // if (noCode.indexOf(this.sharedState.promocodes.code) != -1) {
        //   params.rmccode = this.sharedState.promocodes.code;
        // } else {
        //   params.paccode = this.sharedState.promocodes.code;
        // }
      }
      if (this.sharedState.promocodes.corporateAccountId) {
        params.corp = this.sharedState.promocodes.corporateAccountId;
      }
      if (this.sharedState.promocodes.travelAgencyId) {
        params.travelagency = this.sharedState.promocodes.travelAgencyId;
      }
      if (this.sharedState.promocodes.ecertCode) {
        params.ecert = this.sharedState.promocodes.ecertCode;
      }

      // Add ratecode to params
      if (this.sharedState.ratecode) {
        params.ratecode = this.sharedState.ratecode;
      }

      // Add start date if available
      if (startArg) {
        var start = startArg.startOf('month');
        params.start = start.format(this.sharedState.config.dateFormat);
      }
      // If came from review step,
      if (this.sharedState.session && !start) {
        if (this.sharedState.session.arrive && !this.sharedState.arrive && !this.sharedState.depart) {
          var selectedDate = moment(this.sharedState.session.arrive, this.sharedState.config.dateFormat);
          selectedDate = selectedDate.startOf('month');
          params.start = selectedDate.format(this.sharedState.config.dateFormat);
        }
      }

      if (this.sharedState.config.debug) {
        this.ajaxUrl('/ajax/availability', params);
      }
      $.get('/ajax/availability', params).done(function (data) {
        if (this.sharedState.config.debug) {
          console.log(data);
        }
        var self = this;

        // If there was an error with the data, initialize datepick anyway
        if (!data.rooms.data.dates) {
          this.noData(start);
          return;
        }
        var dates = data.rooms.data.dates.record;

        // Add min stay
        if (data.rooms.data.parameters.minstay) {
          this.sharedState.minstay = parseInt(data.rooms.data.parameters.minstay);
        }

        // Fix the formatting for dates so that it's always an array
        if (!Array.isArray(dates)) {
          dates = [dates];
        }

        // Change dateStatus to an object
        self.sharedState.dateStatus = {};

        dates.forEach(function (date) {
          var dateName = moment(date['@attributes'].date).format(self.sharedState.config.dateFormat);
          if (self.sharedState.dateStatus[dateName]) {
            self.sharedState.dateStatus[dateName].status = date.available == "Yes" ? true : self.sharedState.dateStatus[dateName].status;
            self.sharedState.dateStatus[dateName].rates.push(date);
          } else {
            self.sharedState.dateStatus[dateName] = {
              status: date.available == "Yes" ? true : false,
              rates: [date]
            };
          }
        });

        $('.bookingview-datepicker').datepick('destroy');
        this.initializeDatepick(start);
      }.bind(this));
    },

    noData: function noData() {
      if (this.sharedState.config.debug) {
        console.error('Availability data did not load');
      }
      this.sharedState.dateStatus = false;
      this.initializeDatepick();
    },

    selectMonth: function selectMonth(dates) {
      console.log('selecting a month');
      // dateStatus holds date availability loaded through /ajax/availability?property=USAMPMN&promo=PROMO
      if (this.sharedState.dateStatus != false) {
        this.getAvailabilityData(dates);
      } else {
        // Create datepicker
        this.initializeDatepick();
      }
      $('.bookingview-datepicker').datepick('showMonth', dates.format('YYYY'), dates.format('MM'));
    },

    openMonths: function openMonths() {
      if ($('.monthpicker').length) {
        this.privateState.openMonthpicker = false;
      } else {
        this.privateState.openMonthpicker = true;
      }
    },

    removePromo: function removePromo(index) {
      this.sharedState.promocodes.codes.splice(index, 1);
    },

    parseDate: function parseDate(input) {
      var parts = input.match(/(\d+)/g);
      return new Date(parts[0], parts[1] - 1, parts[2]);
    },
    ajaxUrl: function ajaxUrl(url, params) {
      var recursiveDecoded = decodeURIComponent($.param(params));
      console.log(window.location.origin + url + '?' + recursiveDecoded);
    }
  }

};

module.exports = Dates;

/***/ }),

/***/ 72:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*! ************************************************************* */
/*!                                                               */
/*!     This file is shared by search and the booking funnel.     */
/*!     Please test both when you make updates to this file.      */
/*!                                                               */
/*! ************************************************************* */

var Vue = __webpack_require__(3);
var $ = __webpack_require__(2);
var moment = __webpack_require__(0);
var TweenMax = __webpack_require__(19).TweenMax;
var Foundation = __webpack_require__(14);

// Template
var template = __webpack_require__(73);

/* globals PAGEINFO */

var Monthpicker = void 0;

Monthpicker = Vue.component('monthpicker', {

  template: template,

  data: function data() {
    return {
      years: [moment().year()],
      monthsToShow: 12,
      lang: 'en'
    };
  },

  mounted: function mounted() {
    this.lang = PAGEINFO.language;

    this.initializeDatepick();

    $('.bookingview-datepicker .first .datepick-month-header').clone().addClass('datepick-month-header-copy').prependTo('.monthpicker .bookingview-full-body');
    TweenMax.to('.datepick-month-header .dropdown-titleicon', 0.3, {
      top: 0,
      rotation: 180,
      onComplete: function onComplete() {
        $('.datepick-month-header-copy').addClass('show');
      }
    });
  },

  beforeDestroy: function beforeDestroy() {
    $('.datepick-month-header-copy').removeClass('show');
    TweenMax.to('.datepick-month-header .dropdown-titleicon', 0.3, {
      rotation: 0
    });
  },

  methods: {
    initializeDatepick: function initializeDatepick() {
      var self = this;

      // Get current month
      var thisMonth = [moment().year(), moment().month()];

      // Get the starting month and the ending month
      var startDate = moment(thisMonth);
      var endDate = moment(thisMonth).add(this.monthsToShow, 'months');

      // Get end of this year and the start of next year
      var endOfStartYear = moment(thisMonth).endOf("year");
      var startOfEndYear = moment(endDate).startOf("year");

      // Get # of months till the end of current year
      var numOfMonths = [endOfStartYear.diff(startDate, 'months') + 1];

      // If end date is next year, get # of remaining months for next year
      if (startDate.year() != endDate.year() && numOfMonths[0] < this.monthsToShow) {
        numOfMonths.push(this.monthsToShow - numOfMonths[0]);
        this.years.push(endDate.year());
      }

      // Create a datepicker calendar for each year
      for (var i = 0; i < this.years.length; i++) {
        var opts = {
          fixedWeeks: true,
          monthsToShow: numOfMonths[i],
          rangeSelect: false,
          changeMonth: false,
          minDate: i == 0 ? new Date() : startOfEndYear.toDate()
        };

        if (this.lang == 'en') {
          opts.dayNamesMin = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
        }

        if (Foundation.MediaQuery.atLeast('large')) {
          opts.renderer = $.extend({}, $.datepick.defaultRenderer, {
            picker: '<div class="datepick">{inline:start}<div>{months}</div>{inline:end}</div>',
            month: '<div class="datepick-month"><div class="datepick-month-header">{monthHeader:MM}</div><table><thead>{weekHeader}</thead><tbody>{weeks}</tbody></table></div>'
          });
        } else {
          opts.renderer = $.extend({}, $.datepick.defaultRenderer, {
            picker: '<div class="datepick">{inline:start}<div>{months}</div>{inline:end}</div>',
            month: '<div class="datepick-month"><div class="datepick-month-header">{monthHeader:M}</div><table><thead>{weekHeader}</thead><tbody>{weeks}</tbody></table></div>'
          });
        }

        opts.onDate = function (date, current) {
          if (current) {
            return { dateClass: 'datepick-day datepick-date' };
          }
          return { dateClass: 'datepick-day' };
        };

        opts.onSelect = function (dates) {
          var selectedDate = moment(dates[0]);
          self.onMonthSelect(selectedDate);
        };

        $('#bookingview-monthpicker-' + i).datepick(opts);

        $('#bookingview-monthpicker-' + i).on('click', '.datepick-month', function () {
          var dpClass = $(this).find('.datepick-date').attr('class').split(' ')[0];
          var selectedDate = moment(parseInt(dpClass.substring(2)));
          self.onMonthSelect(selectedDate);
        });
      }
    },

    // Choosing a new month
    onMonthSelect: function onMonthSelect(date) {
      this.$emit('onMonthSelect', date);
      this.$emit('onMonthClick');
    },

    // Opening/closing the month picker
    onMonthClick: function onMonthClick() {
      this.$emit('onMonthClick');
    }
  }

});

module.exports = Monthpicker;

/***/ }),

/***/ 73:
/***/ (function(module, exports) {

module.exports = "<div class=\"monthpicker bookingview-full\">\n  <div class=\"bookingview-full-header\">\n    <button class=\"close-btn\" @click.prevent=\"onMonthClick\" aria-label=\"Close Months\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 68 68\" class=\"svg svg-close\"><path class=\"fill\" fill=\"#000000\" d=\"M43.9 34l23.334-23.335-9.9-9.9L34 24.1 10.666.766l-9.9 9.9L24.1 34 .767 57.334l9.9 9.9L34 43.9l23.335 23.334 9.9-9.9L43.9 34z\"/></svg>\n    </button>\n    <h1>Months</h1>\n  </div>\n\n  <div class=\"bookingview-full-body\">\n    <div class=\"monthpicker-year\">\n      <h2>{{ years[0] }}</h2>\n      <div id=\"bookingview-monthpicker-0\"></div>\n    </div>\n    <div class=\"monthpicker-year\" v-show=\"years[1]\">\n      <h2>{{ years[1] }}</h2>\n      <div id=\"bookingview-monthpicker-1\"></div>\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 81:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Flickity v2.0.10
 * Touch, responsive, flickable carousels
 *
 * Licensed GPLv3 for open source use
 * or Flickity Commercial License for commercial use
 *
 * http://flickity.metafizzy.co
 * Copyright 2017 Metafizzy
 */

(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(17), __webpack_require__(102), __webpack_require__(104), __webpack_require__(105), __webpack_require__(106), __webpack_require__(107), __webpack_require__(108)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(require('./flickity'), require('./drag'), require('./prev-next-button'), require('./page-dots'), require('./player'), require('./add-remove-cell'), require('./lazyload'));
  }
})(window, function factory(Flickity) {
  /*jshint strict: false*/
  return Flickity;
});

/***/ }),

/***/ 98:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * matchesSelector v2.0.2
 * matchesSelector( element, '.selector' )
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true, unused: true */

(function (window, factory) {
  /*global define: false, module: false */
  'use strict';
  // universal module definition

  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory();
  } else {
    // browser global
    window.matchesSelector = factory();
  }
})(window, function factory() {
  'use strict';

  var matchesMethod = function () {
    var ElemProto = window.Element.prototype;
    // check for the standard method name first
    if (ElemProto.matches) {
      return 'matches';
    }
    // check un-prefixed
    if (ElemProto.matchesSelector) {
      return 'matchesSelector';
    }
    // check vendor prefixes
    var prefixes = ['webkit', 'moz', 'ms', 'o'];

    for (var i = 0; i < prefixes.length; i++) {
      var prefix = prefixes[i];
      var method = prefix + 'MatchesSelector';
      if (ElemProto[method]) {
        return method;
      }
    }
  }();

  return function matchesSelector(elem, selector) {
    return elem[matchesMethod](selector);
  };
});

/***/ }),

/***/ 99:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Flickity.Cell
(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(68)], __WEBPACK_AMD_DEFINE_RESULT__ = function (getSize) {
      return factory(window, getSize);
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('get-size'));
  } else {
    // browser global
    window.Flickity = window.Flickity || {};
    window.Flickity.Cell = factory(window, window.getSize);
  }
})(window, function factory(window, getSize) {

  'use strict';

  function Cell(elem, parent) {
    this.element = elem;
    this.parent = parent;

    this.create();
  }

  var proto = Cell.prototype;

  proto.create = function () {
    this.element.style.position = 'absolute';
    this.x = 0;
    this.shift = 0;
  };

  proto.destroy = function () {
    // reset style
    this.element.style.position = '';
    var side = this.parent.originSide;
    this.element.style[side] = '';
  };

  proto.getSize = function () {
    this.size = getSize(this.element);
  };

  proto.setPosition = function (x) {
    this.x = x;
    this.updateTarget();
    this.renderPosition(x);
  };

  // setDefaultTarget v1 method, backwards compatibility, remove in v3
  proto.updateTarget = proto.setDefaultTarget = function () {
    var marginProperty = this.parent.originSide == 'left' ? 'marginLeft' : 'marginRight';
    this.target = this.x + this.size[marginProperty] + this.size.width * this.parent.cellAlign;
  };

  proto.renderPosition = function (x) {
    // render position of cell with in slider
    var side = this.parent.originSide;
    this.element.style[side] = this.parent.getPositionValue(x);
  };

  /**
   * @param {Integer} factor - 0, 1, or -1
  **/
  proto.wrapShift = function (shift) {
    this.shift = shift;
    this.renderPosition(this.x + this.parent.slideableWidth * shift);
  };

  proto.remove = function () {
    this.element.parentNode.removeChild(this.element);
  };

  return Cell;
});

/***/ })

},[366]);